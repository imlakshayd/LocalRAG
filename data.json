{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1>\n", "text": "\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:2>\n", "text": "\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:3>\n", "text": "JavaScript\u00ae All-in-One For Dummies\u00ae\nPublished by: John Wiley & Sons, Inc., 111 River Street,\nHoboken, NJ 07030-5774,\nwww.wiley.com\nCopyright \u00a9 2023 by John Wiley & Sons, Inc., Hoboken, New\nJersey\nPublished simultaneously in Canada\nNo part of this publication may be reproduced, stored in a\nretrieval system or transmitted in any form or by any means,\nelectronic, mechanical, photocopying, recording, scanning or\notherwise, except as permitted under Sections 107 or 108 of the\n1976 United States Copyright Act, without the prior written\npermission of the Publisher. Requests to the Publisher for\npermission should be addressed to the Permissions Department,\nJohn Wiley & Sons, Inc., 111 River Street, Hoboken, NJ 07030,\n(201) 748-6011, fax (201) 748-6008, or online at\n.\nhttp://www.wiley.com/go/permissions\nTrademarks: Wiley, For Dummies, the Dummies Man logo,\nDummies.com, Making Everything Easier, and related trade dress\nare trademarks or registered trademarks of John Wiley & Sons,\nInc., and may not be used without written permission. All other\ntrademarks are the property of their respective owners. John\nWiley & Sons, Inc., is not associated with any product or vendor\nmentioned in this book.\nLIMIT OF LIABILITY/DISCLAIMER OF WARRANTY: WHILE THE\nPUBLISHER AND AUTHORS HAVE USED THEIR BEST EFFORTS\nIN PREPARING THIS WORK, THEY MAKE NO REPRESENTATIONS\nOR WARRANTIES WITH RESPECT TO THE ACCURACY OR\nCOMPLETENESS OF THE CONTENTS OF THIS WORK AND\nSPECIFICALLY DISCLAIM ALL WARRANTIES, INCLUDING\nWITHOUT LIMITATION ANY IMPLIED WARRANTIES OF\nMERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\nNO WARRANTY MAY BE CREATED OR EXTENDED BY SALES\nREPRESENTATIVES, WRITTEN SALES MATERIALS OR\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:4>\n", "text": "PROMOTIONAL STATEMENTS FOR THIS WORK. THE FACT THAT\nAN ORGANIZATION, WEBSITE, OR PRODUCT IS REFERRED TO\nIN THIS WORK AS A CITATION AND/OR POTENTIAL SOURCE OF\nFURTHER INFORMATION DOES NOT MEAN THAT THE\nPUBLISHER AND AUTHORS ENDORSE THE INFORMATION OR\nSERVICES THE ORGANIZATION, WEBSITE, OR PRODUCT MAY\nPROVIDE OR RECOMMENDATIONS IT MAY MAKE. THIS WORK\nIS SOLD WITH THE UNDERSTANDING THAT THE PUBLISHER IS\nNOT ENGAGED IN RENDERING PROFESSIONAL SERVICES. THE\nADVICE AND STRATEGIES CONTAINED HEREIN MAY NOT BE\nSUITABLE FOR YOUR SITUATION. YOU SHOULD CONSULT WITH\nA SPECIALIST WHERE APPROPRIATE. FURTHER, READERS\nSHOULD BE AWARE THAT WEBSITES LISTED IN THIS WORK\nMAY HAVE CHANGED OR DISAPPEARED BETWEEN WHEN THIS\nWORK WAS WRITTEN AND WHEN IT IS READ. NEITHER THE\nPUBLISHER NOR AUTHORS SHALL BE LIABLE FOR ANY LOSS OF\nPROFIT OR ANY OTHER COMMERCIAL DAMAGES, INCLUDING\nBUT NOT LIMITED TO SPECIAL, INCIDENTAL, CONSEQUENTIAL,\nOR OTHER DAMAGES.\nFor general information on our other products and services,\nplease contact our Customer Care Department within the U.S. at\n877-762-2974, outside the U.S. at 317-572-3993, or fax 317-572-\n4002. For technical support, please visit\n.\nhttps://hub.wiley.com/community/support/dummies\nWiley publishes in a variety of print and electronic formats and by\nprint-on-demand. Some material included with standard print\nversions of this book may not be included in e-books or in print-\non-demand. If this book refers to media such as a CD or DVD that\nis not included in the version you purchased, you may download\nthis material at . For more\nhttp://booksupport.wiley.com\ninformation about Wiley products, visit .\nwww.wiley.com\nLibrary of Congress Control Number: 2023933800\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:5>\n", "text": "ISBN 978-1-119-90683-4 (pbk); ISBN 978-1-119-90684-1 (ebk);\nISBN 978-1-119-90685-8 (ebk)\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:6>\n", "text": "JavaScript\u00ae All-in-One For\nDummies\u00ae\nTo view this book's Cheat Sheet, simply go to\nwww.dummies.com and search for \u201cJavaScript\nAll-in-One For Dummies Cheat Sheet\u201d in the\nSearch box.\nTable of Contents\nCover\nTitle Page\nCopyright\nIntroduction\nWhy This Book?\nConventions Used in This Book\nFoolish Assumptions\nIcons Used in This Book\nBeyond the Book\nWhere to Go from Here\nBook 1: JavaScript Fundamentals\nChapter 1: Jumping into JavaScript\nJavaScript, the Basics\nReading and Copying JavaScript Code\nStarting Your Development Environment\nWriting Your First JavaScript Program\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:7>\n", "text": "Running Code in the Console\nRerunning Commands in the Console\nRunning Code in a Browser Window\nChapter 2: Filling Your JavaScript Toolbox\nInstalling Node.js\nConfiguring Visual Studio Code\nDocumenting Your Code\nCoding Responsibly with Git\nChapter 3: Using Data\nMaking Variables with let\nMaking Constants with const\nTaking a Look at the Data Types\nWrangling the Object: The Complex Data Type\nExamining the Array \u2014 a Special Kind of Object\nGetting a Handle on Scope\nChapter 4: Working with Operators and\nExpressions\nBuilding Expressions\nOperators: The Lineup\nOther Operators\nChapter 5: Controlling Flow\nChoosing a Path\nMaking Loops\nChapter 6: Using Arrays\nIntroducing Arrays\nCreating Arrays\nAccessing Array Elements\nModifying Arrays\nDeleting Array Elements\nProgramming with Array Methods\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:8>\n", "text": "Looping with Array Methods\nDestructuring Arrays\nSpreading Arrays\nChapter 7: Making and Using Objects\nObjects: The Basics\nCreating Objects\nModifying Objects\nComparing and Copying Objects\nUnderstanding Prototypes\nDeleting Object Properties\nChapter 8: Writing and Running Functions\nFunctions: An Introduction\nWriting Functions\nWriting Methods\nUnderstanding Context and this\nChaining Functions\nChapter 9: Getting Oriented with Classes\nEncapsulation\nAbstraction\nInheritance\nPolymorphism\nBase Classes\nDerived Classes\nConstructors\nProperties and Methods\nPracticing and Becoming comfortable with Classes\nChapter 10: Making Things Happen with Events\nUnderstanding the JavaScript Runtime Model\nThe Event Loop\nListening for Events\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:9>\n", "text": "Chapter 11: Writing Asynchronous JavaScript\nUnderstanding Asynchronous JavaScript\nMaking Promises\nUsing AJAX\nChapter 12: Using JavaScript Modules\nDefining Modules\nExporting Modules\nImporting Modules\nRenaming Exports and Imports\nImporting a Module Object\nLoading Dynamic Modules\nImporting Modules into HTML\nBook 2: Meet Your Web Browser\nChapter 1: What a Web Browser Does\nInterfacing with a Browser\nIntroducing the Browser Engine\nThe Rendering Engine\nNetworking\nChapter 2: Programming the Browser\nUnderstanding Web APIs and Interfaces\nGetting Around the Navigator\nStealing a Glimpse Through the Window\nIntroducing the HTML DOM\nKnowing Your History\nBook 3: React\nChapter 1: Getting Started with React\nUnderstanding ReactJS\nInitializing a Project with Vite\nIntroducing ReactDOM and the Virtual DOM\nChapter 2: Writing JSX\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:10>\n", "text": "Learning the Fundamentals of JSX\nUsing JavaScript Expressions in JSX\nConditionally Rendering JSX\nMaking a List\nStyling React Apps and Components\nChapter 3: Building React Components\nThinking in Components\nRecognizing the Two Types of Data\nFunction Components\nClass Components\nThe Component Lifecycle\nUsing the Lifecycle in Function Components\nComposing Components\nChapter 4: Using Data and Events in React\nEvent Handling in React\nMaking Forms with React\nBook 4: Vue\nChapter 1: Getting an Overview of Vue\nComparing Vue to React\nScaffolding Your First Vue.js Application\nMounting a Root Component\nExploring Vue's Two Styles\nInstalling Vue DevTools\nChapter 2: Introducing Vue Components\nIntroducing the Single-File Component\nNaming Components\nFollowing the Component Lifecycle\nHandling Errors in Components\nChapter 3: Making Vue Templates\nWriting HTML Templates\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:11>\n", "text": "Using JavaScript in Templates\nIntroducing Directives\nConditional Rendering\nRendering Lists\nComposing with Slots\nAdding Style to Components\nChapter 4: Using Data and Reactivity\nPassing and Using Props\nBinding Data to Templates\nInitializing and Changing Reactive Data\nIntroducing ref()\nComputing Properties\nReacting to State Changes with Watch()\nChapter 5: Responding to Events\nSetting Listeners with v-on\nUsing Event Modifiers\nBinding Forms to Events and Data\nBook 5: Svelte\nChapter 1: Getting Started with Svelte\nWhat Makes Svelte Different?\nBuilding Your Scaffolding\nGetting the Svelte for VS Code Extension\nExploring a Svelte App\nPlaying with Svelte\nChapter 2: Building with Components\nWriting Lean Components\nIdentifying What's in a Component\nAdding Style to a Component\nChapter 3: Designing Templates\nElements Are the Building Blocks\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:12>\n", "text": "Documenting Svelte with Comments\nChoosing a Path\nCreating Loops\nWriting Text Expressions\nComposing with Slots\nChapter 4: Using Directives\nListening for Events with on:\nCreating Two-Way Bindings with :bind\nUsing Transition Animations\nChapter 5: Using the Component Lifecycle\nThe Svelte Lifecycle\nFetching Data in Svelte\nChapter 6: Advanced Svelte Reactivity\nConstructing and Stocking the Store\nGetting and Setting Context\nBook 6: Sharpening Your Tools\nChapter 1: Building from Scratch\nWhy You Need a Build Tool\nManaging Dependencies with npm\nWriting Your First Files\nWriting a dev Script\nMaking Modules\nChapter 2: Optimizing and Bundling\nAutomating Your Build Script\nConverting to React\nChapter 3: Testing Your JavaScript\nUsing a Linter\nDebugging in Chrome\nUnit Testing\nBook 7: Node.js\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:13>\n", "text": "Chapter 1: Node.js Fundamentals\nLearning What Makes Node.js Tick\nLearning the Parts of Node.js\nIntroducing the Node.js Core Modules\nRecognizing What Node.js Is Good For\nWorking with Node.js\nUsing REPL\nMaking and Using Node.js Modules\nGetting Data to Node Modules\nNode's Callback Pattern\nChapter 2: Streaming\nJumping into Streams\nCreating Readable Streams\nCreating Writable Streams\nProducing Duplex Streams\nTransforming Streams\nChaining Streams\nChapter 3: Working with Buffers\nKnowing Your Buffer Basics\nDecoding Buffers\nCreating Buffers\nUsing Other Buffer Methods\nIterating over Buffers\nChapter 4: Accessing the File System\nImporting the fs module\nReading Files\nWriting Files\nUsing Paths\nGetting File and Directory Information\nChapter 5: Networking with Node\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:14>\n", "text": "A Note about Security\nMaking a Web Server\nChapter 6: Using Events\nIntroducing EventEmitter\nUnderstanding and Using maxListeners\nRemoving Listeners\nEmitting Once\nChapter 7: Error Handling and Debugging\nKnowing the Types of Errors\nUnderstanding Node.js's Error Object\nExceptions versus Errors\nHandling Exceptions\nDebugging Node.js Programs\nChapter 8: Accessing Databases\nGetting Started with MongoDB\nStarting MongoDB\nUsing Mongosh\nUsing MongoDB from Node.js\nChapter 9: Riding on the Express Train\nInstalling Express\nServer-Side Routing with Express\nUsing Express Middleware\nAnalyzing a Complete Express Server\nServing a View\nUsing the Express Application Generator\nChapter 10: Registration and Authentication\nMaking and Configuring the Directory\nAdding the App and Server Modules\nMaking Some Basic Routes\nTesting Your Routes\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:15>\n", "text": "Making a Schema with Mongoose\nImplementing User Registration\nHandling Authentication\nGenerating and Using Tokens\nFinishing the Login Route\nIndex\nAbout the Author\nConnect with Dummies\nEnd User License Agreement\nList of Tables\nBook 1 Chapter 3\nTABLE 3-1 JavaScript Special Characters\nBook 1 Chapter 4\nTABLE 4-1 JavaScript Comparison Operators\nTABLE 4-2 Arithmetic Operators\nTABLE 4-3 Logical Operators\nBook 1 Chapter 6\nTABLE 6-1 JavaScript Array Methods\nBook 1 Chapter 8\nTABLE 8-1 The Built-In Top-Level Functions in JavaScript\nBook 1 Chapter 10\nTABLE 10-1 Events Supported by All HTML Elements\nBook 2 Chapter 2\nTABLE 2-1 Examples of Window Interface Properties\nTABLE 2-2 Commonly-Used Methods of the Window Interface\nTABLE 2-3 Important Properties of the Document Interface\nTABLE 2-4 The Most Common Document Methods\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:16>\n", "text": "TABLE 2-5 Properties of the Element Interface\nTABLE 2-6 Useful Event Methods\nBook 7 Chapter 3\nTABLE 3-1 Common Buffer Methods\nBook 7 Chapter 8\nTABLE 8-1 A Relational Database Table\nTABLE 8-2 Common MongoDB Shell Commands\nList of Illustrations\nBook 1 Chapter 1\nFIGURE 1-1: Admiral Grace Murray Hopper invented modern\ncomputer programming.\nFIGURE 1-2: Netscape Navigator in 1995.\nFIGURE 1-3: The first version of Internet Explorer.\nFIGURE 1-4: HTTP request and response.\nFIGURE 1-5: The Chrome developer tools.\nFIGURE 1-6: Viewing the code at Google.com.\nFIGURE 1-7: The Sources tab in the developer tools.\nFIGURE 1-8: Minified code on the Sources tab.\nFIGURE 1-9: Google.com\u2019s JavaScript, prettified.\nFIGURE 1-10: The VS Code Get Started screen.\nFIGURE 1-11: The Dark (Visual Studio) color theme.\nFIGURE 1-12: Choosing the Open Folder option.\nFIGURE 1-13: My code folder.\nFIGURE 1-14: You can trust me.\nFIGURE 1-15: Selecting Create New File from the command palette.\nFIGURE 1-16: A new HTML file, created using the command\npalette.\nFIGURE 1-17: The JavaScript console.\nFIGURE 1-18: Running the JavaScript Name Creator code.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:17>\n", "text": "Book 1 Chapter 2\nFIGURE 2-1: The VS Code Extensions panel.\nFIGURE 2-2: The Prettier extension.\nFIGURE 2-3: The Prettier extension settings.\nFIGURE 2-4: The Format on Save setting.\nFIGURE 2-5: Setting the default code formatter.\nFIGURE 2-6: The Live Server extension.\nFIGURE 2-7: A web page, served on Live Server.\nFIGURE 2-8: Hot reloading updates the browser for you.\nFIGURE 2-9: Previewing README.md in VS Code.\nFIGURE 2-10: Select all but one box when installing Git for\nWindows.\nFIGURE 2-11: Select Visual Studio Code as the default editor.\nFIGURE 2-12: Setting the default branch name.\nFIGURE 2-13: The Source Control panel in VS Code.\nFIGURE 2-14: Authorize Visual Studio Code to access your GitHub\naccount.\nFIGURE 2-15: Congratulations! You've created your first repo.\nFIGURE 2-16: The Source Control panel, with README.md under\nthe Changes heading...\nFIGURE 2-17: Viewing your repository's page on GitHub.\nBook 1 Chapter 3\nFIGURE 3-1: Declaring and initializing variables with let.\nFIGURE 3-2: Attempting to change a constant results in an error.\nFIGURE 3-3: Using typeof to get the data type.\nBook 1 Chapter 5\nFIGURE 5-1: Looping over an array's elements.\nFIGURE 5-2: Iterating over a string.\nBook 1 Chapter 6\nFIGURE 6-1: Creating and viewing an array in the console.\nFIGURE 6-2: Viewing the properties of the Array object.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:18>\n", "text": "FIGURE 6-3: Popping removes the last element.\nFIGURE 6-4: Pushing adds a new element.\nFIGURE 6-5: Shifting removes an element from the beginning of an\narray.\nFIGURE 6-6: Unshift adds an element to the beginning of the array.\nFIGURE 6-7: Slicing returns a portion of an array as a new array.\nFIGURE 6-8: Splicing removes a number of elements from an array.\nFIGURE 6-9: Using a callback function.\nFIGURE 6-10: A copy of an array (or another object) is a reference\nto the origi...\nBook 1 Chapter 7\nFIGURE 7-1: Undocking the Developer Tools.\nFIGURE 7-2: Automobile is a Vehicle.\nBook 1 Chapter 8\nFIGURE 8-1: The result of calling a function that requires an array\nwithout pas...\nFIGURE 8-2: Creating functions conditionally.\nFIGURE 8-3: Methods can change the values of properties.\nFIGURE 8-4: Attempting to pass a function to a method.\nFIGURE 8-5: Removing an element from an array.\nFIGURE 8-6: The finished bookstore app.\nFIGURE 8-7: The bookstore, after checkout.\nBook 1 Chapter 9\nFIGURE 9-1: Making a derived class.\nBook 1 Chapter 10\nFIGURE 10-1: The JavaScript runtime model.\nFIGURE 10-2: Viewing the event object.\nBook 1 Chapter 11\nFIGURE 11-1: The error that's generated when running Listing 11-\n6.\nFIGURE 11-2: Loading and displaying a local file.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:19>\n", "text": "FIGURE 11-3: Promise, fulfilled.\nFIGURE 11-4: Converting a Response body to an object.\nFIGURE 11-5: The possible outcomes of an HTTP request.\nFIGURE 11-6: The Network tab.\nFIGURE 11-7: Viewing the HTTP headers.\nBook 1 Chapter 12\nFIGURE 12-1: Loading modules dynamically in response to an\nevent.\nBook 2 Chapter 13\nFIGURE 1-1: The components of a web browser.\nFIGURE 1-2: The Elements tab contains tools for inspecting the\nDOM, CSSOM, and ...\nFIGURE 1-3: Viewing the browser's networking functions.\nFIGURE 1-4: Viewing local data storage on the Application tab.\nBook 2 Chapter 2\nFIGURE 2-1: Viewing the properties and methods of the navigator\nobject.\nFIGURE 2-2: Viewing the properties of the window object.\nFIGURE 2-3: A DOM tree.\nFIGURE 2-4: A simple to-do list, created using DOM methods.\nBook 3 Chapter 1\nFIGURE 1-1: A React UI is a higher level of abstraction.\nFIGURE 1-2: A user interface mockup.\nFIGURE 1-3: How state works.\nFIGURE 1-4: Pass a function to a child to do inverse data flow.\nFIGURE 1-5: The VS Code terminal window.\nFIGURE 1-6: The message you see when Vite finishes creating a\nReact app.\nFIGURE 1-7: The default Vite React starter project.\nFIGURE 1-8: The React Virtual DOM.\nBook 3 Chapter 2\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:20>\n", "text": "FIGURE 2-1: Using Babel's web-based interface.\nBook 3 Chapter 3\nFIGURE 3-1: Bing.com.\nFIGURE 3-2: A weather map widget (source: weatherwidget.io).\nFIGURE 3-3: Returning a function to stop the clock.\nBook 4 Chapter 1\nFIGURE 1-1: Answering questions and installing vue-create.\nFIGURE 1-2: The default vue-create app.\nFIGURE 1-3: A sheep-counting app, created by using the Options\nAPI.\nFIGURE 1-4: The Vue DevTools extension.\nBook 4 Chapter 2\nFIGURE 2-1: The Vue component instance lifecycle.\nFIGURE 2-2: Loading data from a server in the onMounted()\nlifecycle hook.\nBook 4 Chapter 3\nFIGURE 3-1: A static Vue component.\nFIGURE 3-2: How mustache syntax got its name.\nFIGURE 3-3: Templates don't have access to all JavaScript globals.\nFIGURE 3-4: Counting to 100 with Vue.\nFIGURE 3-5: The result of using a child object in a v-for loop.\nFIGURE 3-6: Using the FancyBorder component.\nFIGURE 3-7: Parents always win.\nFIGURE 3-8: Scoped styles override globals.\nFIGURE 3-9: Changing styles based on reactive data.\nBook 4 Chapter 4\nFIGURE 4-1: I'm trying to cut down.\nFIGURE 4-2: Vue has a lot of stars.\nFIGURE 4-3: A dynamic search box, created using a watcher\nfunction.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:21>\n", "text": "Book 4 Chapter 5\nFIGURE 5-1: Handling events inline.\nFIGURE 5-2: Handling events with a method handler.\nFIGURE 5-3: Access to globals is restricted in inline event handlers.\nBook 5 Chapter 1\nFIGURE 1-1: Svelte-versus-React rendering.\nFIGURE 1-2: The Vite + Svelte starter app.\nFIGURE 1-3: Svelte for VS Code adds Svelte support to VS Code.\nFIGURE 1-4: The start of your unsocial media app.\nFIGURE 1-5: Rendering an array in a Svelte template.\nFIGURE 1-6: Rendering a list of posts.\nFIGURE 1-7: The first iteration of Soliloquy: social media without\nthe social a...\nBook 5 Chapter 2\nFIGURE 2-1: Rendering a component with props.\nFIGURE 2-2: Array methods don't trigger reactivity.\nFIGURE 2-3: Using a reactive statement to display an error\nmessage.\nFIGURE 2-4: The Soliloquy app, with character counting and an\nerror message.\nBook 5 Chapter 3\nFIGURE 3-1: HTML in text will be escaped.\nBook 5 Chapter 4\nFIGURE 4-1: Testing the transition directive.\nBook 5 Chapter 5\nFIGURE 5-1: The console.log() method receives the old value.\nFIGURE 5-2: The values in the console and in the DOM match now.\nFIGURE 5-3: Mounting the StockTicker component.\nFIGURE 5-4: Displaying an error message when a Promise is\nrejected.\nBook 5 Chapter 6\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:22>\n", "text": "FIGURE 6-1: The user preferences component.\nFIGURE 6-2: Displaying a timer using a store.\nBook 6 Chapter 1\nFIGURE 1-1: Version 0.0.1 of the tentatively named Ball Moving\nGame.\nBook 6 Chapter 2\nFIGURE 2-1: The reorganized project structure.\nFIGURE 2-2: That's some hot reloading you have there!\nFIGURE 2-3: Bundled and minified JavaScript code.\nFIGURE 2-4: The first pieces are in place!\nFIGURE 2-5: The map.\nBook 6 Chapter 3\nFIGURE 3-1: The result of running ESLint.\nFIGURE 3-2: Linting errors halt the build process.\nFIGURE 3-3: The Sources panel.\nFIGURE 3-4: Viewing your source code in the Sources panel.\nFIGURE 3-5: Setting a breakpoint.\nFIGURE 3-6: Setting a watch expression.\nFIGURE 3-7: Look, ma \u2014 no configuration!\nFIGURE 3-8: A successful test.\nFIGURE 3-9: Running a test that fails.\nFIGURE 3-10: Your first React test passes!\nBook 7 Chapter 1\nFIGURE 1-1: Unfortunately, Toasteroid never advanced past being a\nKickstarter p...\nFIGURE 1-2: Illustrating the parts of Node.js.\nFIGURE 1-3: The Node.js core modules.\nFIGURE 1-4: Running a simple Node.js web server.\nFIGURE 1-5: Starting REPL.\nFIGURE 1-6: Inspecting the console object.\nFIGURE 1-7: The body of an HTTP request from Node.js.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:23>\n", "text": "FIGURE 1-8: Finding out REPL's commands with the .help\ncommand.\nFIGURE 1-9: Drawing a triangle in the console.\nFIGURE 1-10: Viewing the process object.\nBook 7 Chapter 2\nFIGURE 2-1: How streaming works.\nFIGURE 2-2: Logging chunks.\nFIGURE 2-3: A streaming Node.js counter.\nFIGURE 2-4: Transforming Moby Dick.\nBook 7 Chapter 3\nFIGURE 3-1: Reading binary data as text.\nFIGURE 3-2: Decoding using the wrong scheme can produce\ngarbled output.\nFIGURE 3-3: Using for-of to iterate over a buffer.\nBook 7 Chapter 4\nFIGURE 4-1: Returning a buffer from fs.readFile().\nFIGURE 4-2: Using path.resolve() and path.join().\nFIGURE 4-3: Getting file and directory information.\nBook 7 Chapter 5\nFIGURE 5-1: Viewing your request headers.\nBook 7 Chapter 6\nFIGURE 6-1: Meet your new JavaScript framework name.\nFIGURE 6-2: Node.js cannot read properties of undefined.\nFIGURE 6-3: Setting too many event listeners causes Node.js to\ndisplay a warnin...\nBook 7 Chapter 7\nFIGURE 7-1: Viewing the error object's properties.\nFIGURE 7-2: An error because of an uncaught exception.\nFIGURE 7-3: An error thrown because of an unhandled promise\nrejection.\nFIGURE 7-4: The HTML form in a browser.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:24>\n", "text": "FIGURE 7-5: The returned confirmation page from the server.\nFIGURE 7-6: The debugger starts and breaks at the first statement.\nFIGURE 7-7: Viewing the debugger's Help information.\nFIGURE 7-8: Watching the watchers.\nFIGURE 7-9: Starting the debugger.\nFIGURE 7-10: The Chrome DevTools Inspect interface.\nFIGURE 7-11: The Chrome DevTools Inspect interface.\nFIGURE 7-12: Your files have been added to the workspace.\nFIGURE 7-13: The paused debugger.\nBook 7 Chapter 8\nFIGURE 8-1: The MongoDB download page.\nFIGURE 8-2: Choosing the setup type.\nFIGURE 8-3: Configuring MongoDB as a service.\nFIGURE 8-4: Allow the installer program to make changes.\nFIGURE 8-5: Creating your first collection.\nFIGURE 8-6: Viewing the documents in a collection.\nFIGURE 8-7: Seeing your new user.\nFIGURE 8-8: Logging documents to the console.\nBook 7 Chapter 9\nFIGURE 9-1: Install the REST Client extension.\nFIGURE 9-2: The rest.http file, containing Send Request links.\nFIGURE 9-3: A response with a 201 status code.\nFIGURE 9-4: Generating an Express application.\nFIGURE 9-5: The default generated app's home page.\nFIGURE 9-6: The default generated app's structure.\nFIGURE 9-7: Calls to app.use() in app.js.\nFIGURE 9-8: Viewing the /users route.\nBook 7 Chapter 10\nFIGURE 10-1: Testing the routes.\nFIGURE 10-2: Successfully connected to the database.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:25>\n", "text": "FIGURE 10-3: Using a one-way hash.\nFIGURE 10-4: User created successfully.\nFIGURE 10-5: User already exists.\nFIGURE 10-6: Getting an access token.\nFIGURE 10-7: New post created!\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:26>\n", "text": "Introduction\n\u201cDo your work, and you shall reinforce yourself.\u201d\n\u2014RALPH WALDO EMERSON\nThe following scenario plays out at some point in the career of\nevery developer working on mobile or web apps today:\nYou show up at your new job (or new freelance gig). You were\ngood enough at using JavaScript that you got hired, and now\nyou\u2019re feeling confident that you can start making contributions\nquickly.\nThe HR manager gives you a tour and brings you to your new\ndesk \u2014 or maybe you work at home or at your local coffee shop.\nYou log in to your new email account and see a message from\nyour manager:\nWelcome to the team! Normally, we\u2019d give you a few weeks to\nget settled in, but we\u2019re slammed and I\u2019m hoping you can get\nworking on some code right away.\nThis morning, please log in to Slack and clone our repo, and\nwe\u2019ll get you started on some low-level tasks. A couple of\nthings you should know first are that we use a feature branch\nworkflow, we enforce Google style with ESLint, and we unit-\ntest with Mocha and Chai. Everything is Jamstack with MERN\non the back end. The API isn't fully documented yet, but it's\nREST, and you should be able to figure out the endpoints by\npoking around with Postman. Here are a few small tasks\nwhere we could use your help today:\nFigure out why the refresh token isn't getting\nset in some cases.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:27>\n", "text": "Our code splitting is suboptimal. Take a look at\nthe webpack config and see whether you can\nimprove the situation.\nSpeaking of suboptimal, we have some\nunnecessary Sass in the login module that may\nbe slowing down our build and load times and\nshould be converted to CSS Modules.\nOur ticker widget still relies on jQuery (ha-ha!),\nand we need to refactor that out before we ship\nso that we don't embarrass ourselves.\nOkay, that should be enough for today. We have our weekly\nstand-up tomorrow morning, and we can get you started on\nsomething more important then. Don't hesitate to reach out if\nyou have questions!\nYour palms start to sweat as you reread the message. You were\ntold you'd be working with JavaScript. What's all this stuff? Sass?\nYou know how to deal with unnecessary sass from your dog\u2026 .\nYou grab on to the part about jQuery. You recall reading about it\nin one of your books, and you're pretty sure you understand it.\nBut why does the manager think it's so funny?\nYou close your email and go to the cafe to order a chai mocha\nlatte and a Jamstack sandwich and have a rest in order to think\nabout whether you really and truly need this job.\nWhy This Book?\nI wrote this book because I've been in the situation just described\nnumerous times in my career as a full-stack developer. Maybe\nyou've already had an experience like that one and you want to\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:28>\n", "text": "make sure you're better prepared next time. Maybe you're going\nthrough this experience right now. Maybe you want to try to\nprevent this from happening to you as you begin your career in\nJavaScript programming. If you fit into any of these categories,\nthis book is for you.\nSoftware development is a dynamic craft. A good part of your\nresponsibility as a professional programmer is to learn new things\nconstantly. The world of JavaScript, however, is notoriously\ndynamic. Something you learn this year will likely be out of style\nor at least vastly different next year. There's no sense in fighting\nthe current by sticking to your tried-and-true methods and tools.\nMany times, if not most of the time, new libraries and tools catch\non quickly in JavaScript because they're genuinely useful and\nsuperior to the previous ones.\nLearning new things can be difficult, and learning new things\nunder pressure to begin using them on real-life projects can be\nparticularly stressful unless you're properly prepared with the\nright attitude and sufficient experience.\nMy goal with this book is to prepare you to understand and work\nwith JavaScript and JavaScript programmers. If you read this\nentire book, you'll understand much of what the manager in the\nscenario I described earlier said \u2014 and maybe even what to do\nabout it. You'll also be well-equipped to continue your learning\nand to ask the right questions when something you haven't heard\nof comes up next time.\nJavaScript is a huge topic\nProgrammers create new ways of working with JavaScript all the\ntime and package them as libraries and frameworks that can be\ndownloaded and used by other programmers. Think of libraries as\ntools to solve a particular problem in a different way. Think of a\nframework as a complete system for doing particular things.\nNo single person can know and remember every JavaScript library\nand framework that's been created. And there's really no need to.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:29>\n", "text": "By definition, a JavaScript library or framework is just JavaScript.\nIn theory, if you know JavaScript, you can learn every JavaScript\nlibrary and framework. In fact, if you know enough about\nJavaScript, you can write your own JavaScript library or\nframework!\nHow this book is different\nMost books about JavaScript focus on either teaching the\nJavaScript language itself, or on focusing on a single library or\nframework. Both approaches have their merits, but both leave out\na vital ingredient for becoming a JavaScript programmer.\nLearning to program with JavaScript isn't fundamentally about\nmemorizing syntax or knowing every function available in a library\nor framework. If you know and understand the basics, you can\nlook up everything else easily enough. Furthermore, if you spend\na lot of time learning every function and feature of a particular\nlibrary from a book, you'll be frustrated when you go to use it and\nfind that much has changed in the time (whether it's a month or\nseveral years) since the book was published.\nIn my experience, it's much better to learn just enough about as\nmany different ways of doing things as possible, so that when you\nencounter something new, you'll have something to compare it to.\nLearn JavaScript as it's used\nKnowing how to write JavaScript isn't enough to be able to\ndevelop apps. JavaScript lives in an environment, whether it's a\nweb browser, a mobile phone, a web server, or a hardware\ndevice. Once you get to a certain level of proficiency with\nJavaScript, knowing how JavaScript interfaces with its\nenvironment is what's most important.\nThis book shows you how JavaScript is used in the real world,\nusing a combination of real-world and simplified examples.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:30>\n", "text": "Understand similarities between the most\npopular libraries\nLearning about a single library \u2014 whether it's React or Vue.js or\nSvelte or Angular \u2014 is great. But without knowledge of other\nways of doing things, you may fall into the trap of thinking that\nevery problem can be best solved by the tool you know.\nIf you learn a wide variety of tools, you'll understand how libraries\nand frameworks are constantly improving on what's been done\nbefore, and you'll gain an appreciation for why change is so\nimportant in the JavaScript world.\nAdapt to new technologies\nAnother benefit of learning multiple ways to do the same thing is\nthat you'll find that the more you learn, the easier it becomes to\nlearn additional tools. One trait of outstanding JavaScript\nprogrammers is that they're excited by opportunities to learn new\nlibraries and tools.\nConventions Used in This\nBook\nThis book is designed for readers who have some experience with\nprogramming or web development and who want to learn not\nonly JavaScript but also how to apply it. Topics I describe in this\nbook include how to\nWrite JavaScript code using the most modern and up-to-date\nsyntax\nUse the development tools used by professional JavaScript\nprogrammers\nBuild reactive user interfaces with ReactJS\nBuild reactive user interfaces with Vue.js\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:31>\n", "text": "Build reactive user interfaces with Svelte\nWrite server-side JavaScript with Node.js\nConnect to data sources with Node.js\nBuild a complete back-end application using Node.js\nConnect a front-end user interface to a Node.js back end\nAs you read this book, keep the following information in mind:\nThe book can be read from beginning to end, but feel free to\nskip around, if you like. If a topic interests you, start there.\nYou can always return to earlier chapters, if necessary.\nAt some point, you will get stuck and the code you write won\u2019t\nwork as intended. Do not fear! You can find many resources to\nhelp you, including support forums, others on the Internet,\nand me! You can email me directly at or\nchris@minnick.com\nmessage me on Twitter, Mastodon, or through my website\n( ). Additionally, you can submit a ticket\nwww.chrisminnick.com\nand find additional code at my GitHub repo for this book, at\n.\nhttps://github.com/chrisminnick/javascriptaio\nCode in the book appears in a monospaced font, like this:\n.\n<h1>Hi there!</h1>\nFoolish Assumptions\nI do not make many assumptions about you, the reader, but I do\nmake a few.\nI assume that you have some experience or familiarity with\nHTML and CSS. Many of the applications I show you how to\ndevelop make use of both fundamental languages of the web\nto style and structure their output. Many excellent books and\ntutorials have been written about both topics, and the amount\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:32>\n", "text": "of HTML and CSS knowledge you need can be learned in a day\nor two.\nI assume that you have a computer running the latest version\nof Google Chrome. The examples in this book have been\ntested and optimized for the Chrome browser, which is\navailable for free from Google. Even so, the examples also\nwork in the latest version of Firefox, Safari, or Microsoft Edge.\nI assume that you have access to an Internet connection.\nMany of the examples in this book can be completed without\nan Internet connection, but some require one.\nI assume that you can download and install free software to\nyour computer. Oftentimes, the computer you use at work has\nrestrictions on what can be installed by the user. If you use\nyour own computer to develop and run the applications in this\nbook, that will generally work without a problem.\nIcons Used in This Book\nHere are the icons used in the book to flag text that should be\ngiven extra attention or that you can skip.\nThis icon flags useful information or explains a shortcut to\nhelp you understand a concept.\nThis icon explains technical details about the concept\nbeing explained. The details might be informative or\ninteresting but are not essential to your understanding of the\nconcept at this stage.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:33>\n", "text": "Try not to forget the material marked with this icon. It\nsignals an important concept or process that you should keep\nin mind.\nWatch out! This icon flags common mistakes and\nproblems that can be avoided if you heed the warning.\nBeyond the Book\nA lot of extra content that you won't find in this book is available\nat . Go online to find the following:\nwww.dummies.com\nThe source code for the examples in this book: You can\nfind it at .\nhttps://www.dummies.com/go/javascriptallinonefd\nThe source code is organized by book and chapter. The best\nway to work with a chapter is to download all the source code\nfor it at one time.\nUpdates: Code and specifications are constantly changing, so\nthe commands and syntax that work today may not work\ntomorrow. You can find any updates or corrections by visiting\nor\nwww.dummies.com/go/javascriptallinonefd\n.\nhttps://github.com/chrisminnick/javascriptaio\nCheat Sheet: The Cheat Sheet offers quick access to useful\ntips and shortcuts. Just go to and type\nwww.dummies.com\nJavaScript All-in-One For Dummies Cheat Sheet in the\nSearch box.\nWhere to Go from Here\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:34>\n", "text": "All right, now that all the administrative stuff is out of the way, it\u2019s\ntime to get started. You can totally do this. Congratulations on\ntaking your first step (or continuing your journey) in the exciting\nworld of JavaScript! Feel free to jump around the book if you're\ninterested in specific topics. If you're a total noob, start with\nChapter 1 in Book 1.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:35>\n", "text": "Book 1\nJavaScript Fundamentals\nContents at a Glance\nChapter 1: Jumping into JavaScript\nJavaScript, the Basics\nReading and Copying JavaScript Code\nStarting Your Development Environment\nWriting Your First JavaScript Program\nRunning Code in the Console\nRerunning Commands in the Console\nRunning Code in a Browser Window\nChapter 2: Filling Your JavaScript Toolbox\nInstalling Node.js\nConfiguring Visual Studio Code\nDocumenting Your Code\nCoding Responsibly with Git\nChapter 3: Using Data\nMaking Variables with let\nMaking Constants with const\nTaking a Look at the Data Types\nWrangling the Object: The Complex Data Type\nExamining the Array \u2014 a Special Kind of Object\nGetting a Handle on Scope\nChapter 4: Working with Operators and Expressions\nBuilding Expressions\nOperators: The Lineup\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:36>\n", "text": "Other Operators\nChapter 5: Controlling Flow\nChoosing a Path\nMaking Loops\nChapter 6: Using Arrays\nIntroducing Arrays\nCreating Arrays\nAccessing Array Elements\nModifying Arrays\nDeleting Array Elements\nProgramming with Array Methods\nLooping with Array Methods\nDestructuring Arrays\nSpreading Arrays\nChapter 7: Making and Using Objects\nObjects: The Basics\nCreating Objects\nModifying Objects\nComparing and Copying Objects\nUnderstanding Prototypes\nDeleting Object Properties\nChapter 8: Writing and Running Functions\nFunctions: An Introduction\nWriting Functions\nWriting Methods\nUnderstanding Context and this\nChaining Functions\nChapter 9: Getting Oriented with Classes\nEncapsulation\nAbstraction\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:37>\n", "text": "Inheritance\nPolymorphism\nBase Classes\nDerived Classes\nConstructors\nProperties and Methods\nPracticing and Becoming comfortable with Classes\nChapter 10: Making Things Happen with Events\nUnderstanding the JavaScript Runtime Model\nThe Event Loop\nListening for Events\nChapter 11: Writing Asynchronous JavaScript\nUnderstanding Asynchronous JavaScript\nMaking Promises\nUsing AJAX\nChapter 12: Using JavaScript Modules\nDefining Modules\nExporting Modules\nImporting Modules\nRenaming Exports and Imports\nImporting a Module Object\nLoading Dynamic Modules\nImporting Modules into HTML\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:38>\n", "text": "Chapter 1\nJumping into JavaScript\nIN THIS CHAPTER\nKnowing your JavaScript history\nLearning the basics of JavaScript syntax\nSetting up your development environment\nWriting and running your first program\nUsing the browser console\n\u201cTrust thyself: every heart vibrates to that iron string.\u201d\n\u2014RALPH WALDO EMERSON\nBecause it\u2019s built into every web browser, JavaScript is the most\nwidely used programming language today. But what exactly is\nJavaScript, and how did it get to where it is today?\nJavaScript, the Basics\nIn technical terms, JavaScript is a high-level, just-in-time compiled\nprogramming language. This is an important definition, but to\nunderstand it and to truly understand what JavaScript is, we need\nto talk about what it\u2019s not:\nJavaScript is not Java.\nJavaScript is not a scripting language.\nTo help you understand what this means, I need to provide some\ndefinitions and give a brief history lesson.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:39>\n", "text": "JavaScript is a programming\nlanguage\nA programming language is a set of rules, in the same way that a\nhuman language is a set of rules. In human languages, we call\nthe rules that form a language its grammar. In computer\nprogramming, we call the rules of a programming language its\nsyntax.\nMany different programming languages have been created, and\neach one has its own syntax. Just as many human languages are\nrelated to other languages (and therefore have similar grammar),\nmost programming languages are also related to other languages\nand have similar syntax.\nA look at programming language levels\nThe set of instructions that computer processors run is called\nmachine language. Machine language is called a low-level\nprogramming language because it\u2019s the actual instructions that\nare understood by a computer, with little or no abstraction.\nMachine language is the fastest possible way to instruct a\ncomputer to do something \u2014 however, it has a few problems.\nThe first problem with machine language is that it\u2019s difficult, or\nimpossible, for humans to write. Machine language consists of a\nstream of binary data. For example, here\u2019s a small sample of a\nmachine code program:\n100011 00011 01000 00000 00001 000100\nWhat does this program do? I have no idea. This brings us to the\nsecond problem with machine code.\nMachine code is processor-specific\nThe instructions to cause one computer to complete a calculation\nor another function are different from the codes used by another\ncomputer. If you write a program in machine language for one\ntype of computer processor, you need to write an entirely\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:40>\n", "text": "different program if you want the same functionality on another\ntype of computer. In the computer programming business, we say\nthat programs written in machine languages are not portable.\nHigh-level languages are abstractions\nHigh-level languages allow programmers to write code in a\nlanguage that\u2019s much closer to a spoken language. This makes it\npossible for more complex programs to be written more easily.\nAnother benefit of high-level languages is that they hide from the\nprogrammer some of the complexity of working with computers.\nFor example, a programmer using JavaScript who wants to loop\nover a list of numbers and find the even ones can just write\nsomething like this:\nlet getEvens = (numbers) => {\nlet evens = numbers.filter(number => number % 2 === 0);\nreturn evens;\n}\nAt this point, this snippet of code might look completely foreign to\nyou, but you\u2019ll soon understand it. A computer processor, on the\nother hand, can never make heads or tails out of this code. For\nthat, we need compilation.\nCompilation makes programs portable\nCompilation is the process of converting code from a high-level\nlanguage that programmers can understand (like JavaScript,\nPython, C++, and others) into a low-level language that the\ncomputer can run.\nThe compiler was invented by Admiral Grace Murray Hopper (see\nFigure 1-1), who also came up with the name and wrote the first\nimplemented compiler during the 1950s. In 1957, the FORTRAN\ncomputer language had the first commercially available compiler.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:41>\n", "text": "James S. Davis / Wikipedia Commons / Public Domain\nFIGURE 1-1: Admiral Grace Murray Hopper invented modern computer\nprogramming.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:42>\n", "text": "Compilation makes it possible for the same program, written in a\nhigh-level language, to run on many different types of computers,\nsimply by compiling it for the various computers rather than\nhaving to rewrite it. The invention of the compiler started the\ncomputer language revolution that made JavaScript possible.\nIn traditional compiled languages, a programmer writes code\n(called the source code) and then must run a process to compile\nthe source code into machine code. Compilation can be a slow\nprocess, but the result is low-level code that the computer can\nunderstand.\nJavaScript uses what\u2019s called a just-in-time compiler. Instead of\nJavaScript programmers needing to convert their code to machine\nlanguage, the program that runs JavaScript (known as a\nJavaScript engine) compiles the code before running it.\nA short and epic history of\nJavaScript\nIn the early days of the web, in the time before Google, an epic\nbattle raged between two rival forces that each sought to control\nthe vast new territories that were opening. We call this period The\nFirst Browser War, and it lasted from circa 1995 until 2001.\nThe two superpowers\nOn the side of freedom and open-source software was Netscape\nand its Netscape Navigator web browser, shown in Figure 1-2.\nNetscape Navigator, built on the open-source software created by\nthe early pioneers of the web, quickly became the most widely\nused way to access the web, with an astounding 90 percent\nmarket share.\nOn the side of seeking to maintain traditional, and highly\nprofitable, ways of selling and distributing software was Microsoft.\nAlthough it was the newcomer to the web, Microsoft had vast\narmies of programmers and salespeople \u2014 and a powerful leader\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:43>\n", "text": "named Bill Gates. With its Windows operating system, it also held\na near monopoly on the underlying software controlling people\u2019s\ncomputers.\nWith its monopoly status in operating systems, Microsoft was able\nto make up for lost time by quickly building and shipping its new\nInternet Explorer browser with its operating systems, as shown in\nFigure 1-3.\nFIGURE 1-2: Netscape Navigator in 1995.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:44>\n", "text": "FIGURE 1-3: The first version of Internet Explorer.\nIn these early versions, both Microsoft Internet Explorer and\nNetscape Navigator were based on the open-source Mosaic web\nbrowser, and their functionality was similar. This is when the\nbattles for control of the web began.\nThe early battles\nEach side in the battle raced to create innovative new features\nthat would compel people to use their company\u2019s browser instead\nof their rival\u2019s. It seems strange today, but website designers took\nsides in the battle and displayed logos of the browser visitors to\ntheir sites should use.\nThough Microsoft was happy to have the web be little more than\na tool for downloading and viewing documents, Netscape seemed\nto have an inkling of the true potential of the web as a dynamic\ncomputing environment. The only feature it was lacking was any\nsort of way to make web pages be dynamic.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:45>\n", "text": "Eich is back with a brand-new invention\nBrendan Eich, who worked at Netscape, took on the job of\ninventing a language for adding interactivity to web pages. He\nmashed together ideas and syntax from several other\nprogramming languages and created a language called Mocha,\nwhich was quickly renamed LiveScript and integrated into\nNetscape Navigator.\nSimultaneously, a revolution was happening in the wider world of\ncomputer programming because of an exciting new programming\nlanguage called Java. Seeing the potential for Java to be used to\nmake web pages dynamic, Netscape invented Java applets, which\nwere Java programs that could run inside a web browser.\nNetscape saw the potential for Mocha (now named LiveScript) to\nbe used to interact with these Java applets and renamed its\nprogramming language JavaScript.\nImitation is the sincerest form of flattery\nAs web pages began to appear that made use of JavaScript code\nto produce nifty effects and animation, Microsoft had to play\ncatch-up so that users wouldn\u2019t switch to using Netscape\nNavigator.\nMicrosoft reverse-engineered JavaScript and created a perfect\n(well, almost perfect) replica of it, called JScript, which it included\nin Internet Explorer. This moment in the first browser war\ndramatically slowed the evolution of the web because, although\nJavaScript and JScript were mostly compatible, their differences\nwere significant enough to make doing much \u201creal\u201d programming\nin web browsers extremely annoying, at least until the creation of\njQuery in 2006 \u2014 but that\u2019s another story.\nThe long road to standardization\nNetscape submitted JavaScript to the ECMA International\nstandards organization with the goal of creating a standard\nversion of JavaScript that every browser could agree on. The\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:46>\n", "text": "result was the ECMAScript specification, also known as ECMA-262,\nin 1997. Ever since then, JavaScript has been an implementation\nof ECMAScript, and every browser that supports JavaScript\nadheres to that specification.\nMeanwhile, Microsoft Internet Explorer, with its JScript language,\noverwhelmingly won the first browser war (with a market share of\n95 percent in 2000), and the world was stuck with two different,\nbut similar, languages for a while.\nNot until 2008, the same year that Google Chrome was released\n(which would overtake Internet Explorer to become the most-\noften-used browser by 2013), did every browser maker decide to\ncome together to work out their differences. The result was\nECMAScript 5 in 2009, and ECMAScript 6 (also known as ES2015)\nin 2015. As a result of ECMAScript 5 and 6, JavaScript was able to\nmove forward with browsers all running the same code the same\nway \u2014 and there was much rejoicing.\nHow JavaScript changes\nA new-and-improved edition of ECMAScript now comes out every\nyear. Each new edition is numbered according to the ES[year]\nformat. The process of maintaining and revising the language is\ndone openly on the web.\nIf you want to read the latest edition of the entire\nECMAScript specification, you can do so at\nhttps://262.ecma-\n.\ninternational.org\nReading and Copying\nJavaScript Code\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:47>\n", "text": "Many people start out learning JavaScript by looking at code\nwritten by other people and making changes to it. This is how I\ngot my start learning JavaScript, in fact. From the standpoint of\ngaining a deep understanding of the language, this isn\u2019t a great\napproach. However, for getting started, it\u2019s ideal.\nBecause JavaScript uses just-in-time (JIT) compilation, the code\nthe browser downloads when you visit a web page is source code.\nWhat this means is that it\u2019s possible for anyone who accesses any\nwebsite to read and download the code (including the HTML, CSS,\nand JavaScript) that makes the website\u2019s user interface work.\nThis isn\u2019t a flaw; this is by design.\nHow the web works\nThe Internet is a network made up of millions of computers that\ncan all talk to each other using a set of protocols called TCP/IP.\nTCP/IP, which stands for Transmission Control Protocol / Internet\nProtocol specifies how data is routed around the Internet and how\nany computer can locate any other computer connected to the\nnetwork.\nEach of these computers connected to the Internet may have\napplications running on it that send data over the Internet. One\nsuch application is called an HTTP server. An HTTP server\u2019s job is\nto use the HTTP protocol (or more commonly today, its encrypted\nversion, HTTPS) to respond to requests for web pages and other\nfiles required by web pages.\nOther applications running on web servers include email,\nstreaming media services, file sharing services, and the\ndomain name service, which translates internet protocol\naddresses (the IP in TCP/IP) like 127.0.0.1 to domain names\nlike and back.\nwww.example.com\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:48>\n", "text": "Requests to web servers are often (but not exclusively) made by\nprograms called web browsers. Figure 1-4 illustrates the process\nof a web browser making a request for a web page and a web\nserver responding.\nFIGURE 1-4: HTTP request and response.\nDescribing the technical details of how this request and response\nare made is beyond the scope of this chapter, but fear not \u2014 I\ncover it in more detail in Chapter 11 of Book 1.\nFront end and back end\nA computer (such as your laptop, desktop, or mobile phone) that\nuses a program like a web browser to make HTTP requests is\ncalled a client. A computer that responds to requests from clients\nis called a server.\nBefore JavaScript came along, web clients were what's known as\nthin clients (or sometimes dumb clients, which was the punchline\nfor a lot of jokes between those of us working on the web back\nthen). A thin client\u2019s job is to receive data from a server and\ndisplay it in some form.\nIn a browser without JavaScript, the browser makes a request,\nusing the HTTP protocol, to a web server. Whenever you click a\nlink or type an address into your browser\u2019s address bar, you\u2019re\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:49>\n", "text": "telling your client application (your web browser) to make a\nrequest from a server.\nFor example, if you request a web page at\n, you\u2019re telling the browser to\nhttp://www.example.com/about.html\nrequest the document named from the IP address that\nabout.html\nmatches up with the domain name. The HTTP\nwww.example.com\nrequest looks like this:\nGET /about.html HTTP/1.1\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)\nAppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36\nHost: www.example.com\nAccept-Language: en-us\nAccept-Encoding: gzip, deflate\nConnection: Keep-Alive\nIn short, this request says to use the HTTP GET method to access\nthe file named from the domain name\nabout.html\n. The request also contains information about\nwww.example.com\nyour browser, its language, and what kinds of encoding your\nbrowser accepts. The Keep-Alive instruction allows the connection\nbetween your browser and the server to stay active for multiple\nrequests.\nIf the file your browser requested exists, the server's response\nincludes the contents of . It\u2019s up to your web browser\nabout.html\nto determine how to display that content and to make additional\nHTTP requests to download any images or other resources (such\nas CSS files) that are specified in the HTML page.\nWhen JavaScript came onto the scene, browsers gained more\nabilities to manipulate the data received from the server. Now,\nrather than simply display the HTML file delivered by the server,\nbrowsers can download scripts and data from the server that\nallow you to process the data, reorganize it, and much more.\nThink about web-based applications such as Gmail, for example.\nIf you leave a browser window open with Gmail in it, new\nmessages are automatically downloaded. You can sort and filter\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:50>\n", "text": "your messages, compose new messages, and much more. This is\nJavaScript at work. Because of the ability to run JavaScript code,\nweb browsers changed from merely being thin clients to being\nthick clients.\nThe front end is open, the back\nend is closed\nToday, there are word processors, spreadsheets, sophisticated\nsocial media apps, image editing programs, and more that all run\ninside of web browsers. And, to return to my original point, the\ncode that runs in the browser for each of these applications is\navailable for anyone to read if they want to, and no one at\nFacebook or Google or Twitter cares if you view the code or even\nif you copy it.\nThe reason for this is that it\u2019s not the browser-based code that\nmakes a web application valuable. Without its back-end data and\nalgorithms that index and search the data, Google would be just a\nsimple web-based form that anyone who has watched a video\nabout HTML could do a decent job of writing.\nThe same goes for Facebook, Amazon, and every other website\nyou can think of. These companies vigorously protect their\nproprietary data and customer lists and the secret sauce that\nmakes people use them. This code all lives on web servers where\nyou absolutely can\u2019t access it except through the HTTP protocol.\nFollow these steps to view the source code that runs in your web\nbrowser when you go to Google.com:\n1. Open your Chrome web browser and go to\n.\nwww.google.com\n2. Press Ctrl+Shift+I (on Windows) or\nCommand+Option+I (on macOS) to open the Chrome\nDeveloper Tools.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:51>\n", "text": "You can also open the developer tools by going to the Chrome\nmenu (the three stacked dots in the upper right corner of the\nbrowser) and selecting More Tools and then Developer Tools.\nWhen you open the developer tools, a pane opens in your\nbrowser, which may be docked to the right side or the bottom,\nas shown in Figure 1-5.\n3. Examine the code on the Elements tab.\nThis tab shows the HTML and CSS that make up the current\npage in the browser. If you scroll through this source code,\nyou see script elements. Each of these contains either a link to\nJavaScript code or the actual JavaScript itself, as shown in\nFigure 1-6.\nThe Elements tab shows you the HTML and CSS behind a web\npage. Chrome has another tab in its Developer Tools pane that's\ndesigned for viewing the JavaScript code. Click the Sources tab in\nthe developer tools.\nFIGURE 1-5: The Chrome developer tools.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:52>\n", "text": "FIGURE 1-6: Viewing the code at Google.com.\nYou see a list of files on the left, some additional sections at the\nbottom, and a large main window to the right, as shown in Figure\n1-7.\nWhen you start expanding directories on the left, you see a\nnumber of files with strange names. When you click some of the\nJavaScript files, you see a lot of code that all runs together\nwithout formatting, as shown in Figure 1-8.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:53>\n", "text": "FIGURE 1-7: The Sources tab in the developer tools.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:54>\n", "text": "FIGURE 1-8: Minified code on the Sources tab.\nIf you look at the lower right corner of the main window on the\nSources tab, however, you see an icon that\u2019s made of an opening\ncurly brace and a closing curly brace ({}). Click on this icon.\nWhen you do, the code on the Sources tab is reformatted to look\nmuch easier to understand, as shown in Figure 1-9.\nFIGURE 1-9: Google.com\u2019s JavaScript, prettified.\nThis code is still optimized for the browser, and it doesn\u2019t contain\nthe useful variable names and comments that the original source\ncode contained. If you study it hard enough, though, even a\nnonprogrammer can pick out parts that make sense.\nThe value of a service\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:55>\n", "text": "If all the client-side code of a web application is visible to anyone\nwho cares to look, doesn\u2019t that create a security problem? Could\nsomeone with bad intentions view the source code and figure out\nhow to use the app for a purpose for which it wasn\u2019t intended?\nYes, in theory. But limitations and security precautions are built\ninto web browsers that prevent this. For example, a web page\ndownloaded from a server can\u2019t access data from just any web\nserver \u2014 it must either be from the same domain as the original\nHTTP request or be specifically permitted by the server to access\ndata. Also, web browsers operate in what\u2019s called a sandbox: The\ncode running in a web browser can\u2019t access anything outside of\nthe browser (such as files, other programs on your computer, or\nyour operating system) unless you specifically allow it (as you\nmight do when a web page asks to use your location).\nThe fact that every web application developer knows that their\ncode and the data downloaded from the server can be viewed\nalso helps to increase security. As a web application programmer,\none of your jobs is to ensure that no personal data or data that\nwould allow you to possibly access someone else\u2019s data is ever\nstored in the web browser and that all sensitive data is encrypted\nas it\u2019s transferred from the server to the client.\nBanks and other businesses that regularly handle personal data\nalways store and process that data on the server, where the code\nisn\u2019t visible to anyone except authorized people and where\nfirewalls and other security precautions can be implemented.\nPrograms that handle logins, credit card processing, data\nretrieval, and much more on web servers are called server-side\nservices.\nJavaScript on the server\nThe ability to run client-side JavaScript is built into every web\nbrowser. But JavaScript programs can also run on the server.\nNode.js, which you can learn about in Book 7, makes it possible\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:56>\n", "text": "to use the same JavaScript language you use to write front-end\nuser interfaces to write services on the back end.\nLike front-end JavaScript running in a browser, back-end\nJavaScript running in Node.js uses just-in-time compilation, and\nthe actual JavaScript files are stored as plain text. The difference\nbetween front-end JavaScript and back-end JavaScript running in\nNode.js is that web browsers never see the JavaScript that runs\non the server \u2014 they only receive the results of those programs\nrunning.\nAs a result, back-end JavaScript doesn\u2019t have to operate in a\nsandbox. It can access the server\u2019s operating system, other\nprograms running on the server, and databases to do what it\nneeds to do to process data and return results to web browsers.\nStarting Your Development\nEnvironment\nA development environment is the combination of tools used by a\nprogrammer to write programs. The most essential tool for any\nprogrammer is a code editor. This is where you write the source\ncode that makes up your programs.\nVisual Studio Code, or VS Code, is an all-purpose open-source\ncode editor for the web. Although you have plenty of other\noptions when it comes to code editors, VS Code is what most\nJavaScript developers now use, so it\u2019s the one I have you install\nfor following along in this book.\nIf you want to try out other code editors, I encourage you\nto do that. Search the web for best JavaScript code editors to\nfind a current list.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:57>\n", "text": "Installing Visual Studio Code\nFollow these steps to install VS Code:\n1. Go to in your web browser.\ncode.visualstudio.com\nYou see a page with a large download link, which should have\nthe name of your operating system on it (Windows, Linux, or\nmacOS).\n2. Click the link to download it, and then install it,\nchoosing all the default options if you're asked any\nquestions.\nReally, it\u2019s that easy.\nExact instructions for installing software are likely to\nchange frequently, so I don\u2019t include details and screen shots\nfor simple installations. If you run into any issues that\nprevent you from installing something, see the sidebar\n\u201cKnowing how to get unstuck\u201d in Chapter 2 of Book 1.\nWhen you first start up VS Code, you see the Get Started screen,\nshown in Figure 1-10.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:58>\n", "text": "FIGURE 1-10: The VS Code Get Started screen.\nThe most important thing to do on this screen the first time you\nload VS Code is to choose the color theme. This is a matter of\npersonal choice, and you can change it later if you don\u2019t end up\nliking the one you choose at first. The theme controls the colors\nused for syntax highlighting and the colors of the application in\ngeneral. My preferred theme, Dark (Visual Studio), is shown in\nFigure 1-11.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:59>\n", "text": "FIGURE 1-11: The Dark (Visual Studio) color theme.\nI tend to do most of my work in the early morning and\nnight. As such, most of my time spent looking at my monitors\nis done while it\u2019s dark outside. I generally use a dark theme\nbecause it makes the adjustment from coding to walking to\nthe kitchen easier on my eyes and makes me less likely to\nstub my toe.\nI'll use a light theme in this book going forward to save ink and\nmake my screenshots more easily readable.\nOnce you\u2019ve chosen a theme, you can continue to step through\nthe Get Started with VS Code walk-through instructions, view the\nLearn the Fundamentals instructions, or just close the Get Started\nwindow and follow my instructions here to get set up.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:60>\n", "text": "Learning to use Visual Studio Code\nYou spend a lot of time working in your code editor, so it\u2019s a good\nidea to get to know it. Even if you\u2019ve used Visual Studio Code\nbefore, I encourage you to read this section, because chances are\ngood that you\u2019ll learn something new.\nCreating a new project\nOn the Get Started page when you start up VS Code, you see a\nsection in the upper left called Start. Generally, when you start a\nnew project, you choose the Open Folder option, as shown in\nFigure 1-12. This action opens a file browser, and you can select\nor create a folder for your new project.\nFIGURE 1-12: Choosing the Open Folder option.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:61>\n", "text": "It can be quite frustrating when you\u2019re working on\nmultiple projects to not be able to easily find the project you\nwant to open when you start your coding day. So I\nrecommend having a system for how you organize code and\nkeeping it separate from everything else on your computer.\nMy system for organizing my code (which I borrowed from\nsomeone else a long time ago and which you\u2019re welcome to\nborrow, too) is to create a folder called in my user home\ncode\nfolder (which is called chrisminnick).\nInside this folder, I have a folder called (short for source\nsrc\ncode). Inside the folder, I have a folder for (where\nsrc github.com\nmost of my projects are stored) as well as for other hosted code\nrepositories (such as and ). I talk about\ngitlab.com bitbucket.com\nversion control and the importance of using it in Chapter 2 of\nBook 1.\nThis may seem like a lot of layers of nested directories, but when\nI'm working on a lot of different projects, I appreciate the fact\nthat I know exactly where to look for anything I need. Figure 1-13\nshows my code folder in outline form.\nFIGURE 1-13: My code folder.\nFor now, create a folder inside your folder called\ncode/src\n(short for JavaScript All-in-One For Dummies), or\njavascriptaio\ndownload the code from this book's website to that folder. I show\nyou how to set up Git in Book 1, Chapter 2, and at that point\nyou\u2019ll want to create a folder.\ngithub.com\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:62>\n", "text": "The terms folder and directory mean the same thing and\ncan be used interchangeably. The different terms come from\nthe fact that they're called folders in Windows and macOS\nand directories in Linux. I'll typically use the term folder when\nI'm talking about something on your computer and directory\nwhen I'm talking about something that's on a server or that\nwill be deployed to a server.\nThough not strictly necessary, your life is made slightly\neasier if the path to your code folder, and all the folders\ninside it, have no spaces.\nThe first time you open a folder in VS Code, you may see a\nmessage, as shown in Figure 1-14, asking whether you trust the\nauthors of the files in the folder. Select the check box to indicate\nthat you do and then click the Yes button.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:63>\n", "text": "FIGURE 1-14: You can trust me.\nWhen you open an empty folder, the File Explorer pane opens and\nshows the name of your folder at the top.\nLearning the one essential command\nIf you could save hundreds of hours of time by just remembering\na single keyboard combination, would you do it? VS Code has a\nsecret (actually, it\u2019s not so secret) command that will save you\ncountless hours of work over your life as a JavaScript developer.\nAre you ready?\nThe command is Ctrl+Shift+P on Windows and Linux, and\nCommand+Shift+P on macOS.\nWhen you press this magic key combination, a search box opens\nat the top of the VS Code interface. You can scroll through this list\nor start typing to find or do just about anything in VS Code.\nFollow these steps to see what I mean:\n1. Press Ctrl+Shift+P (on Windows) or\nCommand+Shift+P (on macOS) to open the command\npalette.\n2. Start typing \"new file\".\nAs you type, the options below the search box change, and\nafter a few characters, the top option is Create: New File, as\nshown in Figure 1-15.\n3. When Create New File is highlighted, press the Enter\nkey.\nA new set of options appears. These options depend on what\nextensions you have installed.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:64>\n", "text": "FIGURE 1-15: Selecting Create New File from the command palette.\n4. Select Text File to create a new text file. A new\nuntitled text file appears.\n5. Press Ctrl+Shift+P (on Windows) or\nCommand+Shift+P (on macOS) to open the command\npalette again.\n6. Start typing \"save\".\nAs before, the options under the command palette search box\nchange as you type.\n7. When File: Save is the top option (you may need to\npress the down-arrow key to scroll down to it the first\ntime you choose an option), press Enter.\nThe Save As dialog opens.\n8. Type index.html to name the file and specify that it\u2019s an\nHTML file, and then press Enter or click Save to save it.\nNow you have your first saved file in the File Explorer pane.\n9. In your file, type an exclamation point (!) followed by\na tab.\nThis is another shortcut that creates a blank HTML template,\nas shown in Figure 1-16.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:65>\n", "text": "10. Save your file.\nindex.html\nFIGURE 1-16: A new HTML file, created using the command palette.\nIt's possible that the !-followed-by-tab combination won't\nwork, depending on future updates and settings. If it doesn't,\ntype ! followed by pressing Ctrl+space. A menu opens, and\nthe first option should be the ! Emett abbreviation. Select it\nand press Enter.\nKeyboard shortcuts are a helpful time-saver, and they also help\ndevelopers keep their focus by not having to poke around on the\nmenus, looking for what they want to do. Most actions in VS Code\nhave their own keyboard shortcuts, and you learn the important\nones the more you use VS Code. But the command palette is your\ngateway to all of them.\nNow that you've memorized the command for opening the\ncommand palette, you can skip over looking through any of the\nmenus. When you want to do something, just press Ctrl+Shift+P\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:66>\n", "text": "(or Command+Shift+P on macOS) and start typing whatever it is\nthat you want to do.\nThe command palette is helpful for finding settings and\npreferences as well. For example, if you\u2019re as annoyed as I\nam by the minimap that shows up on the right side of the\ncoding window, you can toggle it off by opening the\ncommand palette and typing minimap. When the Toggle\nMinimap setting is selected, press Enter. I\u2019m sure there\u2019s a\nbutton or menu option for doing this same thing, and if I\nwere to poke around with my mouse pointer I\u2019d eventually\nfind it. But I don\u2019t need to because I can use the command\npalette!\nWriting Your First JavaScript\nProgram\nNow that you have some background and a code editor, it\u2019s time\nto start learning to code. In this section, I start out by explaining\nthe basics of JavaScript syntax. You then can learn a couple\ndifferent ways to run JavaScript code in a web browser.\nDon\u2019t worry if you don\u2019t understand everything (or anything) at\nthis point about how the code works. After you run the code, I\nexplain what\u2019s happening, and then the rest of this book explains\neach facet of JavaScript in detail. The idea right now is just to get\nyour feet wet and get you used to seeing JavaScript code in\nvarious environments.\nIf you\u2019ve done any programming before buying this book,\nJavaScript code may look familiar. Most programming languages\nshare common traits, and looking for those commonalities can be\na helpful way to start getting a grasp on a language.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:67>\n", "text": "If you have never done any programming, you might find\nJavaScript to be a little strange at first, but once you know the\nbasics, you can read and write it with ease.\nListing 1-1 shows a simple JavaScript program that takes any\nnormal name (whether it\u2019s your name, your dog\u2019s name, or your\nparakeet\u2019s name) and turns it into the name of a new\nprogramming language by adding Script to the end of it.\nLISTING 1-1: The very useful JavaScript\nName Creator program\nlet normalName = 'Chris';\nlet javaScriptName = normalName + 'Script';\nconsole.log('Your JavaScript Name is ' + javaScriptName);\nAlthough this first program is simple, it demonstrates a lot of\nfundamental JavaScript principles.\nJavaScript is made of statements\nJust as a sentence in a human language is a fundamental building\nblock of any piece of writing, JavaScript has a similar fundamental\nbuilding block, which is called a statement. Listing 1-1 has three\nseparate statements. Each statement ends with a semicolon, and\nrunning a statement causes JavaScript to do something.\nIn the case of the first two statements, which begin with let,\nthese are telling JavaScript to store a value. The third statement,\nwhich begins with console.log, is telling JavaScript to log (or\nwrite) some text to the console in your browser.\nJust as English is made up of parts of speech \u2014 such as nouns,\nverbs, and adverbs, JavaScript statements are made up of several\nparts, as described in this list:\nValues: In Listing 1-1, is a value.\n'Chris'\nExpressions: Expressions are units of code that are\nevaluated and become values. For example, in Listing 1-1, the\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:68>\n", "text": "following is an expression:\nnormalName + 'Script'\nWhen has a value of , this expression\nnormalName 'Chris'\nevaluates to .\n'ChrisScript'\nOperators: Operators do something with values. In Listing 1-\n1, the operator (known as the concatenation operator) joins\n+\ntogether the value of and the literal value\nnormalName\n.\n'Script'\nKeywords: Keywords are parts of JavaScript that have special\nmeaning and cause JavaScript to do something. In Listing 1-1,\nthe word let is a keyword that tells JavaScript to store the\nvalue on the right side of the (assignment) operator using\n=\nthe name on the left side of the .\n=\nThe process of assigning a value to a name is called\ninitializing a variable in programming. You can learn much\nmore about initializing variables in Chapter 2 of Book 1.\nJavaScript is case-sensitive\nUnlike HTML, where browsers consider the tags and\n<HEAD>\nto be identical, JavaScript code is case-sensitive. If you\n<head>\nchange the capitalization of one character in a JavaScript keyword\nor a variable name, JavaScript doesn't understand what you\u2019re\nsaying.\nRemember that if you type pizza in one place and Pizza in another\nplace, JavaScript thinks these are completely different values.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:69>\n", "text": "Incorrect or inconsistent capitalization is by far the biggest\nsource of errors (also known as bugs) for beginning coders.\nThese kinds of bugs are also often difficult to find and fix.\nTake your time as you\u2019re coding and make it a habit to be\nprecise. It will save you a lot of time later.\nJavaScript ignores white space\nWhite space includes characters such as tabs, spaces, and line\nbreaks, which produce no visible output when you type them.\nWhen you write JavaScript, you often separate statements and\nthe different parts of statements using white space. However, it\ndoesn\u2019t matter whether you indent lines with spaces or tabs, if\nyou include multiple line breaks between statements, or if you\ninclude extra spaces between the parts of a JavaScript statement.\nThe one place where white space does matter is inside of values.\nFor example, it\u2019s perfectly fine to write the first statement in\nListing 1-1 like this:\nlet normalName = \"Chris\";\nEven though most other JavaScript programmers would look at\nyou funny if they saw this line in your code \u2014 and your code\nformatter will likely fix it for you \u2014 JavaScript runs this code the\nsame as if you formatted it in a more traditional way.\nWhere white space does make a difference is inside of quotes. For\nexample, consider the following statement:\nlet normalName = \"Chris \";\nIf you run the program with this statement, the result includes all\nthose spaces.\nIt\u2019s important to use enough space in your code so that it\u2019s\nreadable and to be consistent with how you use it. Some people\nprefer tabs for indenting code, and other people prefer spaces. A\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:70>\n", "text": "code formatter, such as Prettier, which you can learn about\nshortly, ensures that you\u2019re using white space in a consistent and\nstandard way.\nJavaScript programmers use\ncamelCase and underscores\nNames that you give to variables, files, modules, and functions in\nJavaScript often have multiple word names. However, because\nJavaScript uses spaces to distinguish between the parts of a\nstatement (the same way you use spaces to know when one word\nends and another starts), you need another way to make multiple\nword names readable.\nAs long as you don\u2019t use spaces or other special characters (see\nthe complete list I give you in Chapter 3 of Book 1), you can\nname things in JavaScript any way you see fit. However, I suggest\nthat you use the common strategies I describe next.\ncamelCase\nCamel case is used extensively in the JavaScript language itself,\nas well as in JavaScript programs. You can use two types of camel\ncase. The first one is upper camel case, in which the first word\nstarts with a capital letter and every word after that is capitalized\nas well.\nUpper camel case is used in JavaScript for naming classes\nand components (such as ReactJS components).\nThe second type of camel case is lower camel case, in which the\nfirst word is lower cased and every word after that is capitalized.\nLower camel case is the most common way to name variables you\ncreate in your programs.\nUnderscore\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:71>\n", "text": "It\u2019s also common to see names in JavaScript that use the\nunderscore character between words in some circumstances. For\nexample, if you\u2019re getting data from an external source, that data\nmay contain underscore names already, and it makes sense to\ncontinue using the same naming scheme in your program.\nHowever, in most cases, you should stick with lower camel case.\nDashes\nCSS and HTML frequently use dashes between words in multiword\nnames. For example, there\u2019s a CSS property called\nborder-radius\nand an HTML attribute that\u2019s used with the form element called\n.\naccept-charset\nNaming things with dashing in JavaScript is problematic and\nshould be avoided because JavaScript interprets the dash\ncharacter as a subtraction operator and your program won't run\ncorrectly or at all.\nRunning Code in the Console\nThe Chrome browser contains a JavaScript console. The console\nis the best friend of any JavaScript programmer. (Seriously, we\u2019re\nnot known for being the most social bunch ever!) The console has\nmany uses \u2014 one of them is that it\u2019s a handy place to test out\nJavaScript code. Follow these steps to run the JavaScript Name\nCreator in your browser console:\n1. Open a new tab in your Chrome browser.\n2. Press Ctrl+Shift+J (Command+Option+J on macOS) to\nopen the JavaScript console.\nThe Chrome Developer Tools window opens and you see the\nJavaScript console, as shown in Figure 1-17.\nEvery desktop web browser has a JavaScript console. So, even\nif you\u2019re not using Google Chrome, you can still follow along\nwith these instructions by opening your browser\u2019s console.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:72>\n", "text": "As with everything in programming and the web, the\nlocation and steps for opening the developer tools and the\nconsole in different web browsers is subject to change at any\ntime. If you want to try out another browser\u2019s JavaScript\nconsole, a quick web search can tell you how to open it.\nFIGURE 1-17: The JavaScript console.\n3. Type the code from Listing 1-1 into the JavaScript\nconsole.\nPress Enter after each of the three lines of code and see what\nhappens! If you type everything correctly, you should see a\nscreen that looks like Figure 1-18.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:73>\n", "text": "FIGURE 1-18: Running the JavaScript Name Creator code.\nIf the font size in your console is too small to read easily,\nyou can increase it by pressing Ctrl+= on Windows or\nCommand+= on macOS. If you want to make the font size\nsmaller again, you can do that by pressing Ctrl+\u2013 on\nWindows or Command+\u2013 on macOS.\nThe JavaScript console is a direct text-based link into your web\nbrowser\u2019s JavaScript engine. When you type code into the console\nand press Enter, it causes JavaScript to run that code and return a\nresult. If the line of code produces no immediate result (as many\nthings in JavaScript don\u2019t), the console just prints the word\nundefined. This is sort of like JavaScript\u2019s way of saying, \u201cI\nacknowledge that I received your input, but there\u2019s nothing for\nme to do at this point.\u201d\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:74>\n", "text": "If you made a mistake while typing the JavaScript code,\nyou can start over by refreshing the browser window.\nReloading clears out JavaScript\u2019s memory and anything in the\nconsole window.\nRerunning Commands in the\nConsole\nYou can enter a single line of code in the console and immediately\nget a result. However, if you want to change or rerun commands,\nyou need to reenter them.\nIf you haven\u2019t reloaded the browser window, you can\neasily return to previous lines of code you entered by\npressing the up- and down-arrow keys in the console.\nIf you want to clear out everything from the console, press the\nicon above the input/output area that looks like a circle with a line\nthrough it. Note that this action doesn\u2019t clear out the browser\nwindow\u2019s memory. If you press the Clear button and then the up-\nand down-arrows, you still see your previously entered code. To\nclear out the browser\u2019s memory, click the browser\u2019s Refresh\nbutton or press Ctrl+R (on Windows) or Command+R (on\nmacOS).\nRunning Code in a Browser\nWindow\nAlthough the JavaScript console is fully capable of running client-\nside JavaScript, it\u2019s limited to running what you type into it or\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:75>\n", "text": "copy-and-paste into it. To run the hundreds or thousands of lines\nof code that make up a modern JavaScript program, and to\ntransmit that JavaScript across the Internet, JavaScript needs to\nbe connected to an HTML page.\nYou have three options for including JavaScript in a web page.\nYou can put it\nIn an HTML event attribute\nBetween the start and end tags of a element\nscript\nIn a separate file and import it into your HTML document\nIt\u2019s not uncommon to see all three techniques used together in a\nsingle web page, or to see multiple instances of each technique in\na single file. Let\u2019s take a closer look at each of them, along with\ntheir pros and cons.\nRunning JavaScript from HTML\nevent attributes\nHTML\u2019s event attributes were introduced into the language early\non in JavaScript\u2019s life. Their purpose is to detect events happening\nto HTML elements and to run JavaScript code when those events\nhappen.\nHere\u2019s what JavaScript attached to an HTML event attribute looks\nlike:\n<button onclick=\"alert('Welcome to JavaScript All-In-One')\">\nClick here for an important message\n</button>\nWhen this button is clicked, the browser pops up a message in an\nalert. If you want to try it out, go to VS Code and enter the\npreceding snippet between the and tags in an\n<body> </body>\nHTML document and then save the HTML page and open it in\nyour browser by double clicking it, dragging it to your browser, or\nusing your browser's Open File menu item.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:76>\n", "text": "Outside of the first chapters of JavaScript books, rarely do\nyou see browser alert messages used in JavaScript. The\nreasons for this are that the window alert blocks the\nexecution of JavaScript, it's limited in what it can do, and it's\nnot attractive. You learn much better ways to display\nmessages to the user in this book.\nAvoid using HTML event attributes. That's the old way of\nresponding to events in HTML, and the attributes are kept in\nHTML mostly for backward-compatibility reasons at this point. The\nbiggest problem with using them is that they combine your HTML\nand your JavaScript, which makes maintaining your code more\ndifficult. But HTML event attributes have other problems as well.\nThe first of these is that they run in the global scope, meaning\nessentially that they run outside of the rest of your code. This can\ncreate problems and unexpected behavior if you try to do\nanything complex with them. The other problem is that it's not\npossible for an element to listen for multiple events using these\nattributes.\nThe modern way of responding to events in the browser is\nby using the method, which you learn\naddEventListener\nabout in Book 1, Chapter 10.\nRunning HTML inside script\nelements\nThe second method of including JavaScript in HTML is called inline\nJavaScript. To use inline JavaScript, put your JavaScript between\nan opening tag and a closing tag in your\n<script> </script>\nHTML document, as shown in Listing 1-2.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:77>\n", "text": "LISTING 1-2: Using inline JavaScript\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Inline JavaScript</title>\n</head>\n<body>\n<script>\nlet personName = prompt('What is your name?');\nalert('Hello, ' + personName);\n</script>\n</body>\n</html>\nYou can put inline JavaScript in either the head or the body of an\nHTML document, and you can use as many inline scripts as you\nneed. Inline JavaScript is useful for small bits of JavaScript that\nneed to be run in a single HTML page. The benefit of using inline\nJavaScript is that it saves a trip back-and-forth from the web\nserver, which reduces the load time of your HTML page.\nThe downside to using inline JavaScript is that, like JavaScript in\nevent attributes, it mixes your HTML and your JavaScript and\nmakes maintaining your application more difficult.\nSeparation of concerns, which is an important principle in\nsoftware development, states that your programs should be\nseparated into sections. For example, you shouldn't mix your\npresentation code (HTML) with your logic (JavaScript). By\nabiding by the rules of separation of concerns, you make\nyour programs easier to maintain and more modular. I revisit\nthis idea of separation of concerns throughout this book,\nespecially when I tell you about various front-end JavaScript\nlibraries that seem, at first glance, to violate this principle.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:78>\n", "text": "Listing 1-2 makes use of a prompt to receive input from a\nuser. Like an alert, a prompt should never be used in a real-\nlife program. It has the same flaws as , which is that\nalert()\nit's ugly and limited and blocks the running of your\nJavaScript.\nIncluding JavaScript files in your\nHTML\nThe third method of running JavaScript in a web page is to import\na file containing JavaScript code into your HTML document. This\nis done using the attribute of the element.\nsrc script\nThis is by far the most common way that JavaScript is used in\nweb pages. To use this method, create a file containing your\nJavaScript and save it with the extension, as shown in Listing\n.js\n1-3.\nLISTING 1-3: A JavaScript file\nconst ball = document.getElementById('ball');\ndocument.addEventListener('keydown', handleKeyPress);\nlet position = 0;\nfunction handleKeyPress(e) {\nif (e.code === 'ArrowLeft') {\nposition = position - 10;\n}\nif (e.code === 'ArrowRight') {\nposition = position + 10;\n}\nif (position < 0) {\nposition = 0;\n}\nrefresh();\n}\nfunction refresh() {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:79>\n", "text": "ball.style.left = position + 'px';\n}\nThe program in Listing 1-3 is significantly more complex than\nanything I've described at this point in this book. If you read\nthrough the listing, can you guess what it does?\nThis code is the beginning of a simple game. The game listens for\nevents (it waits for you to press keys on your keyboard,\nkeydown\nin other words). When you press a key, it checks to see whether\nthat key was the left-arrow key or the right-arrow key. If it was\nthe left arrow, it subtracts 10 from a variable called . If it\nposition\nwas the right arrow, it adds 10. This position variable is then used\nto reposition an element called in the browser window.\nball\nFollow these steps to build your own version of this game and try\nit out:\n1. Make a new file containing the code in Listing 1-3 and\nsave it as .\ngamelet.js\nAlthough I encourage you to get as much practice as\nyou can with typing code, rather than copy it, you can\ndownload all the code listings in this book from the book's\nwebsite, as described in the book's Introduction.\n2. Make a new file containing the HTML in Listing 1-4 and\nsave it as .\ngamelet.html\n3. Right-click the file name in the Explorer pane of VS\nCode and choose Reveal in Finder (on macOS) or\nReveal in File Explorer (on Windows). Double-click the\nfile, drag it to your browser window, or use your\nbrowser's Open File command to open it in a browser\nwindow.\nThe browser window displays a red ball in the upper left\ncorner.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:80>\n", "text": "4. Press the right-arrow key on your keyboard several\ntimes, and then press the left-arrow key to make the\nball move forward and backward.\nLISTING 1-4: The HTML document for the\ngame\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Document</title>\n<style>\n#ball {\nbackground-color: red;\nborder-radius: 50%;\nwidth: 20px;\nheight: 20px;\nposition: relative;\n}\n</style>\n</head>\n<body>\n<div id=\"ball\"></div>\n<script src=\"gamelet.js\"></script>\n</body>\n</html>\nYou may need to click the mouse inside the browser\nwindow to give the window focus before pressing the arrow\nkeys will work correctly.\nAlthough this game is far from being functional or fun, it's a good\nstart. See if you can play around with the code and make changes\nto it. Some changes you might try making include these:\nMake the ball move a longer distance with each key press.\nChange the keys that make the ball move.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:81>\n", "text": "You can find a complete reference for all the key codes\nhere:\nhttps://developer.mozilla.org/en-\nUS/docs/Web/API/KeyboardEvent/code\nMake pressing the up- and down-arrows move the ball up and\ndown.\nHint: You need to change the value of to adjust the\nstyle.top\nvertical position.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:82>\n", "text": "Chapter 2\nFilling Your JavaScript\nToolbox\nIN THIS CHAPTER\nInstalling and configuring Node.js\nSetting up Visual Studio Code\nGetting unstuck\nDocumenting your code\nWriting a README with Markdown\nPracticing responsible coding with Git\n\u201cAs a cook, your station, and its condition, its state of readiness,\nis an extension of your nervous system.\u201d\n\u2014ANTHONY BOURDAIN\nThough it\u2019s technically possible to write JavaScript programs using\nnothing but an ordinary text editor, I don\u2019t recommend it.\nComputer programming (also known as software development) is\ncomplex, and JavaScript programming is no exception. Though it\nused to be popular for web developers to show how elite (or\n\u201c1337\u201d) they were by writing code using the most basic text\neditor available, someone who codes without making use of\ncertain tools today is more likely to be seen as an amateur who is\ndoing it wrong.\nEvery cook and auto mechanic knows the importance of having\nthe right tools in the right place when you need them. Some tools\nare essential (like bowls and wrenches), some are useful time-\nsavers (like a mixer or a pneumatic tool), and others are mostly\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:83>\n", "text": "just a waste of space (like a bread machine or a battery-powered\ntape measure).\nIn JavaScript development, the number of tools that are freely\navailable is staggering. Unlike in the kitchen or the shop, cheap\ndoesn\u2019t mean poor quality. In fact, most professional JavaScript\nprogrammers use free and open-source tools exclusively, and in\nmany cases a commercial product that does all the same things\nisn\u2019t available.\nThe tool chest of the average professional JavaScript developer\nshould include these items:\nA code editor for writing code\nNode.js for running the tools\nA package manager for installing, upgrading, tracking, and\nremoving Node.js software packages\nA build tool for bundling JavaScript files, compiling template\ncode, and automating the build process\nA code beautifier for making sure the code is properly and\nconsistently formatted\nA static code analyzer for checking the code syntax and style\nA debugger for tracking down and eliminating errors\nA testing framework for automating the testing of programs\nA version control system for keeping track of changes and\nenabling team development\nOther categories of tools beyond the ones in this list are available\nand widely used. I tell you about them later in this book.\nHowever, with the listed tools on your belt (or, more realistically,\non your desktop or laptop), you\u2019ll be ready to code.\nI don\u2019t tell you how to install all these tools in this chapter.\nInstead, I start with the most essential ones now and introduce\nothers as you need them. So let\u2019s start installing!\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:84>\n", "text": "Part 6 of this book focuses exclusively on development\ntools. Many of the tools covered there won\u2019t make a lot of\nsense at this point, but if you\u2019re feeling adventurous, you can\ntake a peek at the chapters in that part and then come back\nhere to nail down the essentials so that you can start coding\nwith JavaScript.\nInstalling Node.js\nNode.js is the one essential JavaScript tool that all the other tools\ndepend on. You may already have Node.js installed on your\ncomputer. However, updated versions are released regularly and\nyou'll want to make sure you have a recent version so that\neverything you'll learn about in this book will work correctly.\nTo install Node.js or to upgrade the version of Node.js that you\nmay already have installed, go to and click on\nhttps://nodejs.org\nthe link to download the latest Current version (the green button\non the right). Once it's downloaded, run the installer to install and\nconfigure Node.js. Selecting the default options will work fine in\nmost cases.\nYou can learn more about Node.js in Book 7.\nVisual Studio Code (or VS Code, for short) is a flexible and\npowerful editor. In Chapter 1, I tell you how to install VS Code,\nand I describe the basic steps of using it. To get the most out of\nit, you\u2019ll want to install certain extensions and know how to\nchange settings.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:85>\n", "text": "Configuring Visual Studio\nCode\nTo get started installing extensions, click the Extensions icon on\nthe left toolbar (which is called the Activity Bar). The Extensions\nicon looks like four boxes, with one of them slightly separated\nfrom the others. This action brings up the Extensions panel, as\nshown in Figure 2-1.\nFIGURE 2-1: The VS Code Extensions panel.\nGetting prettier\nCorrectly formatting your code is important for readability and\ndebugging. You can spend a lot of time manually typing spaces or\ntabs and making everything consistent, or you can let your code\neditor do it for you. Once you start using a code formatter, you\u2019ll\nnever go back, so you might as well start using one today.\nPrettier is an opinionated code formatter \u2014 it takes the whole\nmatter of formatting your code out of your hands and doesn\u2019t\neven let you format your code the way you might prefer, because\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:86>\n", "text": "it has its own ideas that it thinks are better than yours. And it\u2019s\nprobably right, as you\u2019ll soon see.\nFollow these steps to install and configure Prettier:\n1. Type Prettier into the search box in the Extensions\npanel.\nA long list of extensions from the Extensions Marketplace\nappears.\n2. Look for the Prettier extension that has the highest\nnumber of downloads.\nAt the time I wrote this chapter, for example, the top result,\nshown in Figure 2-2, had about 30 times as many downloads\nas the next most popular.\n3. Click the Install button in the search results or on the\nDetails page for the Prettier extension.\nAfter a moment, the Install button changes to the Uninstall\nbutton, to indicate that it\u2019s been installed. You also see a new\nbutton, named Disable. If you click this button, the extension\nwill be disabled without uninstalling it.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:87>\n", "text": "FIGURE 2-2: The Prettier extension.\nNow you have Prettier installed, but you have a few things left to\nconfigure. To open the settings for an extension, click the Gear\nicon next to the Uninstall button and select Extensions Settings,\nas shown in Figure 2-3.\nFIGURE 2-3: The Prettier extension settings.\nThe default values on this screen are all correct for most people,\nin my opinion. But it\u2019s good to know that you can adjust settings\nhere if you need to. You can even specify your own configuration\nfile for Prettier to use, to make sure that it always formats things\njust how you want them.\nNotice the User and Workspace tabs at the top of the\nSettings window. If you want to adjust a setting only for a\nparticular project (also called a workspace), you can switch\nto the Workspace tab. Otherwise, I recommend adjusting\nsettings using the User tab so that you don\u2019t have to change\nsettings each time you make a new project.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:88>\n", "text": "Follow these steps to make Prettier format your code whenever\nyou save:\n1. On the User Settings screen, search for Format on\nSave, as shown in Figure 2-4. When you find it, select\nthe check box next to the Editor: Format on Save\nsetting.\n2. Search for default formatter in the user settings, and\nselect Prettier from the drop-down menu, as shown in\nFigure 2-5.\nFIGURE 2-4: The Format on Save setting.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:89>\n", "text": "FIGURE 2-5: Setting the default code formatter.\n3. Search for auto save in the user settings. When you\nfind it, choose onFocusChange.\nThis action causes your files to be automatically saved\nwhenever you switch windows. I guarantee that this setting\nwill save you from headaches in the future.\n4. Close the user Settings window and any other\nwindows you have open in VS Code by clicking the\nClose X on the tab.\nAfter Prettier is installed and you\u2019ve set it as the default formatter,\nyou\u2019ll always have perfectly formatted code that will dazzle\neveryone who views it. Test it out by following these steps:\n1. Click the File Explorer icon at the top of the Activity\nPane to switch back to viewing your workspace files.\n2. Double-click the name of the HTML file you created\nearlier to open it.\n3. Insert some extra line breaks in the file, change the\nindentation of some of the lines, and maybe even\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:90>\n", "text": "insert some new HTML markup into the document.\nThen save the file.\nAs soon as you save, you should see your code magically\nreformatted before your very eyes!\nIf your code isn\u2019t magically formatted when you save,\nclose VS Code and restart it, and then ensure that you\u2019ve\nadjusted all the right settings in the step lists in this section.\nInstalling Live Server\nAnother extension I show you how to install is the Live Server\nextension. Live Server lets you easily preview web applications in\na browser.\nFollow these steps to install Live Server:\n1. Open the Extensions panel by clicking the Extensions\nbutton (you can also open it by pressing Ctrl+Shift+X\n(Windows) or Command+Shift+X (macOS).\n2. Type Live Server in the search box to find the\nextension by Ritwick Dey, as shown in Figure 2-6.\n3. Click the Install button to install the extension. Live\nServer has no configuration options, so there\u2019s no need\nto do anything else!\n4. Return to the File Explorer and open , if it\nindex.html\nisn't already open.\n5. Modify to display some text.\nindex.html\nFor example, you could just create an H1 element that\ndisplays as shown in Listing 2-1.\nHello, World!\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:91>\n", "text": "FIGURE 2-6: The Live Server extension.\n6. Right-click the name of the file in the File Explorer\npane and choose the Open with Live Server option.\nThe first time you choose Open with Live Server, you may see\na security warning. Approve the extension's access in order to\nbypass the security warning. On Windows, approve access for\nVisual Studio Code to both private and public networks.\nYou may also be asked which program you want to use to\nopen the file. Choose Google Chrome (or another browser, if\nyou prefer). You should also select the box that asks whether\nyou want to always use this choice, so that you don\u2019t have to\nchoose every time you use Live Server.\nYour web browser opens and connects to Live Server to\ndisplay your web page, as shown in Figure 2-7.\n7. Return to VS Code and make some changes to your\nweb page.\nAfter you save the changes, return to your Chrome browser\nand notice that the page has automatically been updated, as\nshown in Figure 2-8. This ability for a server to automatically\nupdate the content shown in a browser is known as hot\nreloading. Awesome.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:92>\n", "text": "LISTING 2-1: A simple HTML page\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n<title>Hello, World!</title>\n</head>\n<body>\n<h1>Hello, World!</h1>\n</body>\n</html>\nFIGURE 2-7: A web page, served on Live Server.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:93>\n", "text": "FIGURE 2-8: Hot reloading updates the browser for you.\nKNOWING HOW TO GET UNSTUCK\nA lot of effort goes into making software installation as easy as possible, and\nmost of the things you need to install to do JavaScript development should go\nsmoothly. However, it\u2019s inevitable that you\u2019ll run into some issues. Here are\nsome of the more common issues that can happen, and things you can do to\nfigure out how to fix them \u2014 most of these tips apply whether you\u2019re using\nWindows, macOS, or Linux:\nNot enough disk space: If you don\u2019t have a lot of extra storage,\nobviously everything you need to install in this chapter won\u2019t fit. Delete\nsome extra files, use an online storage service like Dropbox to free up\nspace, or invest in a larger (internal or external) hard drive. Software\ndevelopment can use a lot of storage space, and it\u2019s always better to\nhave too much.\nNetwork issues: If you\u2019re connected to the Internet but still get\nnetwork errors when installing software, the problem is likely to be a\nfirewall or another security tool or setting on your computer or\nnetwork. If you\u2019re working on a computer connected to a work network\nor a public Wi-Fi hotspot, the problem is likely to be a firewall outside\nof your computer. Try connecting to a different network. If you own the\ncomputer and control the router, temporarily disable any firewall or\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:94>\n", "text": "security software you have installed or that\u2019s part of the operating\nsystem.\nPermissions issues: By default, operating systems are configured to\nnot allow user changes to certain files or directories. If you\u2019re trying to\ndownload or install software inside a system directory or one that\u2019s\nrestricted in some way, you\u2019ll get a permissions error. Try installing the\nsoftware in your own user directory (Users/yourname on macOS or\nWindows or usr/yourname on Linux). As a last resort, you can right-\nclick any folder to change its permissions, but you should do this only if\nyou know what you\u2019re doing.\nSoftware incompatibility: There are versions of everything you\nneed to install for this book that run on Windows, macOS, and Linux.\nHowever, a future version of an operating system or a new processor\ncould change this at any time (at least until the software is updated). If\nyou run into an incompatibility problem, first make sure that you\ndownloaded the right version for your computer\u2019s processor and\noperating system. if that doesn\u2019t solve the problem, check with the\nsoftware\u2019s creator to see whether a compatible version is available.\nThis may be an older version in some circumstances, which won\u2019t be a\nproblem in most cases. If all else fails, consider using a virtualization\nproduct like VirtualBox (virtualbox.org), VMWare (vmware.com), or\nParallels (parallels.com) to run Linux (I recommend Ubuntu Linux if\nyou\u2019re new to Linux) in a virtual computer on your computer.\nOther errors: If you encounter other errors, copy the error message\nyou get and paste it into Google. Chances are good that someone else\nhas gotten the same error and that the solution (or something close to\nit) is just a quick search away.\nDocumenting Your Code\nDocumenting your code is the process of recording what the code\ndoes. It's an essential part of any programming task that will save\nyou time and frustration when your programs become complex\nand you're trying to remember what each part of your program\ndoes. It\u2019s also helpful for other programmers who may work on\nyour program in the future.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:95>\n", "text": "Plus, I've found that programming students who get into the habit\nof documenting their code early on usually gain a deeper\nunderstanding of what the code does and are better able to solve\nproblems that occur in their programs.\nLine comments\nThe most basic way to add a note to yourself or other\nprogrammers is to add a line comment. You create a line\ncomment by placing two (//) slashes together anywhere on a line\nof code \u2014 for example:\nrefresh(); // update the ball's position\nThe line comment tells JavaScript to ignore everything that comes\nafter the two slashes until the end of the line. This is a helpful\nway to put in short notes to yourself about what the program\ndoes or why a statement is important.\nBlock comments\nWhen a single line comment won't do, you can use a block\ncomment, which starts with and ends with . JavaScript\n/* */\nignores everything within a block comment.\nBlock comments are helpful for providing detailed documentation\nat the beginning of a JavaScript file, or for documenting individual\nfunctions. For example, Listing 2-2 shows the gamelet.js file from\nChapter 1 with block comments included.\nLISTING 2-2: Gamelet.js with comments\n/*\nGamelet: a starting point for writing games\nAuthor: Chris Minnick\nVersion: 1.0\nInstructions:\nInclude gamelet.js in an HTML document containing\nan element with an id of 'ball'.\nThe script will detect when the left or right arrow\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:96>\n", "text": "key is pressed and will move the ball element\naccordingly.\n*/\nconst ball = document.getElementById('ball'); // get the ball\ndocument.addEventListener('keydown', handleKeyPress); // listen for keys\nlet position = 0; // set initial position\n/*\nhandleKeyPress\nresponds to certain key presses by updating position.\n*/\nfunction handleKeyPress(e) {\nif (e.code === 'ArrowLeft') {\nposition = position - 10;\n}\nif (e.code === 'ArrowRight') {\nposition = position + 10;\n}\nif (position < 0) {\nposition = 0;\n}\nrefresh(); // reposition the ball\n}\n/*\nrefresh\nchanges the position of the ball\n*/\nfunction refresh() {\nball.style.left = position + 'px';\n}\nThe README file\nSome types of documentation, such as the instructions at the\nbeginning of Listing 2-2, may apply to your entire JavaScript\nprogram rather than to a particular file or function. For this kind\nof documentation, it's helpful to create a README file. A README\nfile can be written in a simple text file, in an HTML file, or, most\ncommonly, in a markup language called Markdown (I know \u2014 it\nseems like a funny name for a markup language).\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:97>\n", "text": "The basics of Markdown\nTo get started with writing your README file, make a new file in\nVS Code and save it with the extension .\n.md\nMarkdown files generally start with a Level 1 header. To mark text\nas a level 1 header, preface it with a single # character. Lower-\nlevel headers (up to Level 6) are prefaced with additional #\nsymbols.\nLet's start the README for with the following header:\ngamelet.js\n# Gamelet\nAfter the Level 1 header, you should include a sentence about\nyour project, written as a normal paragraph. To write a paragraph\nof text in markdown, just separate it from other text with a blank\nline. With a description paragraph added, the README file now\nlooks like this:\n# Gamelet\nA starter program for writing JavaScript games.\nAfter the description, it's common to add a Level 2 header called\nInstallation and one called Usage. Because there's no good way\nto install Gamelet yet, you just add a usage header. The usage\nheader typically includes a numbered list and code.\nTo create a numbered list, type a number with a period before the\nlist item. To write code, place three backtick characters (```)\nfollowed by the language the code is in (JavaScript or HTML, for\nexample) in front of the code and then place three backticks at\nthe end of the code block.\nJust by knowing how to write headers, paragraphs, numbered\nlists, and code in Markdown, you can create a useful and readable\nREADME file. Listing 2-3 shows the finished README for Gamelet.\nLISTING 2-3: The README file for Gamelet\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:98>\n", "text": "# Gamelet\nA starter program for writing JavaScript games.\n## Usage\n1. Include gamelet.js in an HTML document containing an\nelement with an id of 'ball'.\n```html\n<div id=\"ball\">@</div>\n<script src=\"gamelet.js\"/>\n```\n2. The script will detect when the left or right arrow\nkeys are pressed and will move the ball element\naccordingly.\nTo see what your README.md file looks like when it's rendered,\nclick the Open Preview to the Side icon in the upper-right corner\nof the VS Code editor window, as shown in Figure 2-9.\nFIGURE 2-9: Previewing README.md in VS Code.\nCoding Responsibly with Git\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:99>\n", "text": "Every programmer has had the experience of creating a\ndocument (maybe a paper or a book or an email) and something\nhappens \u2014 the power goes out or the coffee spills on your laptop\nor you simply forgot to save before you turned off your computer.\nThe resulting lost work is a frustrating waste of time, and you\nmay never get that data back or be able to re-create the magic.\nFor me, it was a computer's power supply that experienced a\npower surge and exploded in the middle of the night, frying the\nhard drive and causing me to nearly lose 50 percent of a book I\nwas writing. Fortunately, I had sent most of my work to my editor\nalready and I was able to recover quickly.\nProblems that cause data loss in programming and in writing can\nalso be the result of good intentions. Maybe you spend weeks\ntraveling down a path that you think is right, but it turns out to be\ncompletely wrong and you wish you could go back to where you\nwere when you first came up that harebrained idea.\nMaybe you work with another programmer or a team of\nprogrammers and you discover that both of you are working on\nthe same file at the same time. How do you figure out how to\nmerge your changes and end up with a single version of the\ncode?\nTo prevent all of these circumstances, programmers (and many\nwriters) use version control systems. Version control tracks the\nchanges to files over time, giving you a complete record of what\neach individual file in a project looked like at any point and\nallowing you to return to any point in the life of your project.\nVersion control is what makes team software development\npossible, but it's also an indispensable tool for individual\ndevelopers working on their own. The most popular version\ncontrol system in use today is Git.\nIntroducing Git\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:100>\n", "text": "Git is a free and open-source version control system that can be\nused on every kind of project, from very small to very large.\nUnlike other version control systems, Git doesn't store complete\ncopies of each file with each version. Instead, it creates snapshots\nof a project containing only the files that have changed in each\nversion. If a file never changes after it's created, Git needs to\nstore only one copy of that file.\nThis system of creating snapshots makes Git use much less\nstorage space and makes it faster than other version control\nsystems.\nInstalling Git\nIf you're using macOS or Linux, Git is installed on your computer\nalready. If you're using Windows, you can download Git from\n.\nhttps://git-scm.com/downloads\nThe order of steps you complete to install Git is likely to change in\nthe near future, so I don't walk you through each step. As you're\ninstalling, make sure to select the boxes that are selected in\nFigure 2-10.\nYou can select the single unchecked box shown in Figure 2-10 if\nyou like, but I personally prefer to leave it unselected so I can\nchoose when to update Git myself.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:101>\n", "text": "FIGURE 2-10: Select all but one box when installing Git for Windows.\nWhen you reach the step in the process where you choose the\ndefault editor used by Git, select Visual Studio Code, as shown in\nFigure 2-11.\nIf you're asked whether you want to adjust the name of the initial\nbranch in new repositories, select Override the Default Branch\nName for New Repositories and make sure it's set to , as\nmain\nshown in Figure 2-12.\nYou can safely choose the default settings in the other steps in\nthe installation process.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:102>\n", "text": "FIGURE 2-11: Select Visual Studio Code as the default editor.\nFIGURE 2-12: Setting the default branch name.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:103>\n", "text": "Configuring and testing Git\nFollow these steps to configure Visual Studio Code to recognize\nand use Git:\n1. If you have Visual Studio Code open, shut it down and\nrestart it.\nThis step ensures that you're using the latest version. Like\nGoogle Chrome, Visual Studio Code checks for updates as\nyou're using it and installs new versions when you restart.\n\u21d2\n2. Choose Terminal New Terminal from VS Code's top\nmenu.\nA new terminal window opens. This is the same as opening\nthe Terminal or Windows Command programs on your\ncomputer.\n3. In the terminal, type git --version and press Enter.\nThe current version number of Git on your computer is\ndisplayed. It should be higher than Version 2. If it's not, or if\nyou don't get a version number, you may need to reinstall Git.\n4. Type the following two commands, replacing the\nplaceholder data in quotes with your own info:\ngit config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\n5. Click the Source Control icon in the Activity Bar on the\nleft side of VS Code.\nThe Source Control panel opens, as shown in Figure 2-13.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:104>\n", "text": "FIGURE 2-13: The Source Control panel in VS Code.\n6. Click the Publish to GitHub button.\nIf you see a pop-up asking for permission for Visual Studio\nCode to sign in using GitHub, click Allow. Your browser will\nopen and go to the login page.\nhttps://github.com\n7. If you have a GitHub account already, sign in on this\npage. If you don't have one, click the Create an\nAccount link and follow the instructions to create a\nnew GitHub account.\n8. When the screen shown in Figure 2-14 opens, click the\ngreen Authorize button to authorize Visual Studio Code\nto access your GitHub account.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:105>\n", "text": "FIGURE 2-14: Authorize Visual Studio Code to access your GitHub account.\n9. Once you've finished authorizing VS Code with GitHub,\nreturn to VS Code and click the Publish to GitHub\nbutton again.\nA drop-down menu appears at the top of VS Code, giving you\nthe option of publishing to a private repository or a public one.\n10. Select Publish to GitHub public repository.\nPublic repositories can be viewed by anyone. Private\nrepositories can be viewed only by you and the people you\nchoose to share with.\n11. You'll be asked which files you want to include in the\nrepository. By default, all files in your current\nworkspace are selected. You can change this setting or\nleave it alone and then click OK.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:106>\n", "text": "12. The Source Control panel will display a text area where\nyou can enter a Message. Enter 'Initial commit' into\nthis box, then click Commit.\nWhen VS Code finishes publishing your repository, VS Code\nwill display a notification saying so, as shown in Figure 2-15.\nFIGURE 2-15: Congratulations! You've created your first repo.\nAfter you have a Git repository, you can learn the basics of how\nGit works and how to use it, as I explain next.\nLearning the basics of Git\nTo track your files, Git keeps a database in a folder named in\n.git\nyour project. There's no need to see or change this folder\nmanually, so VS Code hides it from you by default.\nGit has three states that your files can be in:\nModified means that you've changed a file but haven't yet\ncommitted it to the Git database.\nStaged means that you've marked a modified file to be a part\nyour next commit.\nCommitted means that a file is stored in your local Git\ndatabase.\nFollow these steps to take a file in your repository through all\nthree of these states:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:107>\n", "text": "1. In the same workspace where you initialized your Git\nrepository, create a new file named or open\nREADME.md\nyour existing file.\nREADME.md\nMake sure the file isn't inside a subfolder of your\nREADME.md\nrepository. Files and folders that aren't inside any other folders\nin your project are said to be at the root of your project.\n2. Give your file a Level 1 header and a\nREADME.md\ndescription by entering the following:\n# JavaScript All-in-One For Dummies\nI'm learning JavaScript, React, Vue, Svelte, and Node\nfrom JavaScript All-in-One For Dummies by Chris Minnick\n3. Save the file.\nNotice that the Source Control icon on the left side of VS Code\nnow has a number (or a larger number).\n4. Click the Source Control icon to open the Source\nControl panel.\nYou see a list of files. Your new README file is under the\nChanges heading, as shown in Figure 2-16.\nFIGURE 2-16: The Source Control panel, with README.md under the Changes\nheading.\n5. Click the plus sign (+) to the right of your changed\n(modified) file to stage it.\nThe file moves to the Staged Changes list.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:108>\n", "text": "6. Look for the text box at the top of the Source Control\npanel. If it's not there, click the Check Mark icon at the\ntop of the Source Control panel.\nEnter a commit message. A commit message should describe\nwhat you've changed in your project. But, for your first\ncommit, you can just type added a README and then press\nEnter.\nIf everything worked correctly, your files are now safely stored in\nyour local Git database. But they're still only on your computer. To\npublish your files to GitHub, click the Sync Changes button, which\nappears in the Source Control panel when all your files are\nchecked in. If a confirmation dialog box appears, click OK.\nOnce your files are published to GitHub, open your web browser\nand go to your new repository at . You should\nhttps://github.com\nsee your README file rendered beneath a list of the files in your\nrepository, as shown in Figure 2-17.\nFIGURE 2-17: Viewing your repository's page on GitHub.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:109>\n", "text": "Moving forward with Git and\nGitHub\nNow that you know the basics of staging, committing, and\npublishing your files, it's important to continue doing it regularly\n\u2014 at least once a day, but the more the often, the better.\nThere's a lot more to learn about Git than what you can find in\nthe space available in this book. When you're ready to learn more\nabout the ins and outs of Git, check out the excellent and free\nbook, Pro Git, written by Scott Chacon and Ben Straub and\npublished by Apress. It\u2019s available at\nhttps://git-\n.\nscm.com/book/en/v2\nBesides keeping your project's files safe, you have another\nimportant reason to check in your files regularly, especially if\nyou plan to look for a job: Recruiters and hiring managers\nwill check your GitHub contribution activity (which displays on\nyour GitHub page). Frequent commit activity shows that you\nare serious about coding.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:110>\n", "text": "Chapter 3\nUsing Data\nIN THIS CHAPTER\nUsing let and const to store data\nIntroducing JavaScript's data types\nCreating and using objects\nStoring lists with arrays\nUnderstanding JavaScript scope\n\u201cA foolish consistency is the hobgoblin of little minds.\u201d\n\u2014RALPH WALDO EMERSON\nAt its most basic level, programming is the process of changing\nvalues. Sometimes, however, you specifically don't want to\nchange certain values. In this chapter, you'll see how to create\nand modify constants and variables, and you\u2019ll learn the rules for\nworking with values in JavaScript.\nMaking Variables with let\nVariables are names that represent values in a program.\nJavaScript has the keyword for creating new variables.\nlet\nDeclaring variables\nCreating a new variable is known as declaring a variable. To\ndeclare a variable using , simply write the keyword\nlet let\nfollowed by what you want to name the variable, like this:\nlet phoneNumber;\nThis line creates a new empty variable named .\nphoneNumber\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:111>\n", "text": "Technically, a newly declared variable isn't empty.\nJavaScript automatically assigns it a value of . I talk\nundefined\nabout this value later in this chapter.\nundefined\nOnce you've declared a variable, you can assign it a value like\nthis:\nphoneNumber = '503-555-5555';\nInitializing variables\nAssigning a value to a variable for the first time is called\ninitializing a variable. You can also combine the declaration and\ninitializing of a variable into one statement, like this:\nlet favoriteColor = 'red';\nVariables are what make it possible to have computer programs\nthat do more than one thing. For example, first consider the\nfollowing tiny JavaScript program:\nlet seven = 7;\nlet eight = 8;\nlet sum = seven + eight;\nThis is a perfectly valid JavaScript program, and it demonstrates\nhow to create a variable and give it a value, though no one would\never write this program (except me, of course). It simply results\nin the variable having a value of 15 each time it's run.\nsum\nUsing variables\nYou can think of a variable as a box that holds a single item. This\nbox may have a label that describes its contents, and the more\ndescriptive the label is, the easier it is to know what should be\nkept in that box. Variables are typically named according to the\npurpose of the values they store. Constants (I talk about them in\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:112>\n", "text": "the next section) are typically named in a way that identifies the\nexact value they store.\nTo use the value of a variable in a statement, use the variable's\nname. To see this concept in action (and to try out the following\nexamples), open the JavaScript console in your browser and try\ndeclaring and initializing variables. Figure 3-1 shows some things\nyou might want to try.\nFIGURE 3-1: Declaring and initializing variables with let.\nDid you expect that the value of in Figure 3-1\nfullName\nwould change when the value of was changed?\nfirstName\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:113>\n", "text": "Can you explain what's happening here? Keep reading,\nbecause I explain what's going on in the section about data\ntypes!\nYou can make the preceding program that only added 7 and 8\ninto a general-purpose program for adding two numbers by\nsetting the values of the numbers using the result of user input,\nlike this:\nlet firstNumber = prompt(\"Pick a number\");\nlet secondNumber = prompt(\"Pick another number\");\nlet sum = firstNumber + secondNumber;\nalert(sum);\nWhen you run this program, your browser pops up a prompt and\nwaits for your answer. It then pops up a second prompt. When\nyou enter a number into that one, your browser displays an alert\nwith the sum of the numbers.\nIf you've written or worked with JavaScript previously,\nyou've most likely seen and used the keyword. Creating\nvar\nvariables with works the same way as with . However,\nvar let\nusing is no longer considered to be a good practice by\nvar\nmost JavaScript programmers, for reasons I explain later in\nthis chapter, in the section \u201cGetting a Handle on Scope.\u201d\nNaming variables\nAlways make your variable names descriptive and write them in\ncamelCase. Two-word variable names are usually more descriptive\nthan single-word names, and using multiple words makes it less\nlikely that you'll have two variables with the same name. For\nexample, if you're creating a variable to hold a street address, it's\nbetter to name it than simply .\nstreetAddress address\nMaking it a habit to stick to the rule of naming variables in\ncamelCase reduces typos because you won't accidentally type\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:114>\n", "text": "in one place, in another, and\nstreetaddress StreetAddress\nin another.\nstreetAddress\nMaking Constants with const\nMany times, you need easy access to a value in your JavaScript\nprogram, but, once it's created, you won't need to change it. For\nthis reason, JavaScript has the keyword.\nconst\nConstants created using work similarly to variables created\nconst\nwith , with one important difference: Once declared, a\nlet\nconstant can't be re-assigned. If you attempt to change a\nconstant, JavaScript gives you an error, as shown in Figure 3-2.\nBecause a constant can't be assigned a new value after it's\ncreated, you must always declare and initialize a constant at the\nsame time \u2014 for example:\nconst likesTacos = true;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:115>\n", "text": "FIGURE 3-2: Attempting to change a constant results in an error.\nTechnically speaking, doesn't create values that\nconst\ncan't be changed (you call these immutable values) \u2014 it\ncreates a read-only reference to a value. What this means in\npractice is that if you assign a value to a that includes\nconst\nother values (as happens with arrays and objects, which you\ncan start learning about later in this chapter), you can still\nchange the inner values of the \u2014 just not the value the\nconst\nrefers to.\nconst\nWhen to use constants\nAnytime you have a value that you know won't change during the\nlife of a program, and that you need to use more than once, you\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:116>\n", "text": "should make it a constant. It's common, for example, to have\nconfiguration variables that are used throughout a program.\nThese may include elements like URL paths, theme colors set by\nthe developer, and error messages used throughout the program.\nBy setting these as constants at the beginning of your program\n(or in a separate module), you can make sure that they don't get\nchanged and that you have a centralized place for managing them\nas you code.\nNaming constants\nNonchanging values should be named using all capital letters and\nbe defined either in a separate module or at the beginning of your\nJavaScript file or module. If a constant's name is more than one\nword, it's a well-established practice to name them using\nUPPER_SNAKE_CASE.\nAs you'll see when you start working with JavaScript\nobjects, arrays, and modules, there are exceptions to every\nrule.\nTaking a Look at the Data\nTypes\nVariables and constants all have two things in common: a value\nand a type. You've already seen examples of values. These are\nthe bits of data that you want to store in the variable. In this\nsection, I talk about type.\nA variable's data type is the kind of data a variable can hold. It's\nwhat determines whether 97103-4534 is a postal code or a\nmathematical operation that results in 92569.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:117>\n", "text": "JavaScript is loose and dynamic\nJavaScript is a loosely typed language. What this means is that\nyou can store any type of data in a variable or constant without\nhaving to tell JavaScript in advance the type of data you'll store in\nthe variable.\nJavaScript is also a dynamically typed language. This means that\nyou can change the type of data stored in a variable. You might\ninitialize a variable using a number but later store text in it.\nThough changing the type of a variable is unusual and generally\nshould be avoided, JavaScript tries to be friendly and doesn't\ncomplain.\nTo see a value's or variable's data type, you can use the\ntypeof\noperator. To try it out, open your JavaScript console and try\nentering the following expressions:\ntypeof \"1\"\ntypeof 0\ntypeof true\ntypeof \"true\"\ntypeof a\ntypeof \"a\"\nThe result of running these expressions is shown in Figure 3-3.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:118>\n", "text": "FIGURE 3-3: Using typeof to get the data type.\nPassing by value\nJavaScript has seven basic data types, which are known as the\nprimitive data types. Primitive data types are passed by value.\nWhen you create a new variable from an existing variable, what's\nhappening is that the value of the existing variable is copied (as if\nyou were taking a picture of it) to the new one. Let's look at an\nexample to better understand the implications of this concept.\nStart out by creating a variable called to hold a person's\nfirstName\nfirst name, and create another variable, called , to hold a\nlastName\nlast name:\nlet firstName = \"Andrea\";\nlet lastName = \"Wallace\";\nNow you can create a new variable called , which\nfullName\ncombines the values of and (and adds a space\nfirstName lastName\nbetween them):\nlet fullName = firstName + ' ' + lastName;\nWhen you create , the values of and\nfullName firstName lastName\nare copied and concatenated. If you change the values of\nand later than when was created,\nfirstName lastName fullName\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:119>\n", "text": "doesn't know about that, in the same way that a picture\nfullName\nyou take of someone doesn't change when they get a haircut.\nString data type\nA string is any literal text. It can be made up of any number of\ncharacters, including letters, numbers, symbols, and white space.\nTo create a string, enclose a value in matching single or double\nquotes, like this:\nlet catName = \"Mr. Furley\";\nWhether you use single or double quotes doesn't matter, as long\nas you end your string with the same type of quote you began it\nwith. If you use double quotes to create your string, you can't use\ndouble quotes within that string. If you define your string using\nsingle quotes, you can't use single quotes inside that string.\nConsider the following code, which causes an error in JavaScript:\nlet famousQuote = \"\"Nothing great was ever achieved without enthusiasm.\"\";\nThe intention in the previous example is for the quotation marks\nto show up around the words. But the result is that JavaScript will\nthink the string starts with the quotation mark ( ) and ends with\n\u201c\nthe second quotation mark and therefore contains nothing. The\nrest of the characters are seen by JavaScript as just a mess of\ntypos.\nEscaping characters\nWhen you need to use double quotes in a double-quoted string,\nyou can escape them by prefacing the offending symbol with a\nbackslash ( ). To correctly store the previous quote, including the\n\\\nquotation marks, you can write it like this:\nlet famousQuote = \"\\\"Nothing great was ever achieved without enthusiasm.\\\"\";\nAlternatively, you can define your string with single quotes and\nthen use the double quotes inside it as much as you like:\nlet famousQuote = '\"Nothing great was ever achieved without enthusiasm.\"';\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:120>\n", "text": "Once you decide on your own preference (or adopt a\nstandard style of coding) for whether to use single quotes or\ndouble quotes for strings, stick with it. Remember:\nConsistency reduces the potential for bugs.\nIn addition to single quotes and double quotes needing to be\n\u201cescaped,\u201d several other special characters can't be used in a\nstring unless you use an escape code. Most of these are things\nyou'll never have a need to use, but others, like backslash and\nnew line, can often be useful. These characters are shown in\nTable 3-1.\nCreating strings with template literal\nnotation\nAnother way to create strings, which was introduced with ES2015,\nis to use template literal notation. Template literals start and end\nwith the backtick ( ) character (which is in the upper-left corner\n`\nof a desktop or laptop keyboard).\nTABLE 3-1 JavaScript Special Characters\nCode Output\n\\' Single quote\n\\\" Double quote\n\\\\ Backslash\n\\n New line\n\\r Carriage return\n\\t Tab\n\\b Backspace\n\\f Form feed\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:121>\n", "text": "The useful thing about template literals is that you can include\nJavaScript expressions inside them by surrounding the expression\nwith curly braces preceded by a dollar sign ( ).\n$\nListing 3-1 shows how to use a template literal string to compile a\nmessage to be displayed after someone places an order.\nLISTING 3-1: Using a template literal\nstring\nlet orderTotal = 39.99;\nlet itemPurchased = 'JavaScript All-in-One For Dummies';\nlet customer = 'Joe Q. Developer';\nlet thankYou = `${customer}, thank you for your order of ${itemPurchased}.\nYour payment of ${orderTotal} was successful.`;\nBefore template literals came along, writing a string that included\nvariable data required the use of the concatenation operator ( ),\n+\nand the resulting statement was confusing and error-prone.\nWorking with string functions\nOnce you've created a string, you can use any of JavaScript's\nbuilt-in string functions with it. Some of the most common string\nfunctions are listed in this section.\nYou can try out these string functions for yourself and see\nthe result of each one by opening your JavaScript console\nand entering the statements:\ntells you the character at a specified position (starting\ncharAt\nwith position 0):\nlet randomLetters = 'pdfsdj';\nrandomLetters.charAt(4);\ncombines two or more strings and returns the result:\nconcat\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:122>\n", "text": "let houseNumber = '555';\nlet streetName = 'Shady Lane';\nhouseNumber.concat(' ', streetName);\nsearches your string and returns the position of the\nindexOf\nfirst occurrence of the character or string you specify:\nlet typeOfTree = 'Pine';\ntypeOfTree.indexOf('e');\nsplits strings into an array of substrings:\nsplit\nlet vowelsList = 'a,e,i,o,u';\nvowelsList.split(',');\nextracts the characters within a string between two\nsubstring\nspecified positions. If the first number is larger than the\nsecond, substring reverses them:\nlet phoneNumber = '313-555-1234';\nphoneNumber.substring(12, 4);\nworks the same as substring, but it returns an empty\nslice\nstring (\"\") if the first number is larger than the second:\nlet phoneNumber = '313-555-1234';\nphoneNumber.slice(4, 12);\nfinds a string and replaces it with another string:\nreplace\nlet message = 'Learn FORTRAN.';\nmessage.replace('FORTRAN', 'JavaScript');\nreturns a string with all the characters converted\ntoLowerCase\nto lowercase:\nlet username = 'ChrisMinnick';\nusername.toLowerCase();\nreturns a string with all the characters converted\ntoUpperCase\nto uppercase:\nlet stateName = 'texas';\nstateName.toUpperCase();\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:123>\n", "text": "Number data type\nTo make a variable with the data type, assign any number\nnumber\n(without quotes) or an expression that evaluates to a number (for\nexample 1+1) to a variable or constant.\nJavaScript stores numbers as 64-bit floating-point values. This\nmeans that, in theory, the data type can store any number\nnumber\nbetween 2^\u20131074 and 2^1024. In practice, however, you should\nuse the data type only to store numbers between \u20132^53\u2013\nnumber\n1 and 2^53\u20131. These numbers are called the maximum and\nminimum safe integers.\nThe reason this range is considered safe is that JavaScript\nuses exponential notation for numbers larger or smaller than\nthis value and rounds off digits in these very large numbers,\nwhich makes the data type not useful for precise\nnumber\ncalculations and comparisons of very large numbers.\nFor numbers that are larger or smaller than this range, you can\nuse the data type.\nbigInt\nWorking with number functions\nLike the data type, the data type includes several\nstring number\nhelpful functions (also known as methods) for working with\nnumbers.\nconverts a number to an integer by discarding\nparseInt\neverything after the decimal point:\nparseInt(5.343235);\nspecifically tells JavaScript to treat a number as a\nparseFloat\nfloat, meaning that it will include the portion after a decimal\npoint:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:124>\n", "text": "parseFloat(10.00);\nOne of the most common uses for and is to\nparseInt parseFloat\nconvert strings to numbers. For example, if the user of your web\napp enters a number into a text field, that value is received by\nyour program as a string.\nKnowing when to convert between strings\nand numbers\nTo understand the importance of converting string input into\nnumbers, consider the following example:\nlet orderTotal = tip + tax + total;\nIf the user provides the value for using an online form, it will\ntip\nbe a string containing a number. Let's try this calculation using\nthe following values:\nlet tip = \"8.50\";\nlet total = 40;\nlet tax = 0;\nlet orderTotal = tip + tax + total;\nTry out this code in your JavaScript console, and then check the\nvalue of . Can you explain what happens? The tax and\norderTotal\ntotal get added normally, but then that result gets concatenated\nwith the string contained in the variable and the result is a\ntip\nstring with a value of , instead of what you expected to\n8.50040\nget, which is the number .\n48.50\nTry changing the order of the variables on the right side of the\nstatement that declares and initializes the to see what\norderTotal\nhappens if the string isn't first. JavaScript sometimes does\n\"tip\"\nstrange things, which is why it's best to explicitly convert to the\ndata type you want something to be.\nTo fix the code in the previous example, use , as\nparseFloat\nshown here:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:125>\n", "text": "let tip = \"8.50\";\nlet total = 40;\nlet tax = 0;\nlet orderTotal = parseFloat(tip) + tax + total;\nNow the program returns the expected result.\nbigInt data type\nIf you need to use numbers that are larger or smaller than the\nmaximum and minimum numbers that can be held by the number\ndata type, you can use the data type.\nbigInt\nTo create a bigInt, just add an to the end of a number. For\nn\nexample, here's a number that's larger than the maximum safe\nnumber for the number data type:\nlet kilometersToAndromedaGalaxy = 23651826000000000000n;\nBoolean data type\nBoolean variables store one of two possible values: either or\ntrue\n.\nfalse\nThe word Boolean is usually capitalized because the word\ncomes from the name of a person, George Boole (1815\u2013\n1864), who created an algebraic system of logic.\nWhen you compare items in JavaScript, the result is a Boolean. To\nsee this concept in action, try typing the following expressions\ninto the JavaScript console:\n3<10\n90<10\ntrue === false\n0!==\"0\"\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:126>\n", "text": "\"apples\" === \"oranges\"\nConverting to Boolean\nAny value in JavaScript can be converted to a Boolean by using\nthe operator. You can try out this conversion by going back into\n!!\nthe JavaScript console and typing some values with in front of\n!!\nthem \u2014 for example:\n!!\"JavaScript is awesome\"\n!!\"I am the best JavaScript programmer\"\n!!0\n!!\"\"\n!!99\n!!null\nNotice that some of the values in this list convert to and\ntrue\nothers convert to . How do you know which is which? The\nfalse\nanswer lies in the idea of Truthy and Falsy values.\nThe (usually pronounced \u201cbang\u201d) operator is the logical\n!\nNOT operator. Using one to the left of a value returns its\n!\nBoolean opposite. So, two s returns the double opposite,\n!\nwhich is how can be used to convert a value to its\n!!\nassociated Boolean value.\nGetting Truthy and Falsy\nYou can always know whether a value, when converted to a\nBoolean, will be or by remembering a short list of\ntrue false\nitems that always convert to . These values are called \u201cfalsy\u201d\nfalse\nin JavaScript:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:127>\n", "text": "false\n(zero)\n0\n-0\n(BigInt zero)\n0n\n(an empty string)\n\"\"\nnull\nundefined\nNaN\nEverything else is when converted to Boolean.\ntrue\nWhy is this knowledge useful? The idea of truthy and falsy allows\nyou to simplify the code for many operations in JavaScript. For\nexample, it's quite common to need to determine whether a\nvariable has a value before trying to do something with it. One\nway to do this is to write something like the following statement:\nif (city === ''){\nalert('City is a required field.');\n}\nThis code might be used to determine whether someone forgot to\nfill out a field named on a form. Another way to write this\ncity\nsame thing is to just use the variable in the parentheses,\ncity\nwhich converts to a Boolean. If it has a value, it will be .\ncity true\nIf it doesn't have a value, it will be . Because you want to\nfalse\nknow whether city is , you can invert the Boolean to say \u201cIf\nfalse\ncity is not truthy\u201d like this:\nif (!city) {\nalert('City is a required field.');\n}\nNaN data type\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:128>\n", "text": "NaN stands for Not a Number. NaN is what you get when you try\nto perform impossible mathematical operations or when you try to\nperform mathematical operations with strings.\nThese are examples of operations that return NaN:\nMath operations where the result is not a real number, such as\ntrying to calculate the square root of a negative number:\nMath.sqrt(-1)\nAttempting any mathematical operation involving a string,\nother than with the addition operator:\n\"yarn\" / \"cats\"\nAttempting to convert a string to a number:\nparseInt(\"sandwich\")\nUndefined data type\nUndefined is the default data type and value of a variable that's\nbeen declared but not initialized in JavaScript. It's also the value\nthat will be returned by a statement or function that doesn't\nspecifically return a value.\nYou can see this default return value in action by entering a\nvariable declaration into the JavaScript console in your browser.\nWhenever you run a JavaScript statement or expression in the\nconsole, JavaScript must return a value. If the statement you run\ndoesn't specifically have a return value, the returned value is\n.\nundefined\nSymbol data type\nThe Symbol data type is used to create unique identifiers in\nJavaScript. Unlike the other data types, even if two symbols\nappear to be identical and have the same name, JavaScript\nguarantees that they'll be unique.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:129>\n", "text": "To see this unique nature of Symbol in action, enter the following\nsnippet into your browser's JavaScript console:\nlet symbol1 = Symbol(\"mysymbol\");\nlet symbol2 = Symbol(\"mysymbol\");\nsymbol1===symbol2\nWrangling the Object: The\nComplex Data Type\nIn addition to its seven primitive data types, JavaScript also has a\ncomplex data type called object. Objects are containers for\nrelated data and functionality. For example, an object called\nmight contain a name and an address and various\ncustomerInfo\nother values related to a particular customer of a business.\nAn object is called a complex data type because it's made up of\nthe other data types. You can think of an object as your\nopportunity to create any data type you need. Though a simple\nnumber data type is useful for storing the score in a game or the\nnumber of times someone has played the game, many things in\nlife are more complex and need multiple values to fully describe\nthem.\nTo make an object, place curly braces ( ) around a comma-\n{}\nseparated list of name:value pairs.\nThe customer object I described might be created and assigned\nto a constant, like this:\nconst customer = {\nname: 'Laura Wigfall',\naddress: '3427 Crummit Lane',\ncity: 'Providence',\nstate: 'RI',\nzipcode: '02905',\ncustomerId: 4,\nisInLoyaltyClub: true,\n};\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:130>\n", "text": "Here are two important aspects you may have noticed about this\nobject:\nThe values inside an object (which are called\nproperties) can be of any combination of the other\ndata types. In fact, these values can be (and often are)\nobjects themselves.\nThis object was declared using . Objects are\nconst\ncommonly declared as constants. The result is that the\nobject itself is unchangeable, though the values inside it can\nstill be changed. I help you explore this interesting facet of\nJavaScript and its implications much more in Chapter 7 of\nBook 1.\nYou can access the properties of an object by using what's called\ndot notation. To see dot notation in action, open your JavaScript\nconsole and enter the previous object (or any other object,\nreally), and then enter the name of the object ( ),\ncustomer\nfollowed by a period ( ), followed by the name of one of the\n.\nobject's properties.\nJavaScript returns the value of that property in response. You can\nuse dot notation to create and change properties as well.\nExamining the Array \u2014 a\nSpecial Kind of Object\nArrays aren't primitive data types, but they aren't exactly objects,\neither. Arrays are used to store lists of items using a single name.\nThe items inside an array are its elements, and the number you\ncan use to access or modify elements is the index. Arrays are\ncreated using square brackets containing comma-separated\nvalues.\nThe following example creates an array called :\nfavoriteCities\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:131>\n", "text": "const favoriteCities = [\n'Rome',\n'Berlin',\n'New York',\n'Paris',\n'Astoria',\n];\nYou can access the elements in an array by using the name of the\narray followed by square brackets containing the index position of\nthe element you want. For example, to get the name of my\nsecond-favorite city, you would use the following line:\nfavoriteCities[1];\nYou: Oh, no \u2014 you're only a few percent into this huge book and\nthere's already a typo! Didn't you mean to say you get your\nsecond-favorite city using ?\nfavoriteCities[2]\nMe: No, that would get my third-favorite city. Array indexes start\ncounting at . Programmers call this zero-based indexing.\n0\nYou can learn much more about arrays in Chapter 6.\nGetting a Handle on Scope\nThe location where you declare a variable determines where your\nprogram can make use of that variable. This concept is called\nvariable scope. JavaScript has three kinds of variable scope:\nGlobal-scoped variables can be used anywhere inside a\nprogram.\nFunction-scoped variables can be used anywhere within the\nfunction where it was declared. You can read about functions\nin Book 1, Chapter 8. Function-scoped variables are created\nusing the keyword.\nvar\nBlock-scoped variables are variables created using the or\nlet\nkeyword and initialized inside of a block. A block in\nconst\nJavaScript is a unit of code that starts with a left curly brace\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:132>\n", "text": "( ) and ends with a right curly brace ( ). Block scoped\n{ }\nvariables can be used anywhere within the block where they\nare declared.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:133>\n", "text": "Chapter 4\nWorking with Operators and\nExpressions\nIN THIS CHAPTER\nBuilding expressions\nSetting values with the assignment operator\nTesting with the comparison operators\nDoing the math with arithmetic operators\nUsing your words with the string operators\nThinking through the logical operators\nLearning about additional operators\n\u201cBut do your work, and I shall know you.\u201d\n\u2014RALPH WALDO EMERSON\nJavaScript operators and expressions are the building blocks of\nJavaScript programs. With operators and expressions, you can\nperform math, compare values, set and change variables, and\nmuch more.\nIn this chapter, you'll learn about JavaScript's operators and use\nthem to build expressions and statements. You'll also learn how to\ncombine operators and how to choose which operators to use\nwhen multiple operators can produce the same results.\nBuilding Expressions\nAn expression is a piece of code that resolves to a value. There\nare two types of expressions, both of which you may have already\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:134>\n", "text": "seen in this book: those that affect something else (for example,\nthe expression assigns the value to the chapter\nchapter = 4 4\nvariable) and those that simply resolve to a value (for example,\nthe expression ).\n99 - 1\nIn most cases, when you write JavaScript code, you combine\nthese two types of expressions to form statements. For example:\nx = x + 1;\nThis statement consists of two expressions. The first one adds\n1\nto the value of , and the second one assigns that new value to .\nx x\nThe result is that the value of is incremented by .\nx 1\nEXPRESS YOURSELF\nYou often have multiple ways to write expressions that do the same thing by\nusing different operators. For example, you can achieve the same result as\nsaying x = x + 1 with any of the following statements:\nx += 1;\n++x;\nx=(-(~x));\nIf each of these statements will produce the same result, how do you know\nwhich one you should use? This is often a personal choice, but your personal\nchoice will be affected by several factors, including which one is easiest for you\nto read and understand, which one will be easier to understand by other\npeople who may read your code, which one is shortest, and which one will\nexecute the fastest when run by a JavaScript engine.\nTo be totally honest, sometimes even looking cool to your JavaScript friends\ncomes into play with the decision, as in the case of that last statement, which\nno one in their right mind would ever actually use but that might give\nsomeone a chuckle if they saw it.\nMy advice is to use whatever seems easiest for you to read and understand,\nand not to worry too much about what might be very small differences in\nperformance or making your code as concise as possible. As you become more\nexperienced with JavaScript, your style will naturally evolve.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:135>\n", "text": "Operators: The Lineup\nThe symbols or keywords that make expressions do their work\nare called operators. They operate on values, also called\noperands, to produce the final value of an expression. Examples\nof operators include =, +, +=, and many others. This section\ndiscusses the use of some of the more common operators.\nOperator precedence\nIt's common for statements to contain multiple operators. For\nexample, look at the following statement:\nx = 5 - 1 / 2;\nDepending on the order in which JavaScript performs each of the\nthree operations (assignment, subtraction, and division) in this\nstatement, the final value of may be 5, 2, or 4.5.\nx\nThe key to understanding statements with multiple operators is\noperator precedence. Operator precedence assigns a number\nfrom 1 to 19 to each operator. In a statement containing multiple\noperators, the operator with the highest number runs first.\nThe multiplication (*) and division (/) operators have a\nprecedence value of 13, addition (+) and subtraction (\u2013) have\nprecedence values of 12, and assignment (=) has a precedence of\n2. Because all three operators in this statement have different\nprecedence values, it's a simple matter to work out the final value\nof , as shown here:\nx\n1 will be divided by 2, resulting in .5.\n.5 will be subtracted from 5, resulting in 4.5.\n4.5 will be assigned to x.\nIf you haven't done so already, you can verify these values by\nusing your browser's JavaScript console.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:136>\n", "text": "But what happens when a statement has multiple operators that\nhave the same precedence level, such as this one:\nx = 4-5-2/2*2\nTo handle this case, JavaScript assigns an associativity to each\noperator. Associativity is the direction in which expressions that\nuse the operator are evaluated. Left-associativity means that the\nleft side of the operator is evaluated first. Right-associativity\nmeans that the right side of the operator is evaluated first.\nArithmetic operators have left-associativity (except for the special\ncase of the exponentiation operator), and assignment operators\nhave right-associativity. By using associativity and operator\nprecedence together, you can work out the final value of in the\nx\npreceding statement, like this:\n1.\n2/2 = 1\n2.\n1*2 = 2\n3.\n4-5 = -1\n4.\n-1-2\n5.\nx =-3\nYou can see all the operators and their operator\nprecedence by visiting\nhttps://developer.mozilla.org/en-\nUS/docs/Web/JavaScript/Reference/Operators/Operator_Prec\n.\nedence#table\nUsing parentheses\nRemembering and figuring out operator precedence is a job that's\nbest left to JavaScript. It's helpful to know the associativity and\nrelative precedence for a few operators (such as the arithmetic\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:137>\n", "text": "and assignment operators), but in reality, there's only one\noperator you need to know to make sure your statements always\ndo things in the order you want. This magical operator is the\ngrouping operator, which is made up of opening and closing\nparentheses.\nThe grouping operator is used to control the order of evaluation\nof statements, and it has the highest precedence of all of\nJavaScript's operators. By using the grouping operator, you can\noverride the default operator precedence rules and evaluate\nexpressions in any order you want.\nFor example, in the following statement, the division and\nmultiplication would normally happen first:\nx = 4-5-2 / 2*2\nIf you wanted the left and right sides of the division operator to\nrun before the division is done, you could use the grouping\noperator like this:\nx = (4-5-2) / (2*2);\nThe result of this statement is or .\n-3 / 4, -.75\nAssignment operators\nThe assignment operator assigns a value to the operand on the\nleft based on the operand on the right:\nx = 10;\nYou can also chain together assignment operators. For example:\nx = y = z = 0;\nRemember that the associativity of the assignment operator is\nfrom right to left. So, the way JavaScript executes this expression\nis by assigning to , and then the value of to , and then the\n0 z z y\nvalue of to . In the end, all three variables are .\ny x 0\nComparison operators\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:138>\n", "text": "The comparison operators test for equality of the left and right\noperands, and return a Boolean ( or ) value. Table 4-1\ntrue false\nshows the complete list of comparison operators.\nTABLE 4-1 JavaScript Comparison Operators\nOperator Description Example\n== Equality 3 == \u201c3\u201d // true\n!= Inequality 3 != 3 // false\n=== Strict equality 3 === \u201c3\u201d // false\n!== Strict inequality 3 !== \u201c3\u201d // true\n> Greater than 7 > 1 // true\n>= Greater than or equal to 7 >= 7 // true\n< Less than 7 < 10 // true\n<= Less than or equal to 2 <= 2 // true\nThe equality and inequality operators ( and , respectively)\n== !=\nonly compare the values of the left and right operands. When\npossible, they change the type of the operand on the right to\nmatch the operand on the left. This behavior is, from the\nstandpoint of JavaScript, a friendly thing to do. However, it results\nin some strange behaviors that can cause bugs in programs.\nFor example, using the equality operator, the following statement\nevaluates to :\ntrue\n0 == \"0\"\nIn reality, the number is not the same as a string containing a .\n0 0\nRelying on JavaScript to automatically convert a string (for\nexample, from a form input) to a number might not break your\nprogram, but it's considered bad coding practice to use a string\nwhere you mean to use a number (or vice versa). For this reason,\nmost JavaScript developers never use the and operators.\n== !=\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:139>\n", "text": "Instead, you should explicitly convert strings to numbers (by\nusing or ) or convert numbers to strings\nparseInt() parseFloat()\n(using ) and use the strict equality and strict inequality\ntoString()\noperators, like this:\na = parseInt(\"3\");\nb = parseInt(\"5\");\na === b\nArithmetic operators\nThe arithmetic operators perform mathematical operations and\nreturn the results. Table 4-2 shows the complete list of arithmetic\noperators.\nConcatenation operator\nThe concatenation operator uses the same symbol as the addition\noperator ( ). When used with two strings, this operator joins the\n+\nstrings together:\nlet yourName = \"Marcellus L. Benfield\";\nlet welcomeMessage = \"Welcome, \" + yourName;\nLike the equality operator, the concatenation operator attempts to\ndo type coercion whenever possible. For example:\nlet numberOfHats = 10;\nconsole.log('Harriet has ' + numberOfHats + \" hats.\";\nTABLE 4-2 Arithmetic Operators\nOperator Description Example\n+ Addition a = 1 + 1\n\u2013 Subtraction a = 10 - 1\n* Multiplication a = 2 * 2\n/ Division a = 8 / 2\n% Remainder a = 5 % 2\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:140>\n", "text": "Operator Description Example\na = ++b\n++ Increment a = b++\na++\na = --b\n-- Decrement a = b--\na--\n** Exponentiation operator 2 ** 2\nAs with the equality operator, however, there is danger in not\nspecifically converting all values in an expression to the correct\ntype. For example, if you try to add together two numbers and\none of the operators is a string, the results may not be what you\nwant:\nlet sum = 1+\"1\"; // result: \"11\"\nTo avoid this common problem, you can explicitly convert\noperands to the correct type:\nlet sum = 1 + parseInt(\"1\"); // result: 2\nLogical operators\nLogical operators evaluate an expression for truthiness or\nfalsiness. There are three logical operators, as shown in Table 4-\n3.\nTABLE 4-3 Logical Operators\nWhat It\nOperator What It Does\nMeans\nReturns the first falsy operand. If all values are truthy,\n&& And\nit returns the value of the last operand.\nReturns the value of the first truthy operand. If all the\n|| Or operands evaluate to false, it returns the last\noperand.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:141>\n", "text": "What It\nOperator What It Does\nMeans\nTakes only one operand. Returns false if its operand\n! Not\ncan be converted to true. Otherwise, it returns true.\nThe logical AND and OR operators also have clever other uses.\nThe operator can be used to set a variable to a default value,\n||\nlike this:\nlet language = userPreference.language || 'English';\nThis statement sets the language to the user-specified language if\nthe user has set one; otherwise, it sets language to .\n'English'\nThe operator can be used to choose between two paths, like\n&&\nthis:\nlet logInScreen = !loggedIn && showLogInScreen();\nIn this example, if the variable is falsy, the\nloggedIn\nfunction will run. This way of using to\nshowLogInScreen() &&\nswitch between two paths is commonly used in JavaScript front-\nend libraries like React.js, Vue.js, and Svelte to do conditional\nrendering. Conditional rendering means that some piece of the\nuser interface (such as a login form) should show only if a certain\ncondition is true. In the preceding example, the condition you're\ntesting for is whether the value of is falsy.\nloggedIn\nThe and operators are known as short-circuit\n|| &&\noperators because they stop executing and return a value\nwhen they find a truthy value (in the case of ) or a falsy\n||\nvalue (in the case of ).\n&&\nThe logical NOT operator ( ) is often used to test whether a\n!\nvariable hasn't been initialized or is false:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:142>\n", "text": "if (!isRegistered) { alert (\"Register now!\"); }\nTwo NOT operators can be used to convert any value to its\nBoolean equivalent:\n!!\"I like cheese\" // returns true\nCombining operators\nThe assignment operator can be combined with other operators\nas a shorthand method of assigning the result of an expression to\na variable or constant. For example, the following statements are\nequivalent:\nscore = score + 1;\nscore += 1;\nTo form the combination operators, the assignment operator is\nalways on the right and the other operator is on the left.\nOther Operators\nJavaScript contains many other operators in addition to those\nmentioned here. However, many of these operators are\nspecifically used for working with arrays and objects, and\ndiscussing them here wouldn't make much sense. See Book 1,\nChapter 6 to learn about arrays, and see Book 1, Chapter 7 to\nlearn about objects.\nSome operators that are part of JavaScript are rarely used by\nJavaScript developers. For example, the bitwise operators can be\nused to work with data at the level of its individual bits. Working\nwith numbers as bits is faster than using JavaScript's built-in\nnumber and math functions. However, few JavaScript\nprogrammers ever have a need to use bitwise operators, and\nusing them is likely to confuse other people who read your code.\nJust one reason that the bitwise operators are confusing is that\ntwo of the symbols they use are and , which are easily\n| &\nconfused with the logical OR and AND operators.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:143>\n", "text": "To learn more about the bitwise operators, visit\n.\nwww.geeksforgeeks.org/javascript-bitwise-operators\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:144>\n", "text": "Chapter 5\nControlling Flow\nIN THIS CHAPTER\nUsing if and else\nConsidering your options with switch\nCreating loops\nBreaking and continuing loops\n\u201cWhen you have to make a choice and don't make it, that is in\nitself a choice.\u201d\n\u2014WILLIAM JAMES\nIn previous chapters, you may have read about JavaScript\nvariables, expressions, and statements. These are the essential\nbuilding blocks of every JavaScript program. However, without the\nability to make decisions between various statements, or to\nrepeat statements, programming would be much less interesting.\nIn this chapter, you'll learn about looping and branching\nstatements.\nChoosing a Path\nConditional statements, also known as branching statements,\nallow you to write code that performs various actions based on\nvarious conditions.\nif \u2026 else statements\nThe and statements evaluate an expression and then run\nif else\none block of code if the expression is truthy and another block of\ncode if it's falsy. For example, if you want to customize the display\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:145>\n", "text": "of the current temperature, you could write the following\nstatement:\nif (country === \"United States\" || country === \"Liberia\"){\ntemperature = temperature + \"F\";\n} else {\ntemperature = (temperature - 32) * 5 / 9 + \"C\";\n}\nSometimes, you only want to either do something or not do it,\nrather than make a choice between two options. In that case, you\ncan just use an statement:\nif\nif (coffeeMakerIsOff) {\nturnOnCoffeeMaker();\n}\nMultiple paths with if else\nAt other times, you may want to choose between several options.\nFor this, you can string together and statements. For\nif else\nexample:\nif (pet === 'cat') {\ngreeting = 'Good kitty';\n} else if (pet === 'dog') {\ngreeting = 'Who\\'s a good boy or girl?';\n} else if (pet === 'parrot') {\ngreeting = 'Wanna cracker?';\n} else {\ngreeting = 'Hi.';\n}\nThe ternary operator\nConditional statements can also be written using the conditional\noperator. The conditional operator is also known as the ternary\noperator. The conditional operator shortens statements\nif \u2026 else\nto a single expression, which is often useful when doing\nconditional rendering with ReactJS, Vue.js, or Svelte.\nTo use the conditional operator, write a condition followed by a\nquestion mark. After the question mark comes the expression that\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:146>\n", "text": "will run if the condition is . Follow that expression with a\ntrue\ncolon and then the expression to run if the condition is :\nfalse\nconst dt = Date();\nconst hours = dt.getHours();\nlet msg;\nmsg = hours < 12 ? ('Good morning!') : ('Welcome');\nconsole.log(msg);\nAssuming that the variable uses the 24-hour clock, the\ntimeOfDay\npreceding example returns before noon and a\n'Good morning!'\ngeneric greeting otherwise.\nYou can try out this code by typing or pasting it into your\nJavaScript console. All the code from this book is also\navailable for download from the book's website.\nNote that the ternary operator can only be used to switch\nbetween two choices. If your code needs to decide between more\nthan two outcomes, use the statements or the\nif \u2026 else switch\nstatement, which you can read about in the next section.\nSwitch statements\nThe statement decides which statement to run based on\nswitch\nthe result of a single expression. Each possible outcome of a\nstatement is called a . Here's the syntax for the\nswitch case switch\nstatement:\nswitch(expression){\ncase x:\n// code to run when expression === x\nbreak;\ncase y:\n// code to run when expression === y\nbreak;\ndefault:\n// code to run if nothing else matches expression\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:147>\n", "text": "In Listing 5-1, I've created a new program that displays a\ndifferent holiday based on the current month of the year. In\naddition to showing how the statement works, this\nswitch\nexample demonstrates how to use JavaScript to display text in a\nweb browser. To try it out, use VS Code to save it as a file\n.html\nand then open it in a web browser.\nYou can right-click the filename in the VS Code Explorer pane and\nselect Open in Live Server to view it in a browser.\nLISTING 5-1: Using the switch statement\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Holiday Finder</title>\n</head>\n<body>\n<div id=\"message\"></div>\n<script>\nconst dt = new Date();\nconst month = dt.getMonth();\nlet msg;\nswitch (month) {\ncase 0:\nmsg = 'January 4 is National Spaghetti Day!';\nbreak;\ncase 1:\nmsg = 'February 9 is National Pizza Day!';\nbreak;\ncase 2:\nmsg = 'March 26 is National Spinach Day!';\nbreak;\ncase 3:\nmsg = 'April 26 is National Pretzel Day!';\nbreak;\ndefault:\nmsg = 'No holidays this month.';\n}\nconst el = document.getElementById('message');\nel.innerHTML = msg;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:148>\n", "text": "</script>\n</body>\n</html>\nLet's walk through this code in detail to understand how\nswitch\nworks and to start learning how to write front-end web\napplications.\nRead this section carefully \u2014 I introduce for the first time\na lot of new topics that are important to understanding how\nfront-end JavaScript works. I cover all these topics in much\nmore detail throughout this book, but I'm introducing them\nhere so that you can start working with more complex\nexamples in Chapter 6.\n1. Just above the tag, notice the element with an\n<script> div id\nof . Inside this element is where you display the\nmessage\nprogram's output.\n2. After the message element is the element that\ndiv script\ncontains the program. The fact that the element comes\nscript\nafter the HTML element where its output will be rendered is\nimportant. Because the code in an HTML file is interpreted\nfrom top (the beginning of the file) to bottom (the end of the\nfile), if you want to output something inside the HTML code,\nyou have to wait until that HTML code has been read and\nrendered by the browser first.\n3. The first line of the JavaScript program uses the\nDate()\nfunction to find out the current date on the user's computer:\nconst dt = new Date();\nis what's known as a constructor function in JavaScript:\nDate()\nWhen you use it with the keyword, it returns a new date\nnew\nobject. The date object contains the current date as well as\nproperties and functionality having to do with dates.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:149>\n", "text": "4. The function runs with the date returned in Step 3:\ngetMonth()\nconst month = dt.getMonth();\nThe function is part of every date object. To use it,\ngetMonth()\nattach it to any object with a period (.), and don't forget\ndate\nto add the parentheses after it. It's the parentheses that tell\nJavaScript to make a function do its thing.\nJavaScript counts from 0, so the first month of the year\nis number 0!\n5. A variable named is declared, but it's not initialized.\nmsg\nPutting the script after the HTML that it affects is just\none way to cause the browser to wait until the HTML\ndocument is rendered before running the JavaScript. It's often\nthe simplest way, however, so it's very commonly used.\n6. The statement begins, and the month variable's value\nswitch\nis passed into it:\nswitch(month){\nThe curly braces set off a block of JavaScript. In this\ncase, the block contains the statement's cases.\nswitch\n7. The first says what to do if the value of month is :\ncase 0\ncase 0:\nIf the value of month is , any statements after the colon at\n0\nthe end of the case are run, until JavaScript encounters either\na statement (which stops execution of the switch\nbreak\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:150>\n", "text": "statement) or the ending curly brace containing the\nswitch\ncases.\n8. The value of is set:\nmsg\nmsg = 'January 4 is National Spaghetti Day!';\n9. The statement ends the evaluation of the\nbreak switch\nstatement and jumps directly to the next statement after the\nclosing curly bracket.\nOne common cause of bugs in JavaScript is forgetting\nto include a statement before each in a\nbreak case switch\nstatement. If you don't include this, the statement runs\nswitch\nthe code after each after one of them evaluates to .\ncase true\n10. If none of the cases matches the value of , the\nmonth default\ncase runs and sets the value of to a default message:\nmsg\ndefault:\nmsg = 'No holidays this month.';\nNote that the statement isn't required after the\nbreak default\ncase because there are no more cases after it to skip over.\n11. The next statement locates the HTML element where you\nwant to render the message and assigns it to a constant\nnamed .\nel\nconst el = document.getElementById('message');\n12. The property, which contains the HTML between the\ninnerHTML\nelement's starting and ending tags is changed to the value of\nthe variable:\nmsg\nel.innerHTML = msg;\nBecause nothing now appears between the\n<div\nand tags, the message is just inserted\nid=\"message\"> </div>\nbetween them. What do you think would happen if there was\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:151>\n", "text": "already text between the starting and ending tags, like\ndiv\nthis:\n<div id=\"message\">put some message here</div>\nOnce you have a guess, go ahead and try it. Modify your\nHTML file to put some text between the starting and ending\ntags. If you have the file open in your browser using Live\ndiv\nServer, you should see the result instantly. Or, rather, you\nshould see no difference. By changing the property\ninnerHTML\nof the element, you completely overwrite what was there\ndiv\nwith the new value.\nThis simple example demonstrates the fundamental\ntechnique used by every front-end JavaScript library to\nmodify the content displayed in the browser window.\nMaking Loops\nOne thing that makes computers so useful is that they can do the\nsame thing over and over without getting bored. Looping\nstatements make telling a computer to do the same thing over\nand over much easier.\nImagine that you want to write a program to count to 100 and\noutput each number to the browser console. One way (one very\ntedious and inefficient way, I should say) would be to write 101\nstatements, like this:\nlet x = 0;\nconsole.log(++x);\nconsole.log(++x);\nconsole.log(++x);\nconsole.log(++x);\n// you get the idea\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:152>\n", "text": "Note that the increment ( ) operator in the preceding code\n++\nexample appears in front of the variable it's incrementing. This is\ncalled prefix notation, in which the operation (adding to ) is\n1 x\ndone before logging the value of to the console. If you put the\nx\nafter ( ), that's called postfix notation. Try changing this\n++ x x++\nexample to use postfix notation, and then run it in your browser\nconsole to see what happens.\nTo make repeating statements easier, JavaScript provides several\ndifferent types of looping statements, including these:\nfor\nfor \u2026 in\nfor \u2026 of\ndo \u2026 while\nwhile\nThe looping statements are also known as iterative\nstatements.\nfor loops\nThe statement uses three expressions in parentheses after\nfor\nthe keyword to create a loop:\nfor\nInitialization: The initial value of a variable. This variable is\nusually a counter.\nCondition: A Boolean expression that determines whether to\nrun the loop's statements.\nFinal expression: An expression to be evaluated following\neach iteration of the loop. This expression is typically used to\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:153>\n", "text": "increment a counter.\nThe loop is usually used to loop over code a predetermined\nfor\nnumber of times. Here's how you can write a loop to do the\nfor\ncounting-to-100 example from the earlier section \u201cMaking Loops:\u201d\nfor(let i=1; i <= 100; i++) {\nconsole.log(i);\n}\nHere's how this loop works:\n1. A new block-scoped variable called is initialized with a value\ni\nof .\n1\n2. The second expression tests the variable to see whether it's\nless than or equal to 100.\nIf it is, the statements in the block are executed.\nIf it isn't, the loop exits.\nNote that because the variable is block-scoped, it's only\ni\navailable inside the loop. This is a good thing.\nfor\n3. After the code in the block executes, the final expression\nfor\nruns, incrementing the counter.\n4. The test is repeated.\nIn practice, loops are unpopular with experienced\nfor\nJavaScript developers. Like using the keyword, loops\nvar for\nare an old way to do things that shouldn't be used. There's\nusually a more modern and simpler syntax for doing the\nsame thing that loops do. You can learn about some of\nfor\nthese in this chapter, and learn about other methods that are\nbetter for looping through arrays in Chapter 6.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:154>\n", "text": "for \u2026 in loops\nThe loop iterates over the properties of an object and\nfor \u2026 in\nthe properties it inherits from its parent object. Because arrays\nare types of objects, it's possible to use loops to loop\nfor \u2026 in\nover the elements in an array as well.\nObjects contain multiple values, called properties, which\nmay hold any type of JavaScript data, including strings,\nnumbers, Booleans, arrays, and even other objects.\nTo see how works, start with the following simple\nfor \u2026 in\nobject:\nconst house = {sqft:800, bdRooms:2, bthRooms:1}\nListing 5-2 shows how you could write a web page that displays\nall the properties of this object.\nLISTING 5-2: Using to display the\nfor \u2026 in\nproperties of an object\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>House Details</title>\n</head>\n<body>\n<div id=\"root\"></div>\n<script>\nconst house = { sqft: 800, bdRooms: 2, bthRooms: 1 };\nlet houseDetails = '<h2>Information about this house</h2>';\nfor (let prop in house) {\nhouseDetails = `${houseDetails}<br>${prop}:${house[prop]}<br>`;\ndocument.getElementById('root').innerHTML = houseDetails;\n}\n</script>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:155>\n", "text": "</body>\n</html>\nLike loops, loops aren't often used in\nfor for \u2026 in\nJavaScript, because you can find better and more modern\nways to do anything that you might want to use to\nfor \u2026 in\ndo. Also, loops loop over the properties of their\nfor \u2026 in\nparent object, which is usually not what you want to do. In\npractice, loops are mostly useful for debugging your\nfor \u2026 in\ncode.\nfor \u2026 of loops\nThe loop creates a loop by iterating over any iterable\nfor \u2026 of\nobject. What's an iterable object, you ask? An iterable object is an\nobject that can be iterated over. Examples of iterable objects\ninclude arrays and strings.\nBefore was introduced into JavaScript in 2015, the way\nfor \u2026 of\nto iterate over arrays was by using the loop, , or the\nfor for \u2026 in\nmethod. Here's an example of using a loop to\nforEach for \u2026 of\nloop over the elements of an array:\nconst pets = ['cat', 'dog', 'chicken'];\nfor (let pet of pets) {\nconsole.log(pet);\n}\nThe result of running the preceding code in the JavaScript console\nis shown in Figure 5-1.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:156>\n", "text": "FIGURE 5-1: Looping over an array's elements.\nStrings can be treated as arrays of characters, so the same syntax\nthat's used to loop over an array can also be used for strings:\nlet text = \"spell me.\";\nfor (let character of text) {\nconsole.log(character);\n}\nFigure 5-2 shows what this snippet does when run in the\nJavaScript console.\nwhile loops\nThe statement creates a loop that repeats a block of code if\nwhile\na specified condition evaluates to . In Listing 5-3, a loop\ntrue\ncreated using generates a random number between 1 and\nwhile\n100 on every pass through the loop. The loop continues until the\nrandom number is 71, and then the loop exits and outputs\nhowever many loops it needed to make.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:157>\n", "text": "FIGURE 5-2: Iterating over a string.\nLISTING 5-3: A random number guessing\ngame\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Random Number with a while Loop</title>\n</head>\n<body>\n<div id=\"root\"></div>\n<script>\nlet guessNumber = 0;\nlet numberToGuess = 71;\nlet guess;\nwhile (guess != numberToGuess) {\nguess = Math.floor(Math.random() * 100);\nguessNumber++;\n}\ndocument.getElementById('root').innerHTML = `\n<h2>I guessed it!</h2>\n<p>It only took me ${guessNumber} guesses!</p>`;\n</script>\n</body>\n</html>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:158>\n", "text": "do \u2026 while loops\nA loop works the same as a loop, except that\ndo \u2026 while while\nthe condition goes after the code block. The result is that the\ncode between the 's curly braces is guaranteed to run\ndo \u2026 while\nat least once.\nListing 5-4 shows an improved version of the number guessing\ngame. The difference here is that with the standard loop,\nwhile\nthe answer is checked before the first random number is created.\nIn a loop, a random number is created first and then\ndo \u2026 while\ntested.\nLISTING 5-4: A random number guessing\ngame with\ndo \u2026 while\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Random Number with a do \u2026 while Loop</title>\n</head>\n<body>\n<div id=\"root\"></div>\n<script>\nlet guessNumber = 0;\nlet numberToGuess = 71;\nlet guess;\ndo {\nguess = Math.floor(Math.random() * 100);\nguessNumber++;\n} while (guess != numberToGuess);\ndocument.getElementById('root').innerHTML = `\n<h2>I guessed it!</h2>\n<p>It only took me ${guessNumber} guesses!</p>`;\n</script>\n</body>\n</html>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:159>\n", "text": "break and continue statements\nThe and statements can be used to interrupt the\nbreak continue\nexecution of a loop. The statement causes the current loop\nbreak\nor control statement to exit. You may have read about break\nearlier in this chapter, where I tell you about the\nswitch\nstatement.\nThe statement halts execution of the current iteration of\ncontinue\nthe loop and goes directly to the next one. For example, in the\nfollowing code, is used to loop over the digits in a phone\ncontinue\nnumber and remove dashes from it:\nlet phoneNumber = \"555-757-1212\";\nfor (let digit of phoneNumber) {\nif (digit==='-') continue;\nconsole.log(digit);\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:160>\n", "text": "Chapter 6\nUsing Arrays\nIN THIS CHAPTER\nCreating, accessing, and modifying arrays\nRemoving array elements\nProgramming and looping with array methods\nDestructuring and spreading arrays\n\u201cI am large. I contain multitudes.\u201d\n\u2014WALT WHITMAN\nMost of the data I describe how to work with earlier in this book\nis in the form of simple variables and constants that store a single\nvalue. However, it's common in programming, and in life, to need\nto store lists of related items under a single name. Think about\nthe following common lists that many people use daily:\nMailing lists and contacts\nGrocery lists\nTo-do lists\nLists of favorite songs\nThe list of items on an invoice or a receipt\nThe list of chapters in a book\nIn each case, without the ability to collect individual pieces of\ndata into a list, you'd just have sticky notes scattered all over the\nplace and in no particular order (a bit like my desk).\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:161>\n", "text": "Think for a moment about your favorite apps and websites.\nWhether it's a blog, a social media site such as Twitter or\nInstagram, or your daily run log app, a large part of the app is\ndedicated to presenting data as lists.\nThe data that powers these apps behind the scenes is stored in\ndatabases, which are nothing but sophisticated ways of storing\nlists.\nThe server-side code that retrieves the data that displays in apps\nand websites retrieves data from these databases and sends them\nas lists to the front-end JavaScript program, which transforms this\nraw list data and displays it to you.\nThe way to make lists of data in JavaScript is by using a special\ntype of objects called arrays.\nIntroducing Arrays\nArrays are made up of elements. If an array is like a list, an\nelement is like a single item in the list. Arrays keep track of their\nelements by assigning each element a number, called the index.\nFor example, you can create an array of color names like this:\nconst colors = ['red','green','blue'];\nIf you enter this statement into your JavaScript console, an array\nwith three elements is created, as you can verify by entering the\nname of the array into the console, as shown in Figure 6-1.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:162>\n", "text": "FIGURE 6-1: Creating and viewing an array in the console.\nIn Figure 6-1, you can see a couple important aspects of this\narray, and about arrays in general:\nThis array has three elements, so it's said to have a length of\n3.\nThe array's elements are numbered starting with 0. This is\ncalled zero-based numbering.\nThe prototype for an array is the object, which means\nArray\nthat every array you create has access to certain properties\nand methods that are defined by the object. You can\nArray\nsee all these properties and methods by clicking the arrow in\nthe console to expand the object, as shown in\nPrototype\nFigure 6-2.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:163>\n", "text": "FIGURE 6-2: Viewing the properties of the Array object.\nThe properties and methods of the object are what\nArray\nmake arrays useful. You can read later in this chapter about\nthe most important of these properties and how they're used\nin front-end JavaScript programming.\nIn the preceding example, the array stores three strings.\ncolor\nArrays aren't limited to storing just one type of data, however. In\nfact, elements in an array can contain any combination of\ndifferent data types.\nThe upper limit of the number of elements an array can hold is\nover 4 million. So, unless you're extremely popular and you have\na giant address book or you're extremely busy and you have the\nworld's longest to-do list, you're unlikely to exceed the maximum.\nIf you do need to store more than the maximum number of\nelements a single array can hold, it might be time to look at\nbreaking that list into smaller categories. You'll likely run into\nperformance problems trying to work with a huge array long\nbefore you run up against the upper limit of array elements.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:164>\n", "text": "Creating Arrays\nJavaScript contains three ways to create arrays. You can use\nThe constructor\nArray()\nArray literal notation\nFunctions that return arrays, such as\nsplit()\nUsing the Array() constructor\nA constructor function is one that creates and initializes an object.\nIn the case of the constructor, it returns a new array\nArray()\nobject. To use a constructor function, use the operator with\nnew\nthe name of the constructor function followed by open and close\nparentheses:\nnew Array();\nTo make this new array usable, of course, you need to assign it to\na variable or constant:\nconst myArray = new Array();\nYou can create elements in the array by passing a list of values to\nthe function, like this:\nconst myArray = new Array('January','February','March');\nProgrammers commonly define array variables by using\n. The constant value is the array itself, not the elements\nconst\ninside the array, which you can change.\nProgrammers say that the array assigned to a constant is\nimmutable and that the elements in the array are mutable.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:165>\n", "text": "The constructor function is a perfectly fine way to make arrays. In\nfact, the constructor function can be used to make strings,\nnumbers, and Booleans as well. However, most JavaScript\nprogrammers don't use constructor functions for these basic data\ntypes, because they have simpler ways to do the same thing \u2014\nnamely, by assigning the values using literal notation.\nUsing array literal notation\nArray literal notation uses a comma-separated list of values inside\nsquare brackets to create and initialize an array, like this:\nconst myArray = [\"eggs\",\"bacon\",\"toast\"];\nUnlike with the constructor function method, array literal notation\ndoesn't require you to use the operator, so you have one less\nnew\nopportunity to make a typo.\nUsing the split function\nThe function makes an array out of a string. To use\nsplit()\n, give it the character (or characters) that you want to use\nsplit()\nto split the string. For example, if you have a text file containing\ncomma-separated values, you can turn it into an array by splitting\nit on the comma:\nlet customerData = 'Barb Seibert,3739 Sheila Lane,Goldfield,NV,89013';\nconst customerDataArray = customerData.split(',');\nComma-separated value files (also known as CSV files) can be\ncreated from spreadsheets or database tables, and knowing how\nto use to turn CSV data into arrays that you can work\nsplit()\nwith in JavaScript is important for any programmer.\nBe careful when splitting comma-separated data. If any values in\nthe string contain commas and you split it on commas, you'll\ncorrupt the data. For example, try splitting the following string:\nlet customerData = \"Barb Seibert, Esq.,3739 Sheila Lane,Goldfield,NV,89013\";\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:166>\n", "text": "Do you see the problem with this string? A human reading this file\nwill know that is meant to be part of the name, but the\n, Esq.\nfunction doesn't distinguish between commas.\nsplit()\nFor this reason, comma-separated files should also enclose each\nvalue in quotes. You might think you can then split the string\nbased on a comma surrounded by quotes, like this:\nlet customerData = \"'Barb Seibert, Esq.','3739 Sheila\nLane','Goldfield','NV','89013'\";\nlet customerDataArray = customerData.split(\"','\");\nHowever, this method will produce the following array:\n[\"'Barb Seibert, Esq.\", '3739 Sheila Lane', 'Goldfield', 'NV', \"89013'\"]\nThe quotes at the beginning of the first element and at the end of\nthe last element weren't stripped out by the function.\nslice()\nWriting a statement to successfully convert any type of comma-\nseparated data into a string can become complicated. For that\nreason, you're better off finding a tried-and-true method, such as\n, which is available here:\nconvert-csv-to-array\n.\nhttps://www.npmjs.com/package/convert-csv-to-array\nAccessing Array Elements\nOnce you have an array, the next thing to know is how to find out\nthe values of specific elements. To get the value of a single\nelement, use the array name followed by square brackets\ncontaining the index number of the element you want to find out.\nFor example, if you create this array:\nconst myArray = [43,299,34];\nyou can get the second number by using the following\nexpression:\nmyArray[1];\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:167>\n", "text": "It's common to need to know how many elements are in an array\nbefore you access its elements. To do this, you can use the\nlength\nproperty of the array, like this:\nmyArray.length;\nThis statement returns the number of elements in the array. The\nindex number of the array is the length minus 1. So, if you want\nto use a loop to loop over all elements in an array and add\nfor\nthem together, you can do it like this:\nconst myArray = [3434,56,2];\nlet sum = 0;\nfor (let i = 0; i<myArray.length-1; i++){\nsum += myArray[i];\n}\nconsole.log(`The sum is ${sum}`);\nThis isn't the best way or the easiest way to loop over an array,\nhowever. You can see how to use the method to do this\nreduce()\nsame thing later in this chapter.\nModifying Arrays\nTo modify the values of array elements or add new elements to\narrays, you can use the assignment operator. For example, to\nchange the value of the element with an index number of 1 to\n, you can use the following statement:\n'sandwich'\nmyArray[1] = 'sandwich';\nYou can use this same technique to add elements to an array:\nmyArray[3] = 'burrito';\nWhen adding elements to an array, it's not a requirement to\nalways add it using the next index number. If you have an array\nwith three elements in it, for example, you can use the following\nstatement to add an element with an index number of 1000:\nmyArray[1000] = 'sushi';\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:168>\n", "text": "However, when you do this, JavaScript automatically creates all\nthe elements between the previously highest index number and\nthe new one and gives them values of . You can test\nundefined\nthis statement by checking the property on the array:\nlength\nmyArray.length // returns 1001\nAn array with elements inside it that are is called a\nundefined\nsparse array.\nDeleting Array Elements\nHere are two ways to delete elements from an array:\nChange the length of an array. For example, if you have\nan array with a length of 1001, you can remove all elements\nafter 500 by using the following line:\nmyArray.length = 501;\nUse the delete operator. The operator doesn't\ndelete\nremove an element \u2014 it just sets its value to . So,\nundefined\nafter using the operator, your array becomes a sparse\ndelete\narray with the same length as before:\ndelete myArray[3]\nProgramming with Array\nMethods\nArrays include numerous functions that make accomplishing tasks\nwith them easier. Although it's possible to accomplish everything\nthat the built-in array functions can do by using various loops,\noperators, and conditional statements, knowing how to use the\nmost important array functions makes your life easier.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:169>\n", "text": "Table 6-1 lists the most commonly used array functions, along\nwith descriptions of what they do or the values they produce.\nTABLE 6-1 JavaScript Array Methods\nMethod Return Value\nA new array made up of the current array, joined with other\nconcat()\narrays and/or values\nTrue if every element in the given array satisfies the provided\nevery()\ntesting function\nA new array with all the elements of a current array that test\nfilter()\ntrue by the given function\nforEach() Completes the function once for each element in the array\nDetermines whether an array includes a specified value and\nincludes()\nreturns true or false\nFinds the first occurrence of the specified value within the\nindexOf()\narray; returns \u20131 if the value is not found\njoin() Joins all elements of an array into a string\nFinds the last occurrence of the specified value within the\nlastIndexOf()\narray; returns \u20131 if the value is not found\nCreates a new array with the result of a provided function on\nmap()\nevery element in the array\npop() Removes the last element in an array\npush() Adds new items to the end of an array\nReduces the values in an array to a single value by applying a\nreduce()\nfunction to them (from left to right)\nreverse() Reverses the order of elements in an array\nRemoves the first element from an array and returns that\nshift()\nelement, resulting in a change in length of an array\nslice() Selects a portion of an array and returns it as a new array\nReturns true if one or more elements satisfy the provided\nsome()\ntesting function\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:170>\n", "text": "Method Return Value\nsort() Creates a new array by sorting the elements in an array\nReturns a new array composed of elements that were added or\nsplice()\nremoved from a given array\ntoString() Converts an array to a string\nReturns a new array with a new length by the addition of one\nunshift()\nor more elements\nIn the following sections, I explain and demonstrate the array\nmethods that you're most likely to encounter or need. If you want\nto follow along in your JavaScript console, start by creating an\narray to work with. I'll use the following array, containing the\ningredients for a frittata, for all examples in this section:\nconst ingredients =\n['eggs','milk','cheese','garlic','onion','kale','salt','pepper'];\nPushing and popping\nNo, they're not dance moves. Pushing and popping are what\nprogrammers call the processes of adding and removing elements\nto or from the end of an array.\nYou can remember which is which by remembering that the\nfunction pushes items into the list and that pops\npush() pop()\nthem out.\nThe method removes the last element and returns the\npop()\nremoved element. If all you want to do is remove the last\nelement, you can do that like this:\ningredients.pop();\nAfter calling , the array is one item shorter, as\npop() ingredients\nshown in Figure 6-3.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:171>\n", "text": "FIGURE 6-3: Popping removes the last element.\nIf you want to remove the last element and then do something\nwith the removed element, you can assign the result of the pop\nmethod to a new variable:\nlet removedElement = ingredients.pop();\nThe push method adds a value as a new element and returns the\nnew length of the array:\ningredients.push('chili flakes');\nFigure 6-4 shows the result of pushing chili flakes into the\ningredients list.\nFIGURE 6-4: Pushing adds a new element.\nShifting and unshifting\nShifting works the same as popping and pushing, but it does its\nwork to the beginning of the array.\nThe method removes the first element and returns the\nshift()\nremoved value.\nYou can use the same way you use :\nshift() pop()\ningredients.shift();\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:172>\n", "text": "Figure 6-5 shows the result of shifting an array.\nWHAT'S THE DEAL WITH THESE METHOD\nNAMES?\nPush, pop, shift, and unshift are some of the method names that are the\nhardest to keep straight in JavaScript. It would have been so much easier if,\ninstead of push() and unshift(), these functions would have been named\nappend() and prepend(). The names of these functions have a long history that\nmay help you to keep them straight. The names push and pop date back to the\nearly days of computing, and the terms referred to operations done to the\nstack. You can think of an array as a stack of plates, and if you want to get to\na plate in the middle of the stack, you need to move the ones above it first. If\nyou want the most recently added item, you can just \"pop\" it off the top. The\nsame goes for adding plates \u2014 when you push a new plate onto the stack, it\ngoes on top.\nIf you remove a plate from the bottom of the stack, all the plates above it shift\ndownward. Adding a plate to the bottom unshifts the plates above it. I don't\nknow whether anyone has ever come up with a good explanation for that\nname, except that unshifting is the opposite of shifting.\nFIGURE 6-5: Shifting removes an element from the beginning of an array.\nJust as adds a new element to the end of an array and\npush()\nreturns the new length, adds a new element to the\nunshift()\nbeginning and returns the new length. Let's say you realize that it\nwas a mistake to remove the eggs from the frittata recipe:\ningredients.unshift('eggs');\nFigure 6-6 shows the result.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:173>\n", "text": "FIGURE 6-6: Unshift adds an element to the beginning of the array.\nSlicing an array\nThe method selects a portion of the array and returns a\nslice()\nnew array with just that portion. To use , give it the\nslice()\nstarting element's index number and the ending element's index\nnumber. The new array contains everything from the starting\nelement to the element before the ending element.\nThink of it as like asking for the slices of pizza starting\nwith one and going up to another one. The difference,\nhowever, is that when using , the original array isn't\nslice()\nmodified:\ningredients.slice(3,6);\nFigure 6-7 shows how to make a new array from the middle of\nthe ingredients array.\nFIGURE 6-7: Slicing returns a portion of an array as a new array.\nSplicing an array\nThe method takes a starting element and a number of\nsplice()\nelements to remove and removes those elements from an array,\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:174>\n", "text": "returning the removed elements:\ningredients.splice(3,3);\nFigure 6-8 shows how you can use to separate an array\nsplice()\ninto two arrays.\nFIGURE 6-8: Splicing removes a number of elements from an array.\nLooping with Array Methods\nSeveral array methods make looping over the elements in an\narray easier. Some of these methods were added to the language\nafter 2015, and they're so useful that they've mostly replaced\nolder methods of looping that you may have learned about in\nChapter 5.\nIn front-end libraries such as ReactJS, Vue.js, and Svelte, you're\nsure to need a couple of these daily, so it pays to learn them.\nPassing callback functions to array\nmethods\nEach of the methods in this section loops over an array and uses\na callback function to do its work. You can read much more about\nfunctions and callback functions in Chapter 8.\nA function is a program within your program. It receives data and\ndoes something with it. As with any program, a function stops\nrunning when it's done with its job, and it may return some data\nto the rest of the program.\nSo far in this book, I have told you how to use functions that are\nbuilt into JavaScript \u2014 such as array functions, string functions,\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:175>\n", "text": "number functions, Boolean functions, and more.\nYou can also write your own, custom functions in JavaScript. In\nfact, writing custom functions is one of the most important and\ncommon things you'll do as a JavaScript programmer. Here's an\nexample of a simple function that receives a number as an\nargument and returns the square of that number:\nfunction squareIt(num){\nreturn num*num;\n}\nTo use this function, you run it by using its name ( )\nsquareIt\nfollowed by parentheses. Using a function is also called invoking\nor calling a function. Between the parentheses is how you pass\ndata into the function.\nFor example, to use this custom function to square the\nsquareIt()\nnumber 3, you'd call the function like this:\nsquareIt(3);\nTo get the value returned by the function out of the function,\nhowever, you also need to assign it to a variable:\nlet threeSquared = squareIt(3);\nA callback function is a function you pass to another function.\nCallback functions make functions much more flexible because\nyou can pass not only values into a function but also new\nfunctionality into a function.\nFor example, the following is a function that takes a value and a\ncallback function:\nfunction doMath(value,mathToDo){\nlet result = mathToDo(value);\nreturn result;\n}\nWith this function, the function can have multiple\ndoMath()\npurposes. For example, if you wanted to use it to calculate the\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:176>\n", "text": "circumference of a circle from its radius, you could invoke the\nfunction like this:\nconst circumference = doMath(4,function(radius){return 2*Math.PI*radius});\nThe result of running this function is shown in Figure 6-9.\nFIGURE 6-9: Using a callback function.\nReducing an array\nThe function runs a reducer function on each element of\nreduce()\nan array. A reducer function is one that reduces an array from\nmultiple values to a single value. For example, a reducer function\ncan be used to calculate the total from a list of prices in an array:\nlet prices = [4.99,3,98,54.99];\nlet total = 0;\ntotal = prices.reduce(\nfunction(previousValue,currentValue){\nreturn previousValue + currentValue;\n}\n);\nHere's how this function works:\n1. Create an array of prices.\n2. Initialize the total to 0.\n3. Call the function on the array and pass it a\nreduce() prices\nfunction that adds together the current value with the\nprevious value.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:177>\n", "text": "4. The function calls the passed-in reducer function\nreduce()\nonce for each element in the array and then passes the result\nof each run into the next call of the function.\nYou can simplify the code for the function in a couple of\nreduce()\nways. The first is that you can specify an initial value for\nby passing it as the second value to the\npreviousValue reduce()\nfunction. This eliminates the need to initialize to 0 before\ntotal\nrunning :\nreduce()\nlet total = prices.reduce(\nfunction(previousValue,currentValue){\nreturn previousValue + currentValue;\n},0\n);\nThe second way to simplify calling (and any function\nreduce()\nthat takes a callback function, in fact) is to use arrow syntax for\nyour callback function. Arrow syntax (also sometimes called fat\narrow syntax) uses a symbol created using the = and > symbols\nthat looks like an arrow. Here's what calling and passing\nreduce()\nit an arrow function looks like:\nlet total = prices.reduce(\n(previousValue,currentValue) => previousValue + currentValue,0);\nMapping an array\nThe array function takes a callback function and returns a\nmap()\nnew array with the result of applying the callback function to each\nelement of the array.\nis used extensively for generating HTML from\nArray.map()\nJavaScript arrays. For example, using the array from\ningredients\nearlier in this chapter, you can use to generate HTML list\nmap()\nitem elements from the items, like this:\nconst ingredients = [\n'eggs',\n'milk',\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:178>\n", "text": "'cheese',\n'garlic',\n'onion',\n'kale',\n'salt',\n'pepper',\n];\nlet listItems = ingredients.map(\n(singleIngredient) => `<li>${singleIngredient}</li>`\n);\nIn this example, the new array can be used to populate\nlistItems\na template and produce a list in the browser. Listing 6-1 shows\none way to do that.\nLISTING 6-1: Generating an HTML list from\nan array\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Ingredients List</title>\n</head>\n<body>\n<ul id=\"ingredients\"></ul>\n<script>\nconst ingredients = [\n'eggs',\n'milk',\n'cheese',\n'garlic',\n'onion',\n'kale',\n'salt',\n'pepper',\n];\nlet listItems = ingredients\n.map((singleIngredient) => `<li>${singleIngredient}</li>`)\n.join('');\ndocument.getElementById('ingredients').innerHTML = listItems;\n</script>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:179>\n", "text": "</body>\n</html>\nListing 6-1 uses the function to create an array of list item\nmap()\nelements, and then it uses the function to join the\njoin()\nelements together. The function takes a character to use\njoin()\nto separate the items and returns a string. In this case, I used an\nempty string to join the elements, which creates a string with all\nlist items joined together.\nNotice that in Listing 6-1, the function is just tacked to the\njoin()\nend of the call to . This is called chaining function calls. The\nmap()\nresult of the function, in this case, gets passed to the\nmap()\nfunction.\njoin()\nFiltering arrays\nThe method applies a test to each element of an array\nfilter()\nand returns a new array with just the elements that pass the test.\nIn the following example, is used to find only the words\nfilter()\nthat start with the letter a:\nconst animalNames = [\n'aardvark',\n'alligator',\n'alpaca',\n'bear',\n'beaver',\n'cat',\n'dog',\n'elephant',\n];\nconst animalsStartingWithA =\nanimalNames.filter((animal) => animal.startsWith('a')\n);\nDestructuring Arrays\nDestructuring is the process of unpacking values from an array or\nan object into separate variables. One way to destructure an array\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:180>\n", "text": "is to just create multiple new variables and assign elements from\nan array to them, like this:\nconst person = ['Russell C. Guy','3447 Twin House Lane','Neosho','MO'];\nlet personName = person[0];\nlet address = person[1];\nlet city = person[2];\nlet state = person[3];\nBut there's an easier way to initialize these individual variables, all\nin one step: destructuring syntax. To use array destructuring\nsyntax, create a list of variable names in square brackets on the\nleft side of the assignment operator and specify an array on the\nright:\nlet [personName,address,city,state] = person;\nJavaScript extracts elements from the array and assigns their\nvalues to the variables in square brackets starting with the first\nelement and going until the array runs out of elements or the\nsquare brackets run out of variables.\nSpreading Arrays\nSpread syntax expands (or spreads) an iterable object (such as an\narray) into its component parts. To use spread syntax, preface the\nname of an array with three dots (\u2026). Spread syntax is often used\nto pass all values of an array into a function or to copy the values\nfrom one array into another:\nconst firstArray = ['a','b','c'];\nconst secondArray = [\u2026firstArray,'d'];\nA copy of an array created using spread syntax is called a shallow\ncopy because it contains just the values from the original array\nand has no reference to the original array.\nTry the following steps in your JavaScript console to understand\nthe importance of shallow copies:\n1. Create a new array:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:181>\n", "text": "const fruits = ['apple','orange','banana'];\n2. Make a copy of the array by using the assignment\noperator:\nconst fruitsCopy = fruits;\n3. Add a new element to the copy:\nfruitsCopy.push('watermelon');\n4. Print the elements of the original array:\nfruits\nThe result of these steps is shown in Figure 6-10.\nFIGURE 6-10: A copy of an array (or another object) is a reference to the\noriginal.\nThe variable created in the previous step list is actually a\nreference to the original array. Frequently, however, you don't\nwant or need a copy of an array to reference the original array.\nHere's how to make a shallow copy with spread syntax:\nconst fruitsShallowCopy = [\u2026fruits];\nNow the new array is its own array and changes you make to it\nwon't affect the original array.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:182>\n", "text": "Chapter 7\nMaking and Using Objects\nIN THIS CHAPTER\nCreating, modifying, comparing, and copying objects\nIntroducing prototypes\nDeleting object properties\n\u201cYou can find the entire cosmos lurking in its least remarkable\nobjects.\u201d\n\u2014WISLAWA SZYMBORSKA\nData is rarely as simple as it seems. To understand any concept or\nphysical object often requires multiple data points. A full\ndescription of a toaster, for example, would include its size, color,\nand power requirements as well as a description of what it does.\nNone of the data types I describe earlier in this book can be used\nto describe a toaster by themselves, but in combination, they can.\nObjects: The Basics\nObjects are reusable components that contain data and\nfunctionality. Objects in real life have characteristics that define\nwhat they are. For example, a pencil has a length, a diameter, a\ncolor, and other characteristics that describe it. A pencil also has\nthings you can do with it, such as write, erase, sharpen, and\nbreak.\nIn JavaScript, both the data and functionality encapsulated by an\nobject are called properties. If a property has a function value, it's\nalso known as a method. JavaScript objects can be used to\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:183>\n", "text": "describe physical objects, but they can also be used to describe\nabstract ideas.\nA JavaScript object to describe a pencil might look something like\nthis:\nconst pencil = {\nlength: \"7.5 inches\",\nshape: \"hexagonal\",\ndiameter: \"1/4 inch\",\nwrite: function(){/*do writing*/},\nerase: function(){/*do erasing*/},\nsharpen: function(){/*do sharpening*/},\n}\nYou might create this pencil object to describe a pencil in your\nexciting new simulation game, called Pencil Adventure.\nOnce a pencil object is created, you can find out about it and\nmake use of its functions by using dot notation. For example, to\nsharpen the pencil, you can invoke the method of the\nsharpen()\npencil:\npencil.sharpen();\nOf course, sharpening a pencil makes the pencil shorter, so you\nneed to update its length. You can do so by changing the value of\nthe property of :\nlength pencil\npencil.length = \"7 inches\";\nSharpening the pencil also gives it another property you should\nkeep track of, which I call . To add this new property,\nsharpness\njust assign it:\npencil.sharpness = \"sharp\";\nAnother thing you can do with a pencil object is to make copies of\nit. For example, you might have a box of pencils and want to\ntrack their properties and be able to use them separately. As with\narrays, one way to make a shallow copy of an object is by using\nthe spread syntax:\nconst newPencil = {\u2026pencil};\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:184>\n", "text": "I offer plenty of examples of objects earlier in this book. For\nexample, the object represents an HTML page in a web\ndocument\nbrowser. It contains methods like and properties\ngetElementById\nsuch as .\ninnerHTML\nOne key to gaining a deep understanding of JavaScript is\nto know that arrays and functions are objects and that\nnumbers, strings, and Booleans can also be used as objects.\nCreating Objects\nJavaScript has four ways to create objects from scratch:\nUse object literal notation.\nUse the keyword.\nnew\nUse .\nObject.create()\nDefine a class.\nEach of these methods results in the same result in the end.\nHowever, some methods are more convenient or offer capabilities\nthat others don't. So it's important to be familiar with each of\nthem.\nMaking objects using literal\nnotation\nTo make an object using literal notation, use curly braces\ncontaining comma-separated pairs. The names\nname:value\nbecome how you access the property, and the value can be any\nvalid JavaScript value, including other objects.\nHere's a simple object written using object literal notation:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:185>\n", "text": "const person = {eyes: 2, feet: 2, eyeColor: 'brown'};\nYou can also initialize an object as an empty object and use dot\nnotation to add properties to it afterward:\nconst person = {};\nperson.hair = 'black';\nperson.hands = 2;\nperson.fullName = {firstName:'Lamont',lastName:'Rudnick'};\nMaking objects using a\nconstructor function\nA constructor function is one that can be called with the\nnew\nkeyword to create (or construct) an object. Listing 7-1 shows an\nexample of using a constructor function.\nLISTING 7-1: Using a constructor function\nfunction Cat(name, type){\nthis.name = name;\nthis.type = type;\n}\nconst ourCat = new Cat('Murray', 'domestic short hair');\nConstructor functions can be used to create multiple objects, and\neach object created using the constructor function will have\nCat()\nthe and properties.\nname type\nThe keyword in Listing 7-1 (and elsewhere in this chapter)\nthis\nrefers to the context in which a function, such as the constructor\nfunction, is running. When you create a new object using the\nnew\noperator and the constructor function in Listing 7-1,\nCat() this\nrefers to the new object.\nFor example, in the following statement, the keyword refers\nthis\nto the object named :\nourCat\nconst ourCat = new Cat('Murray','domestic short hair');\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:186>\n", "text": "When the constructor function runs, it does basically the\nCat()\nsame thing (with some technical differences) as though you had\nwritten the following:\nconst ourCat = {};\nourCat.name = 'Murray';\nourCat.type = 'domestic short hair';\nYou can read more about the keyword in Chapter 8.\nthis\nMaking objects with class\nA class is a template for objects. Many other languages have the\nidea of classes, but the notion of a class is relatively new to\nJavaScript. Class syntax was introduced into JavaScript in 2015 to\nprovide programmers moving to JavaScript with a more familiar\nway to create objects.\nTo write a class, start with the keyword followed by any\nclass\nname you want. By convention, class names start with an\nuppercase letter. The name of the class is followed by a left curly\nbrace:\nclass Cat {\nAfter the class header, you can (but don't have to) specify a\nconstructor function.\nMethods in classes can be written using method notation. In\nmethod notation, the colon between the name and the value is\nremoved, and the function name and the body of the function are\ncombined. When you write a constructor function, it's usually\nwritten using method notation:\nconstructor(name,type){\nthis.name = name;\nthis.type = type;\n}\nWhen a class (or a constructor function outside a class) is called,\nthe values passed to the function are assigned to properties of\nthe object inside the constructor. That's what's going on with the\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:187>\n", "text": "statements that start with . Inside an object, the\nthis this\nkeyword refers to the object in the same way.\nUnderstanding the keyword is another one of those\nthis\nsomewhat difficult, but essential, keys to understanding\nJavaScript, and you can read much more about in\nthis\nChapter 8.\nListing 7-2 shows a simple example of using a class.\nLISTING 7-2: Using a class\nclass Pet {\nconstructor(name,type){\nthis.name = name;\nthis.type = type;\n}\n}\nconst ourDog = new Pet('Chauncey','AmStaff');\nAt this point, you might wonder why someone would use a class\nwhen just using a constructor function appears to require fewer\ncharacters to do the same thing. Chapter 9 covers classes in\nmuch more detail.\nMaking objects with\nObject.create()\nThe method makes a new object and uses an\nObject.create()\nexisting object as the new object's prototype. Notice that the O in\nis capitalized. That's because is a\nObject.create() create()\nmethod of the class. To use , pass an\nObject Object.create()\nobject to it as an argument, as shown in Listing 7-3.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:188>\n", "text": "LISTING 7-3: Creating an object using\nObject.create()\nconst computer = {memory:'16GB',HD:'8TB'}\nconst laptop = Object.create(computer);\nModifying Objects\nOnce you've created an object, you can access, modify, and add\nnew properties using one of two methods: dot notation or square\nbrackets notation.\nUsing dot notation\nIn dot notation, the name of a property is followed by a period,\nwhich is followed by the name of a property or method. One\nuseful thing about dot notation is that it makes accessing\nproperties and methods of nested objects simple.\nProgrammers commonly create objects that contain multiple\nlevels of nested objects. For example, Listing 7-4 shows an object\nthat contains a property that's an object.\nLISTING 7-4: A object with nested\nproperties\nconst myLocation = {\ncity: {\nid: 2643743,\nname: 'London',\ncoord: {\nlon: -0.1258,\nlat: 51.5085,\n},\ncountry: 'GB',\npopulation: 9820000,\ntimezone: 3600,\n},\n};\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:189>\n", "text": "To get the latitude from the object in Listing 7-4, you can use the\nfollowing line:\nmyLocation.city.coord.lat;\nTo set the value of a property using dot notation, just assign a\nvalue to a property. If the property you assign the value to\ndoesn't exist, it is created in the object.\nUsing square brackets notation\nSquare brackets notation uses square brackets after the object\nname to get and set property values. The name of the property\nbetween the brackets is a string, which means that it can be a\nliteral string or the name of a string variable. Using the object\nfrom Listing 7-4, you can get the city property using the\nfollowing:\nmyLocation['city']\nSquare brackets notation is often used in combination with dot\nnotation to access nested properties, like this:\nmyLocation.city['name']\nYou can also put sets of square brackets together to access\nnested properties:\nmyLocation['city']['name']\nSquare brackets notation is useful when you want to access\nmultiple properties in an object by using the same statement,\nbecause it allows you to use a variable for the property name. For\nexample, in Listing 7-5, a loop is used to get the names of the\nproperties of the web browser's object. Using square\ndocument\nbrackets notation, you can print all the properties without having\nto know what they are in advance.\nLISTING 7-5: Printing out the properties of\nan object\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:190>\n", "text": "for (const property in document) {\nconsole.log(`${property}: ${document[property]}`);\n}\nComparing and Copying\nObjects\nWhen you make a copy of an object by using the assignment\noperator or by passing the object into a function, the value that's\ncopied is the object, not the values inside the object. This is one\nof the most useful concepts to understand about objects (and\narrays): Whereas primitive data types (like strings and numbers)\nare copied by value, objects are copied by reference. To\nunderstand this, let's compare some objects.\nBecause an object is a value that contains other values, when you\ncompare objects using the triple equals operator (===), what's\ncompared is the object, not its values. For example, create the\nfollowing two objects in your JavaScript console:\nconst firstObject = {prop1:'test', prop2:'test2'};\nconst secondObject = {prop1:'test', prop2:'test2'};\nThese two objects appear to be identical, but when you compare\nthem, you see an interesting result:\nfirstObject === secondObject\nWhereas a comparison of two primitive variables returns if\ntrue\nthe values of the variables are the same, a comparison of two\nobjects with identical properties returns . This is because the\nfalse\ntwo objects are not the same object, even though they have the\nsame properties, and those properties have the same values.\nIf you compare properties of these two objects, you'll find that\nthey're compared as the primitives they are:\nfirstObject.prop1 === secondObject.prop1\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:191>\n", "text": "Now that you understand how objects are compared, try copying\nan object. Type the following line into the same JavaScript\nconsole window where you created the and\nfirstObject\nobjects:\nsecondObject\nconst thirdObject = secondObject;\nAs you would expect, this line creates a new constant named\n. Next, try changing the value of :\nthirdObject thirdObject.prop1\nthirdObject.prop1 = 'orange';\nWith that done, you can now type into the\nthirdObject.prop1\nconsole to get back the value you set to it, and you'd expect that\nif you compare to , you'd\nsecondObject.prop1 thirdObject.prop1\nget back . But that's not what happens:\nfalse\nsecondObject.prop1 === thirdObject.prop1\nThis statement returns because is actually a\ntrue thirdObject\nreference to , not to its own object. What do you\nsecondObject\nthink happens if you add a new property to ?\nthirdObject\nthirdObject.prop3 = 'claw hammer';\nIf you check the value of now, you find that,\nthirdObject.prop3\nsure enough, it has been set as you wanted. But what if you\ncheck the value of ? You'll find that\nsecondObject.prop3\n, as if by magic, now has an identical property\nsecondObject\nnamed .\nprop3\nAt this point, you might be suspicious of all objects and you\ndecide to check the value of , like this:\nfirstObject.prop3\nfirstObject.prop3\nBut you'll find that this line returns .\nundefined\nIf you compare and , what's happening\nsecondObject thirdObject\nhere becomes obvious:\nsecondObject === thirdObject\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:192>\n", "text": "This expression returns because is actually\ntrue thirdObject\n\u2014 it's just referencing it using a different name.\nsecondObject\nThe reference nature of objects is extremely useful in JavaScript.\nIt means that you can pass references to objects into a function\nand the function can modify the values in the object. This is\nsomething you do a lot of later in this book.\nHowever, if you're trying to create a new object from an existing\nobject and you don't want the new object to affect the original,\nyou need to do the same thing I show you how to do in the\nSpreading Arrays section of Chapter 6 for making copies of arrays\n\u2014 make a shallow copy. As with arrays, the easiest way to create\na shallow copy of an object is by using the spread operator.\nThe spread operator separates, or spreads, an iterable\nobject into its component parts.\nHere's how you can make a new object, named ,\nfourthObject\nthat starts its life with the same properties as :\nsecondObject\nconst fourthObject = {\u2026secondObject};\nNow if you compare and , you get a\nfourthObject secondObject\nresult of :\nfalse\nfourthObject === secondObject\nThe object named is its own object, free to modify\nfourthObject\nits properties and add and delete properties without affecting\nanything else.\nUnderstanding Prototypes\nEvery object in JavaScript inherits properties and methods from a\nprototype. For example, when you create an array, it inherits from\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:193>\n", "text": ". , in turn inherits properties from\nArray.prototype Array\n.\nObject.prototype\nWhen you create a new object using literal notation, it inherits\nproperties from . When you use a constructor\nObject.prototype\nfunction or a class to create an object, the class or constructor\nbecome the prototype.\nFollow these steps to see how prototypes work:\n1. Open a new window in your browser, and type\nabout:blank into the address bar to open a blank screen.\n2. Open the JavaScript console in this new, blank browser\nwindow, and resize it so that it occupies most of the\nbrowser window.\nYou can also detach the developer tools from the rest of the\nbrowser, if you prefer, by clicking the three dots icon in the\ndeveloper tools window and selecting the Undock into\nSeparate Window option from the Dock Side setting in the\nDeveloper Tools preferences, as shown in Figure 7-1.\n3. Create a new file named in VS Code.\nprototypes.js\nYou'll use this file to write code that you'll copy and paste into\nthe console.\nTo save yourself from having to type everything, you\ncan download all the code from this book from the book's\nwebsite. However, I encourage you to type the code yourself,\nto gain more experience with writing code.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:194>\n", "text": "FIGURE 7-1: Undocking the Developer Tools.\n4. Enter the code from Listing 7-6 into .\nprototypes.js\nLISTING 7-6: A constructor for vehicles\nfunction Vehicle(speed) {\nthis.speed = speed;\nthis.moveForward = function () {\nreturn `Moving forward at ${this.speed}`;\n};\n}\n5. Copy the constructor from and\nVehicles() prototypes.js\npaste it into your JavaScript console.\nYou may need to press Enter to run the code after you paste\nit. After it runs, you see the console return .\nundefined\n6. Enter the following statement into your console\nwindow to create an object type:\nAutomobile\nconst Automobile = new Vehicle(55);\n7. Add properties to your object by entering\nAutomobile\nthe following code in the console:\nAutomobile.wheels = 4;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:195>\n", "text": "Automobile.engine = 'electric';\n8. Type just Automobile into the console to inspect the\nobject.\nAutomobile\nThe result is shown in Figure 7-2. Just as in the real world,\nprogrammers say that is a type of . All\nAutomobile Vehicle\nare , but not all are\nAutomobiles Vehicles Vehicles\n.\nAutomobiles\nFIGURE 7-2:Automobile is a Vehicle.\n9. Type Vehicle into the console to inspect it. Notice that\nwasn't modified by adding properties to\nVehicle\n.\nAutomobile\n10. Create a type of called using the\nAutomobile Truck\nfollowing statement:\nconst Truck = Object.create(Automobile);\n11. Inspect the object.\nTruck\nNotice that, like , it's a (and an , of\nAutomobile Vehicle Object\ncourse). Also notice that it has all the properties of\n.\nAutomobile\n12. Type Truck followed by a period into the console.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:196>\n", "text": "This causes the JavaScript console to display a pop-up window\nlisting all of 's properties. Scroll through this list and\nTruck\nyou'll notice that it has some properties that you defined, as\nwell as some others such as and . The\nvalueOf hasOwnProperty\nproperties that you didn't specifically create are part of the\nobject, and these properties are available to any\nObject\nJavaScript object.\nWhen someone refers to properties, they're talking\nabout all the properties, including properties that have\nfunction values, which are also known as methods.\n13. Add a new property to , called :\nAutomobile doors\nAutomobile.doors = 4;\n14. Inspect .\nTruck\nNotice that now lists as one of its properties.\nTruck doors\n15. Type Truck.hasOwnProperty('doors') into the console.\nYou get a result of .\nfalse\n16. Change the value of :\nTruck.doors\nTruck.doors = 2;\n17. Determine whether is 's own property now:\ndoors Truck\nTruck.hasOwnProperty('doors');\nIt is! What you should take away from this step list is that\nchild objects can access the properties of their parents\n(programmers call it accessing a property in the prototype\nchain), but they can also have their own properties, which\ntakes precedence over (or overrides) the value of the parent's\nproperties.\n18. Add a new property to called :\nTruck maxHaul\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:197>\n", "text": "Truck.maxHaul = '1 ton';\n19. Use the method to verify that is\nhasOwnProperty() maxHaul\n's own property:\nTruck\nTruck.hasOwnProperty('maxHaul');\nAnd, in fact, it is!\nTo summarize the concepts I present in this exercise:\nWhen an object is created from a constructor function, the\nnew object's prototype is the constructor function.\nWhen an object is created from another object, the object it's\ncreated from becomes the new object's prototype.\nObjects can have their own properties, but they also access\nthe properties of their parents.\nIf an object has its own property, it uses the value of that\nproperty rather than the parent's property with the same\nname.\nWhen an object is created from another object,\nprogrammers say that it inherits the properties of its parent,\nand they call this process of inheriting properties inheritance.\nIf you've read this chapter from the start, you should have a good\nbasic understanding of what objects are and how they function.\nWe'll talk more about the inner workings of objects in Chapter 9.\nDeleting Object Properties\nYou can delete a property from an object by using the\ndelete\noperator:\ndelete Truck.doors;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:198>\n", "text": "You can delete a property only if it\u2019s an own property of an\nobject. After you delete an own property of an object, JavaScript\nlooks up the prototype chain to see whether any of the object's\nancestors has that property the next time you try to access that\nproperty.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:199>\n", "text": "Chapter 8\nWriting and Running\nFunctions\nIN THIS CHAPTER\nWriting and naming functions\nPassing arguments to functions\nReturning values from functions\nMaking anonymous functions\nUsing arrow functions\nWriting functions in objects\nUnderstanding this and context\nLinking functions in a chain\n\u201cWhat I do has to be a function of what I can do, not a function\nof what people ask me to do.\u201d\n\u2014TIM BERNERS-LEE\nFunctions are the objects that make your programs do things.\nThey also serve an important organization purpose: Just as\nobjects organize data into reusable containers, functions organize\nstatements into reusable functionality.\nA function is a group of statements that perform a task. In other\nwords, a function is like a smaller program inside your program.\nFunctions usually receive data and then return data based on the\ninput. For example, the function in JavaScript receives a\nString()\nvalue of any data type and returns a string. To use a function, you\nspecify the name of a function followed by parentheses. Between\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:200>\n", "text": "the parentheses, you can, optionally, supply one or more values.\nThe values you specify between the parentheses are called\narguments.\nFor example, in the case of , if you want to convert the\nString()\nnumber 10 to a string, you can do so like this:\nString(10);\nJavaScript has many built-in functions, but you can also create\nyour own JavaScript functions. Here's a simple function to add\ntwo numbers together:\nfunction addNumbers(num1, num2){\nreturn num1 + num2;\n}\nYou can use a custom function the same way you use a built-in\nfunction. To use , just supply it with two numbers,\naddNumbers()\nlike this:\naddNumbers(2, 4);\nBefore I delve much deeper into talking about functions, I need to\ndefine a few important terms:\nCreating a function is called defining a function.\nThe code that defines a function is called the function\ndefinition.\nThe names listed between parentheses in a function definition\nare the function's parameters.\nTelling a function to execute its statements is known as calling\nthe function.\nSupplying arguments to a function when you call it is called\npassing arguments to the function. You might think of it as\npassing a ball in football, except that you're passing data.\nThe values you pass into a function when you call it are called\narguments.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:201>\n", "text": "When you call a function with arguments (the values you pass\nto the function), the parameters (the list of names in the\nfunction declaration) are initialized as variables inside the\nfunction.\nA function inside an object is called a method.\nFunctions: An Introduction\nYou may have seen and used many different functions already in\nthis book. Many of those functions are built into JavaScript.\nJavaScript contains these two types of built-in functions:\nTop-level functions\nMethods of built-in objects\nUsing Top-level functions\nTop-level functions are functions that aren't part of an object. You\ncan define your own top-level functions, and JavaScript has a\nhandful of top-level functions already defined for you. You can\nuse these built-in, top-level functions anywhere in your programs.\nTable 8-1 describes the built-in top-level functions.\nTABLE 8-1 The Built-In Top-Level Functions in JavaScript\nFunction What It Does\nBoolean() Converts a non-Boolean value to Boolean\nNumber() Converts a non-number value to a number\nString() Converts a non-string value to a string\neval() Runs JavaScript code passed to it as a string\nuneval() Creates a string from source code passed to it\nDetermines whether the value passed to it is a finite\nisFinite()\nnumber\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:202>\n", "text": "Function What It Does\nisNaN() Determines whether a value passed to it is NaN\nparseFloat() Converts a string to a floating-point number\nparseInt() Converts a string to an integer\nDecodes a string that has been encoded by\ndecodeURI()\nencodeURI()\nDecodes a string that has been encoded using\ndecodeURIComponent()\nencodeURIComponent()\nReplaces certain characters (for example, spaces,\nquotes, and slashes) in a string with escape sequences\nencodeURI() to create a valid Uniform Resource Identifier, which are\nthe addresses used to locate web pages and other\nresources on the web\nDoes the same thing as encodeURI() (see the preceding\nentry) but encodes the whole string, whereas\nencodeURIComponent()\nencodeURI() ignores the protocol prefix (such as\nhttp://) and the domain name\nUsing methods of built-in objects\nThe objects that make JavaScript work all have methods built into\nthem. For example, when you create a new string, these methods\nbecome available for working with the string. The same goes for\nthe Boolean and number data types, and for arrays and objects.\nIn Chapter 4, you can read about methods like and\nsplit()\nfor working with strings. In reality, the full names of these\ntrim()\nmethods are and\nString.prototype.split()\n. If you've already read the section on\nString.prototype.trim()\nprototypes in Chapter 7, you know why: As with objects you\ncreate from the base prototype in JavaScript, strings that\nObject\nare created from the base prototype have access to\nString\nproperties and methods they inherit.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:203>\n", "text": "Methods that your objects inherit from their parents are called\ninstance methods. They're always called by specifying the object\nname followed by the name of the method followed by\nparentheses \u2014 optionally, containing arguments.\nOther methods of built-in JavaScript objects can't be called in this\nway, because they don't operate on instances of the base object.\nInstead, they operate as utilities provided by the base object.\nThese methods are called static methods.\nAn example of a static method is the method.\nNumber.parseInt()\nYou can't call on a variable or value, like this:\nNumber.parseInt()\nmyString.parseInt() // parseInt() is not a function\nInstead, you pass the number into the method, and\nparseInt()\nthe return value is an integer, like this:\nNumber.parseInt(myString);\nSome of the most common static methods of JavaScript\nbuilt-in objects are duplicates of the global (also known as\ntop-level) functions with the same name. For example,\nis also a global function that does the same thing\nparseInt()\nas calling .\nNumber.parseInt()\nPassing by value\nWhen you call a function using arguments that are primitive data\ntypes (such as string, number, and Boolean), the values you pass\ninto the function are copied. This is called passing by value.\nListing 8-1 shows how passing an argument creates a local\nvariable using the name of the parameter.\nLISTING 8-1: Passing by value\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:204>\n", "text": "const favoriteFood = 'tacos';\nmakeDinner(favoriteFood);\nfunction makeDinner(whatToMake) {\nconsole.log(`I see you want ${whatToMake}.`);\nwhatToMake = 'salad';\nconsole.log(`I've decided to make ${whatToMake} instead.`);\n}\nIn Listing 8-1, the value of is copied to a new\nfavoriteFood\nvariable named when the function is invoked. Because\nwhatToMake\nthis new variable is block scoped, it doesn't exist outside of the\nfunction. Because the value of is passed by value,\nfavoriteFood\nchanging the value of inside the function doesn't\nwhatToMake\naffect . In other words, your favorite food remains\nfavoriteFood\nthe same no matter what the function decides to\nmakeDinner()\ndo.\nPassing by reference\nTechnically, everything in JavaScript is passed by value. However,\nwhen you pass an array or object to a function, remember that\nit's not the values of the object or array that are copied into the\nfunction \u2014 it's the object itself.\nJust as when you make a copy of an object using the operator,\n=\nthe copy of an object passed to a function maintains its link to the\nobject outside the function. The result is that if you change the\nproperties of an object passed to a function, those changes are\nvisible outside the function, as shown in Listing 8-2.\nLISTING 8-2: Passing an object to a\nfunction\nconst user = { username: 'funguy37', password: '123456' };\nconst loginStatus = login(user);\nconsole.log(loginStatus);\nconsole.warn(`The password is now ${user.password}`);\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:205>\n", "text": "function login(userCredentials) {\nif (userCredentials.password === '123456') {\nlet randomString = Math.random().toString(36).slice(-16);\nuserCredentials.password = randomString;\nreturn `Terrible password. Your password has been reset to a random\nstring.`;\n}\nreturn 'Logged In';\n}\nWriting Functions\nA function declaration is made up of the following parts, written in\nthis order:\nThe keyword\nfunction\nThe name of the function\nParentheses, which may contain a list of parameters\nCurly braces surrounding one or more statements\nFunctions can be short and simple, or they can be as large and\ncomplex as you need them to be. A simple function might simply\ncall another function or write some value to the browser window,\nsuch as this one:\nfunction updatePageTitle(title){\ndocument.title = title;\n}\nTry entering this function into your browser console and then call\nit, passing in a string as the title, like this:\nupdatePageTitle(\"Welcome to my web page\");\nIf you look at the title on your browser tab, you'll notice that it\nhas changed to the string you passed to the function. You'll also\nnotice that when you created the function and when you ran the\nfunction, was written to the console.\nundefined\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:206>\n", "text": "Every statement in JavaScript has a return value. If you perform\nan operation such as declaring a function or running a function\nthat doesn't return anything, JavaScript returns the default return\nvalue, .\nundefined\nNaming functions\nThe rules for function names are the same as the rules for\nvariables: They can contain letters, digits, underscores, and dollar\nsigns. As with variable names, it's common to name functions\nusing lower camel case (where the first word in the variable name\nis lowercased and subsequent words are uppercased).\nBecause functions are designed to do something, one simple good\nnaming practice is to name them starting with a verb. For\nexample, the following function names make clear what the\nfunctions do:\nconvertToMp3()\ngetCurrentDate()\ncalculateTotal()\nsignOut()\ngetFormData()\nPassing arguments\nThe names between the parentheses in the function header are\ncalled parameters. A function can have as many parameters as it\nneeds to have, and each one must be separated by a comma.\nIf you find that your function has an extraordinarily large\nnumber of parameters, you might think about how to simplify\nthe function or break it into multiple functions just for the\nsake of making your code more easily readable.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:207>\n", "text": "When you call a function, you substitute values for the names in\nthe parameter list. These values are called arguments. Arguments\nyou pass into a function become variables inside the function with\nthe names of the parameters.\nA function called might start like this:\ngetLocalWeather()\nfunction getLocalWeather(city, state){\nWhen you call a function with arguments, the arguments must be\nspecified in the same order in which the parameters appear in the\nfunction definition.\nUsing rest parameters\nIf you don't know how many arguments will be passed to a\nfunction when you call it, you can use a special parameter called\na rest parameter. The syntax for a rest parameter uses the same\n3-dot operator as when you use spread syntax, which you can\nread about in Chapter 6. A rest parameter causes all remaining\narguments passed to the function to be placed in an array.\nFor example, you might define a function like the following, which\nhas a normal parameter followed by a rest parameter:\nfunction sortList(orderBy,\u2026items){\n\u2026\n}\nTo call this function, you specify a value for followed by\norderBy\nas many additional arguments as needed:\nsortList('alphabetical','James','Robert','John','Michael','David','William');\nInside the function, an array named with six elements is\nlist\ncreated.\nUsing the arguments object\nAnother way to access any number of arguments passed to a\nfunction is to use the object. The object is\narguments arguments\nautomatically created as a variable inside every function created\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:208>\n", "text": "using the keyword. It contains all the arguments passed\nfunction\nto a function.\nThe object resembles an array in how you access it;\narguments\nhowever, it is not actually an array, in that you can't access any of\nthe Array properties and methods except .\nlength\nYou can get the values in an object the same way you\narguments\ncan get values from an array. For example, the code in Listing 8-3\ncreates an HTML numbered list from as many items as you pass\ninto it.\nLISTING 8-3: Creating a numbered list\nfrom any number of arguments\nfunction makeNumberedList() {\nlet numberedList = '<ol>';\nfor (let i = 0; i < arguments.length; i++) {\nnumberedList += `<li>${arguments[i]}</li>`;\n}\nnumberedList += '</ol>';\nreturn numberedList;\n}\nPassing functions as arguments\nAny value can be passed to a function as an argument, including\nother functions. When a function is passed to another function to\nbe invoked by the function it's passed to, the function that's being\npassed is known as a callback function. The function you pass a\ncallback function to is known as the outer function.\nCallback functions are used for adding functionality to functions or\nfor telling the outer function what to do when it completes its\nwork, as shown in Listing 8-4.\nLISTING 8-4: Using a callback function\nfunction greetInSpanish(name){\nreturn `Hola, ${name}`;\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:209>\n", "text": "function getUserName(callback){\nlet firstName = prompt('Enter your first name');\nreturn callback(firstName);\n}\ngetUserName(greetInSpanish);\nSetting default parameters\nFunctions that specify parameters don't need to be called with\nthose parameters. However, if you don't supply an argument for a\nparameter, that parameter will have a value of inside\nundefined\nthe function's body unless you specify a default value.\nTo specify default values for parameters, use the assignment\noperator inside the parameter list, like this:\nfunction greetUser(firstName='Valued', lastName='Customer'){\nalert(`Hello, ${firstName} ${lastName}`);\n}\nWith default parameter values set, this function will alert \"Hello,\nValued Customer\" rather than \"Hello,\" when it's called without\narguments.\nDefault parameters can also be used to eliminate errors that can\nhappen when an argument isn't passed to a function. For\nexample, the function in Listing 8-5 expects an array to be passed\nto it, which it loops over using the method:\nArray.map()\nLISTING 8-5: A function that takes an\narray\nfunction makeUnorderedList(array) {\nlet listItems = array.map(function (element) {\nreturn `<li>${element}</li>`;\n});\nreturn `<ul>${listItems.join('')}</ul>`;\n}\nIf you try to call the function in Listing 8-5 without specifying an\narray, it produces an error, as shown in Figure 8-1.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:210>\n", "text": "FIGURE 8-1: The result of calling a function that requires an array without\npassing an array.\nWhen running a function or a program produces an error,\nprogrammers say that it throws an error.\nYou can eliminate this potential error by specifying a default value\nof an empty array:\nfunction makeUnorderedList(array=[]){\nWith this change, if you call the function without passing an\nargument, it just returns an empty string rather than throwing an\nerror. This isn't a fail-safe method to make this function never\nthrow an error, however. If it's called with a number passed to it,\nfor example, it will still fail. Can you figure out how to prevent an\nerror when a nonarray value is passed to it?\nWriting a function body\nAfter the first line of the function (sometimes called the function\nheader), you can use any combination of other function calls and\nstatements, including additional function definitions. Everything\nafter the function header will be part of the function until you\nclose the function with a closing curly brace.\nThe part of a function between the curly braces is called the body\nof the function. The complete function might\ngetLocalWeather()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:211>\n", "text": "look like this:\nfunction getLocalWeather(postalCode){\nconst weather = `I don't know what the weather is like in ${postalCode}.\nMaybe try looking out the window.`;\nreturn weather;\n}\nReturning data\nMany functions, such as the function, have a\ngetLocalWeather()\nreturn value. To return a value from executing a function, use a\nstatement. The statement inside a function halts\nreturn return\nexecution of the function and returns a value.\nYou can assign the return value to a variable using the\nassignment operator, or you can pass it into another function. For\nexample, here's how you can get the string returned by\n:\ngetLocalWeather()\nlet weather = getLocalWeather('97103');\nUsing a return value as an argument\nIf you specify a function call as an argument to another function,\nthe return value of the inner function is passed to the outer\nfunction:\ndisplayWeatherForecast(getLocalWeather('97103'));\nPassing function calls as arguments can quickly become\nconfusing, so it's more common to write the preceding statement\nusing two statements:\nlet weather = getLocalWeather('97103');\ndisplayWeatherForecast(weather);\nThe function might look like this:\ndisplayWeatherForecast()\nfunction displayWeatherForecast(forecast){\ndocument.getElementById('forecast').innerHTML = `Here's the current weather\nforecast: ${forecast}`;\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:212>\n", "text": "Creating conditional code with return\nBecause halts the execution of a function, it's common to\nreturn\nskip writing an clause in an statement by simply\nelse if/else\nproviding an alternative statement after an statement.\nreturn if\nFor example, if you want to make the function\ngetLocalWeather()\noutput something different when an argument isn't provided, you\ncheck whether has a value of and provide a\npostalCode undefined\ngeneric message, like this:\nfunction getLocalWeather(postalCode) {\nif (postalCode === undefined) {\nreturn `I don't know what the weather is where you are.`;\n}\nreturn `I don't know what the weather is like in ${postalCode}. Maybe try\nlooking out the window.`;\n}\nThe second statement runs only if is not\nreturn postalCode\n.\nundefined\nFunction declaration scope and\nhoisting\nA function declaration can be located anywhere in your program,\nand it can be run from anywhere in its scope. A top-level function\nis one that's not inside of any other block of code. Top-level\nfunctions can be called from anywhere in your program. A\nfunction that's inside another function or block can be called only\nfrom within that function or block.\nYou can also call functions that are defined using function\ndeclarations before the spot where they're defined in the code.\nThis special power of function declarations is called hoisting.\nAnytime a JavaScript compiler reads your code, it looks for\nfunction declarations and then lifts (or hoists) them to the\nbeginning of their scope.\nDeclaring Anonymous functions\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:213>\n", "text": "An anonymous function is a function declaration that doesn't have\na name. Anonymous functions are typically used as callbacks. For\nexample, the following function takes a function as its parameter:\nfunction doSomething(callback){\n\u2026\n}\nThis function can be a named function, but it doesn't need a\nname, because it is being passed as a parameter and will be\nassigned a name ( ) inside the outer function. Here's how\ncallback\nyou can pass an anonymous function to the\ndoSomething()\nfunction:\ndoSomething(function(){console.log('done.');});\nDefining function expressions\nA function expression creates a function by assigning an\nanonymous function to a variable or constant.\nListing 8-6 shows an example of using a function expression to\ndefine a function.\nLISTING 8-6: Defining a function using a\nfunction expression\nconst convertMilesToKM = function (distanceInMiles) {\nconst distanceInKM = distanceInMiles * 1.609;\nreturn distanceInKM;\n};\nconsole.log(convertMilesToKM(5));\nUnlike function declarations, function expressions are not hoisted.\nAs with any variable declaration, a function created using a\nfunction expression can't be used until the expression has been\nrun.\nFunction expressions are useful for functions that should only be\ncreated based on a condition or for functions that are passed as\narguments to other functions.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:214>\n", "text": "For example, in Listing 8-7, the function that calculates the\nduration of a trip is declared based on whether the value of a\nvariable named is .\nwater true\nLISTING 8-7: Conditionally defining a\nfunction using an expression\nfunction getThere(distance) {\nlet estimatedTripDuration;\nif (water === true) {\nconst getSwimTime = function () {\nreturn distance / 2;\n};\nestimatedTripDuration = getSwimTime();\n} else {\nconst getWalkTime = function () {\nreturn distance / 4;\n};\nestimatedTripDuration = getWalkTime();\n}\nreturn estimatedTripDuration;\n}\nlet water = true;\nlet distance = 30;\nconsole.log(`It will take ${getThere(distance)} hours to get there.`);\nFigure 8-2 shows what the code in Listing 8-7 does when you run\nit in the JavaScript console.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:215>\n", "text": "FIGURE 8-2: Creating functions conditionally.\nWriting anonymous functions as\narrow functions\nAnonymous functions can also be written using arrow syntax.\nArrow syntax doesn't use the keyword. Instead, it uses a\nfunction\ncombination of symbols that look like an arrow, , between the\n=>\nparameter list and the body of the function.\nTo see the difference between using the keyword and\nfunction\nusing arrow syntax, it's helpful to see the same function written\nboth ways. Here's a function that randomly selects a movie from\nan array of movie titles, written using the keyword:\nfunction\nconst pickAMovie = function (choices) {\nlet myPick = choices[Math.floor(Math.random() * choices.length)];\nreturn myPick;\n};\nHere's a function that does the same thing as the preceding\nfunction, but written as an arrow function:\nconst pickAMovie = (choices) => {\nlet myPick = choices[Math.floor(Math.random() * choices.length)];\nreturn myPick;\n};\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:216>\n", "text": "Simplifying arrow functions\nArrow functions can be simplified even further under certain\ncircumstances:\nIf an arrow function takes only one parameter, you don't need\nto include the parentheses around the parameter list.\nIf an arrow function contains only a return statement, you can\neliminate the return keyword and the curly braces around the\nfunction body.\nWhen you apply these two rules, the function can\npickAMovie()\nbe simplified to the following:\nconst pickAMovie = choices => choices[Math.floor(Math.random() *\nchoices.length)];\nListing 8-8 shows a simple web application that imports a file\ncontaining an array of 100 movies and then randomly chooses\none and displays its title.\nLISTING 8-8: A random movie picker app\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Random Movie Picker</title>\n<script type=\"text/javascript\" src=\"data/movies.js\"></script>\n</head>\n<body>\n<button onclick=\"displayMovieChoice()\">Choose a Movie</button>\n<h1>You should watch <span id=\"movie-choice\"></span></h1>\n<script>\nconst chooseMovie = (choices) => {\nreturn choices[Math.floor(Math.random() * choices.length)];\n};\nconst displayMovieChoice = () => {\nconst movieChoice = chooseMovie(movies);\ndocument.getElementById('movie-choice').innerHTML =\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:217>\n", "text": "movieChoice.title;\n};\n</script>\n</body>\n</html>\nKnowing the limits of arrow\nfunctions\nArrow functions are a useful shorthand in many cases, such as\nwhen writing a callback function. However, they have limitations\nthat make them unsuitable for certain purposes.\nArrow functions don't have\nthis\nUnlike functions created using the function keyword, arrow\nfunctions don't have their own . Instead, they take on the\nthis\ncontext of the object in which they're created, and their\nthis\nvalue doesn't change when they're called in a different context.\nBecause of this behavior, arrow functions created as methods of\nan object are said to be auto-bound. It's not possible to bind\narrow functions to objects using , , or .\nbind() call() apply()\nSee the section \u201cUnderstanding context and ,\u201d later in\nthis\nthis chapter, to learn about the , , and\nbind() call() apply()\nfunctions.\nArrow functions don't have the arguments\nobject\nJust as with normal functions, you can pass arguments to arrow\nfunctions. However, arrow functions don't have their own\nobject.\narguments\nIf you need to write an arrow function that can take any number\nof arguments, however, you can use a rest parameter, like this:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:218>\n", "text": "const myFunction = (\u2026args) => {\nconsole.log(`The value of the first argument is ${args[0]}`);\n}\nWriting Methods\nA function inside an object is called a method. A method can\naccess and modify the other properties of an object by using the\nkeyword.\nthis\nMethods can be written the same way you write any other\nproperty, as in this example:\nconst myCar = {\nspeed: 0,\ndrive: function (speedLimit) {\nthis.speed = speedLimit;\nconsole.log(`Driving at ${this.speed}mph.`);\n},\n};\nYou can also write methods using method notation, which\ncombines the left and right sides of the colon, like this:\nconst myCar = {\nspeed: 0,\ndrive(speedLimit) {\nthis.speed = speedLimit;\nconsole.log(`Driving at ${this.speed}mph.`);\n},\n};\nTo call the method, append it to the name of its object\ndrive()\nand pass a value to the parameter:\nspeedLimit\nmyCar.drive(35);\nThe method changes the value of and logs a\nmyCar.speed\nmessage to the console. Inside the object, the value of the\nmyCar\nspeed property is now 35, as shown in Figure 8-3.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:219>\n", "text": "FIGURE 8-3: Methods can change the values of properties.\nUnderstanding Context and\nthis\nIn the preceding section, you can see that the value of is the\nthis\nobject that owns the method. Another name for the object that\ndetermines the value of in a function is context.\nthis\nFunctions make it possible to use the same functionality with\nmultiple objects. For example, your program might have\nnumerous objects that can be driven. Rather than define the drive\nfunction as a method of each of these objects, you can define a\nsingle function outside of the objects, as shown in Listing 8-9.\nHowever, this creates a problem, as you'll discover if you try to\ndrive your car now.\nLISTING 8-9: A function without context\nconst myTruck = {\nspeed: 0,\n};\nconst myCar = {\nspeed: 0,\n};\nfunction drive(speedLimit) {\nthis.speed = speedLimit;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:220>\n", "text": "console.log(`Driving at ${this.speed}mph.`);\n}\nIn Listing 8-9, there's no way to tell what to drive. When\ndrive()\nyou call a function that uses the keyword but don't specify\nthis\nan object to call the function on (a context, in other words), the\nkeyword will refer to the global object by default, which is\nthis\nthe object in a browser.\nwindow\nTo solve this problem, you can take one of two approaches:\nPass the object as a parameter to the function.\nSet the context of the function.\nPassing an object to a function\nIn Chapter 7, you see that passing an object to a function creates\na reference to the object (rather than a new object) inside the\nfunction. Knowing this, you can add a parameter to the\ndrive()\nfunction that will be the object that should be driven and then\nupdate the statements that use the keyword to use that\nthis\nreference instead, as shown in Listing 8-10.\nLISTING 8-10: Passing an object to a\nfunction\nconst myTruck = {\nspeed: 0,\n};\nconst myCar = {\nspeed: 0,\n};\nfunction drive(vehicle, speedLimit) {\nvehicle.speed = speedLimit;\nconsole.log(`Driving at ${vehicle.speed}mph.`);\n}\nIf you want to drive your truck, you can call and pass in\ndrive()\nas the first argument, and if you want to drive your car,\nmyTruck\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:221>\n", "text": "you can call the same function but pass as the first\nmyCar\nargument:\ndrive(myCar,55);\ndrive(myTruck,55);\nSetting the context of a function\nAnother way to use the same function with multiple objects is by\nsetting the context of the function (that is, the object it should be\ncalled on) using , , or .\ncall() apply() bind()\nUsing call()\nThe method of function objects takes an object as its first\ncall()\nparameter. When is called on a function, that function runs\ncall()\nin the context of the object passed to . After the first\ncall()\nparameter, accepts any number of additional arguments.\ncall()\nFor example, to call the version of the function in Listing\ndrive()\n8-10 with the context of the object and a value\nmyCar speedLimit\nof 65, you can use the following statement:\ndrive.call(myCar, 65);\nThis statement runs exactly as though you had defined\ndrive()\ninside of and called it using .\nmyCar myCar.drive(65)\nUsing apply()\nThe method works the same as but takes an array\napply() call()\nas its second parameter, which will be passed to the function that\nis applied to.\napply()\nUsing bind()\nThe method works the same as , with a context\nbind() call()\nobject as the first parameter followed by any number of individual\narguments. However, rather than return the result of calling the\nfunction, returns a new function. You can assign this new\nbind()\nfunction to a variable to create a new callable function that\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:222>\n", "text": "includes its context and data. For example, you might want to\ncreate a function called . To do so, you\ndriveMyCarOnTheFreeway()\ncan use , like this:\nbind()\nconst driveMyCarOnTheFreeway = drive.bind(myCar,65);\nWith that done, you can now call the new function and drive on\nthe freeway anytime you like:\ndriveMyCarOnTheFreeway();\nPassing a function from one object\nto another\nLike any other value in JavaScript, functions can be passed as\narguments. This ability makes it easy to share functionality\nbetween objects.\nYet another way to use a function with multiple objects is to pass\nthe function as an argument to a method of an object. For\nexample, you might create methods in and called\nmyCar myTruck\n, which can be used for any sort of operation the vehicle\noperate()\nmight need to do. Then you can call this function and pass in\nanother function for a specific way to operate the vehicle, like\nthis:\nconst myCar = {\nspeed: 0,\noperate(speedLimit, callback) {\ncallback(speedLimit);\nconsole.log(`myCar is driving at ${this.speed}`);\n},\n};\nfunction drive(speed) {\nthis.speed = speed;\nconsole.log(`Start driving at ${this.speed}`);\n}\nmyCar.operate(55, drive);\nHowever, there's a catch. Figure 8-4 shows what happens when\nyou run this code.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:223>\n", "text": "What's happening is that the keyword inside the drive\nthis\nfunction references the global scope (which is the object in\nwindow\na ) in which it exists.\nbrowser\nFIGURE 8-4: Attempting to pass a function to a method.\nFunctions are objects, so passing a function into a method\nand running it isn't the same as creating the function inside\nthe object and running it. You can verify this by typing\ninto the console window.\nwindow.speed\nOne way to fix this problem is to bind the callback function that's\npassed to the method to the context of the object,\noperate() this\nas shown in Listing 8-11.\nLISTING 8-11: Using the same function in\nmultiple objects\nconst myCar = {\nspeed: 0,\noperate(speedLimit, callback) {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:224>\n", "text": "boundCallback = callback.bind(this);\nboundCallback(speedLimit);\nconsole.log(`myCar is driving at ${this.speed}`);\n},\n};\nfunction drive(speed) {\nthis.speed = speed;\nconsole.log(`Driving at ${this.speed}`);\n}\nmyCar.operate(55, drive);\nPassing a function to a child to\nchange the parent\nIn component-based front-end frameworks (like React, Vue, and\nSvelte), it's common to have a subcomponent that receives a\ncallback function from the parent that can be used to modify data\nin the parent component.\nFor example, Listing 8-12 shows a simple object that\nbookstore\ncontains a list of books, a method for displaying the list of books,\nand a method for removing a book from the bookstore's\ninventory.\nLISTING 8-12: A bookstore and a\nshoppingCart\nconst bookstore = {\nbooks: ['Ulysses', 'The Great Gatsby'],\ndisplayBookstore() {\nconst renderTarget = document.getElementById('bookstore');\nconst bookList = this.books.map((book) => `<p>${book}</p>`);\nrenderTarget.innerHTML = bookList.join('');\n},\nremoveBook(title) {\nlet newList = this.books.filter((book) => book != title);\nthis.books = newList;\n},\n};\nbookstore.removeBook('The Great Gatsby');\nYou can see the method in action in Figure 8-5.\nremoveBook()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:225>\n", "text": "FIGURE 8-5: Removing an element from an array.\nOne reason to remove a book from the bookstore's inventory is\nthat someone purchased it. To give people the ability to buy\nbooks, I'll show you how to create a separate object,\n, with a checkout button. When this button is clicked,\nshoppingCart\nyou need to remove the book from the bookstore's inventory.\nThe object is shown in Listing 8-13.\nshoppingCart\nLISTING 8-13: A shopping cart\nconst shoppingCart = {\nitemsInCart: ['The Great Gatsby'],\ndisplayCart(){\nconst renderTarget = document.getElementById('cart');\nconst itemsInCart = this.itemsInCart.map(item=>`<p>${item}</p>`)\nconst checkoutButton = \"<button id='checkout'>Check out</button>\";\nrenderTarget.innerHTML = itemsInCart.join('') + checkoutButton;\n}\n}\nAt this point, the 's method just\nshoppingCart displayCart()\ndisplays a list of books in the cart and a button that doesn't do\nanything. To make the button do something, you need to add an\nevent listener to it that will call a function, as shown in Listing 8-\n14.\nLISTING 8-14: Listening for and handling a\nclick event\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:226>\n", "text": "const shoppingCart = {\nitemsInCart: ['The Great Gatsby'],\nhandleClick() {\n//do something here\n},\ndisplayCart() {\nconst renderTarget = document.getElementById('cart');\nconst itemsInCart = this.itemsInCart.map((item) => `<p>${item}</p>`);\nconst checkoutButton = \"<button id='checkout'>Check out</button>\";\nrenderTarget.innerHTML = itemsInCart + checkoutButton;\ndocument\n.getElementById('checkout')\n.addEventListener('click', () => this.handleClick());\n},\n};\nYou can read all about events and event listeners in Chapter 10.\nRight now, when you click the button, the\nfunction runs, but it doesn't do\nshoppingCart.handleClick()\nanything. What you want it to do is remove the book from the\nbookstore object's inventory property.\nThe first thing you need to do is call\nshoppingCart.displayCart()\nfrom the bookstore and pass the function as a\nremoveBook()\nparameter, as shown in Listing 8-15. Here's the important part,\nthough: Because you want to affect data inside the\nremoveBook()\nbookstore object, rather than inside the , you need\nshoppingCart\nto use to bind the context of the function to .\nbind() bookstore\nYou can do that at the same time as you're passing it to\n.\nshoppingCart.displayCart()\nLISTING 8-15: Calling\nshoppingCart.displayCart() from bookstore\nconst bookstore = {\nbooks: ['Ulysses', 'The Great Gatsby'],\nremoveBook(title) {\nlet newList = this.books.filter((book) => book != title);\nthis.books = newList;\nthis.displayBookstore();\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:227>\n", "text": "},\ndisplayBookstore() {\nconst renderTarget = document.getElementById('bookstore');\nconst bookList = this.books.map((book) => `<p>${book}</p>`);\nrenderTarget.innerHTML = bookList.join('');\nshoppingCart.displayCart(this.removeBook.bind(this));\n},\n};\nFinally, you need to receive the function inside\nremoveBook()\nand use it as the event handler, as\nshoppingCart.displayCart()\nshown in Listing 8-16.\nLISTING 8-16: Using removeBook as the\nevent handler\nconst shoppingCart = {\nitemsInCart: ['The Great Gatsby'],\nhandleClick(removeBook) {\nremoveBook(this.itemsInCart);\n},\ndisplayCart(clickHandler) {\nconst renderTarget = document.getElementById('cart');\nconst itemsInCart = this.itemsInCart.map((item) => `<p>${item}</p>`);\nconst checkoutButton = \"<button id='checkout'>Check out</button>\";\nrenderTarget.innerHTML = itemsInCart.join('') + checkoutButton;\ndocument\n.getElementById('checkout')\n.addEventListener('click', () => this.handleClick(clickHandler));\n},\n};\nTo use this bookstore app, you put it in an HTML document and\ncall , as shown in Listing 8-17:\nbookstore.displayBookstore()\nLISTING 8-17: Displaying the bookstore\nand cart\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:228>\n", "text": "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Amazing JavaScript Bookstore</title>\n</head>\n<body>\n<h1>The Books</h1>\n<div id=\"bookstore\"></div>\n<h1>Your Cart</h1>\n<div id=\"cart\"></div>\n<script>\nconst bookstore = {\nbooks: ['Ulysses', 'The Great Gatsby'],\nremoveBook(title) {\nlet newList = this.books.filter((book) => book != title);\nthis.books = newList;\nthis.displayBookstore();\n},\ndisplayBookstore() {\nconst renderTarget = document.getElementById('bookstore');\nconst bookList = this.books.map((book) => `<p>${book}</p>`);\nrenderTarget.innerHTML = bookList.join('');\nshoppingCart.displayCart(this.removeBook.bind(this));\n},\n};\nconst shoppingCart = {\nitemsInCart: ['The Great Gatsby'],\nhandleClick(removeBook) {\nremoveBook(this.itemsInCart);\n},\ndisplayCart(clickHandler) {\nconst renderTarget = document.getElementById('cart');\nconst itemsInCart = this.itemsInCart.map((item) => `<p>${item}\n</p>`);\nconst checkoutButton = \"<button id='checkout'>Check Out</button>\";\nrenderTarget.innerHTML = itemsInCart.join('') + checkoutButton;\ndocument\n.getElementById('checkout')\n.addEventListener('click', () => this.handleClick(clickHandler));\n},\n};\nbookstore.displayBookstore();\n</script>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:229>\n", "text": "</body>\n</html>\nWhen you run this app in a browser, it displays the bookstore and\nthe cart, as shown in Figure 8-6. When you click the Check Out\nbutton, \"The Great Gatsby\" is removed from the\nbookstore.books\nand then is called again to update\nbookstore.displayBookstore()\nthe browser window with the new list of books, as shown in\nFigure 8-7.\nCan you figure out how to also remove the book from the cart\nwhen you check out?\nFIGURE 8-6: The finished bookstore app.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:230>\n", "text": "FIGURE 8-7: The bookstore, after checkout.\nChaining Functions\nMany of JavaScript's built-in functions can be chained together so\nthat they run sequentially. For example, to convert a string to\nuppercase and then trim white space from the beginning and end,\nyou can use the following statement:\n\" my string. \".toUpperCase().trim();\nThe result of running this statement will be\n'MY STRING'\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:231>\n", "text": "Function chaining works by passing the same object to multiple\nfunctions sequentially (in order, from left to right). Function\nchaining is a design pattern rather than a feature of JavaScript.\nUsing it makes your code more readable and more concise.\nTo create a chainable function, return from a method. The\nthis\nreturn value of one method becomes the input for the next\nmethod. To understand method chaining, it's helpful to see two\nways of doing the same thing. First, here's a series of operations\nperformed using methods of an object named :\nrobot\nlet result = robot.walk();\nlet result2 = robot.talk(result);\nlet result3 = robot.write(result2);\nIn method chaining, each method returns its value, which\nthis\nbecomes the input for the next method in the chain. Here's how\nyou might write the robot object to enable method chaining:\nconst robot = {\ncurrentActivity: undefined,\nwalk() {\nthis.currentActivity = 'walking';\nreturn this;\n},\ntalk() {\nthis.currentActivity = 'talking';\nreturn this;\n},\nwrite() {\nthis.currentActivity = 'writing';\nreturn this;\n},\n};\nTo make the robot walk and then talk and then write, you can\nchain these methods together, like this:\nrobot.walk().talk().write();\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:232>\n", "text": "Chapter 9\nGetting Oriented with Classes\nIN THIS CHAPTER\nHarnessing the power of abstraction and\nencapsulation\nGetting classy with inheritance and polymorphism\nDeriving classes from base classes\nConstructing constructors\nTuning in to static properties and methods\nCalling your parents is\nsuper()\nDeclaring public and private fields\nHoning in on some fine points about arrow functions\n\u201cThey can do without architecture who have no olives nor wines\nin the cellar.\u201d\n\u2014HENRY DAVID THOREAU\nLike constructor functions, classes are templates for objects. At\ntheir core, they're built on prototypes (which you can read about\nin Chapter 6). But their syntax and capabilities go beyond what's\navailable elsewhere in JavaScript. In this chapter, I show you how\nto harness the power of classes.\nThe goal with classes (introduced into JavaScript in 2015) is to\nprovide a syntax for working in JavaScript in an object-oriented\nway. Object-oriented programming is a pattern used in many\nmodern programming languages such as Java and C#. In object-\noriented programming (also known as OOP), the main focus of a\nprogram is its objects and the relationships between them.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:233>\n", "text": "These main concepts in object-oriented programming are\ndescribed next in this chapter:\nEncapsulation\nAbstraction\nInheritance\nPolymorphism\nEncapsulation\nEncapsulation means that each object in a program has its own,\nprivate data (called state), which can only be modified or\naccessed by the object. An object can also have private functions\nthat only it can invoke.\nFor example, the private state of a class called Phone might\ninclude data such as the battery level and whether the display is\non. As the user of the phone, you have no direct access to these\nproperties. You can't execute a statement like\nPhone.batteryLevel\n.\n= 100\nHowever, the phone can be plugged in. You can imagine that\nplugging in a phone is like calling a method. As\nPhone.charge()\nthe phone charges, the phone updates its private\nbatteryLevel\nproperty accordingly.\nAbstraction\nAbstraction means that each object exposes only high-level\nmethods for other objects to be able to work with it. Suppose that\nyou have an object that represents a catalog of products. Other\nobjects don't need to \u201ccare\u201d what happens inside this object \u2014\nthey just need to know that they can call a public method, which\nmight be named , to get the data from the object.\ngetProducts()\nAbstraction is what makes complex systems possible. If you had\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:234>\n", "text": "to understand how to program your phone and how cellular\nnetworks work in order to place a phone call, you'd have a good\nexcuse for not calling your mom. Fortunately, making a phone call\nis easy to do because the technical details have been abstracted\ninto a simple user interface.\nInheritance\nInheritance means that new classes can be created that get\nproperties from other classes. For example, a class named\nAnimal\nmight have a few properties that describe characteristics of an\nanimal. An object created using the class might look like\nAnimal\nthis:\n{\ndomain: 'Eukarya',\nkingdom: 'Animalia',\nstructure: 'multicellular'\n}\nIf you want to make a new class to describe a fish, you can create\na class called that has the same properties as the\nFish Animal\nclass \u2014 a better way, however, is to create the class by\nFish\ninheriting the properties of the class and then adding\nAnimal\nproperties that are specific to fish.\nBy using inheritance to create the class, it becomes possible\nFish\nfor the class to access the methods and data that are\nFish\ncommon to all animals while also having its own properties and\nmethods that are particular to fish (and any classes that inherit\nfrom the class).\nFish\nPolymorphism\nPolymorphism means that objects of various types can be\naccessed via the same interface, and that each type of object can\nprovide its own, independent implementation of this interface.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:235>\n", "text": "For example, if the class defines a method, the\nAnimal move()\nclass can have its own implementation of that will be\nBird move()\nused when you call on an object created using the\nmove() Bird\nclass.\nBase Classes\nThe most basic syntax for creating a class uses the\nclass\nkeyword, followed by a class name, followed by a pair of curly\nbraces, like this:\nclass MyClass {}\nThis class is called a base class because objects created by using\nit don't inherit properties from any other object, other than the\nbase JavaScript object, named .\nObject\nRecognizing that classes aren't\nhoisted\nAlthough the basic syntax for creating a class resembles the\nsyntax for creating functions (minus the parameter list, which has\nbeen moved to the constructor), an important difference between\nclasses and functions is that classes aren't hoisted. If you try to\nuse a class before it's declared, you get an error.\nUsing class expressions\nClasses can also be defined by using expressions. To create a\nclass using an expression, assign the class to a variable or\nconstant. When you use an expression to create a class, the\nname to the right of the keyword is optional. If you do\nclass\ninclude it, however, it's used as the value for a property of the\nobject called :\nname\nconst MyClass = class MyClass{};\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:236>\n", "text": "Making instances of base classes\nTo create an object from a class (also known as an instance of the\nclass), use the keyword followed by the name of the class:\nnew\nconst myObject = new MyClass();\nAs with the constructor function method of creating an object,\ninvoking the name of a class with the keyword causes the\nnew\nclass's constructor function to run. If you don't provide your own\nconstructor function inside a base class, JavaScript runs a default\nconstructor, which looks like this:\nconstructor(){}\nDerived Classes\nA derived class is one that has a parent class it inherits from. To\ncreate a derived class, use the keyword followed by the\nextends\nname of the class the derived class should be based on, like this:\nclass Coffee extends Beverage {}\nThe derived class is how one basic concept of object-oriented\nprogramming \u2014 inheritance \u2014 is implemented. A common way to\ndescribe a derived class is to say \u201cis a.\u201d In this case, is a\nCoffee\n.\nBeverage\nWhen you invoke a derived class that has no constructor but uses\nthe keyword, JavaScript supplies the following default\nnew\nconstructor:\nconstructor(\u2026args) {\nsuper(\u2026args);\n}\nWhat this constructor does is accept any arguments you specified\nwhen you invoked the class. These arguments are spread into\nseparate parameters (using the operator) and passed to\nspread\nthe function.\nsuper()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:237>\n", "text": "The function, used inside a constructor, calls the\nsuper()\nconstructor of the parent class.\nConstructors\nA constructor is a method (always named ) in a\nconstructor()\nclass that runs whenever a class is invoked with and creates\nnew\nan object instance. It's fully possible, and quite common, to write\nclasses without explicitly writing a constructor.\nIf instances of the class need to be initialized with data before\nother methods can be called, however, the way to do this is with\na constructor.\nConstructor functions are written using method notation. The\nname of the function is followed by a parameter list followed by\ncurly braces containing statements, like this:\nclass Beverage {\nconstructor(){\n// your code here\n}\n}\nIf you pass arguments into a class function when you invoke it,\nthose arguments are passed to the constructor function and you\ncan specify parameters in the constructor's parameter list for\nexpected arguments, like this:\nclass Beverage {\nconstructor(size,temperature){\n\u2026\nAs with a constructor function outside of a class, to make the\nparameters available as properties of the new object, you need to\nspecifically assign them to properties of the new object by using\nthe keyword, as shown in Listing 9-1.\nthis\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:238>\n", "text": "LISTING 9-1: Using in a class\nthis\nconstructor\nclass Beverage {\nconstructor(size,temperature) {\nthis.size = size;\nthis.temperature = temperature;\n}\n}\nA constructor function in a derived class must have a call to\nbefore any other statements, passing to it the values with\nsuper()\nwhich you want to initialize the properties of the parent.\nCalling is exactly the same as calling the\nsuper()\nconstructor function of the parent class.\nFor example, Listing 9-2 shows a class that's derived from\nCoffee\nthe class.\nBeverage\nLISTING 9-2: Deriving a class from a base\nclass\nclass Coffee extends Beverage {\nconstructor(size, temperature, hasCaffeine, howYouTakeIt){\nsuper(size, temperature);\nthis.hasCaffeine = hasCaffeine;\nthis.howYouTakeIt = howYouTakeIt;\n}\n}\nTo create a new object from the class, call with\nCoffee Coffee()\nthe keyword and pass in arguments for each of the\nnew\nparameters defined by the constructor:\nconst morningCoffee = new Coffee('64oz', 'hot', true, 'black');\nThe new object looks like this:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:239>\n", "text": "{\nsize: '64oz',\ntemperature: 'hot',\nhasCaffeine: true,\nhowYouTakeIt: 'black'\n}\nBeyond being the place to initialize properties of objects, the class\nconstructor is where you can bind methods to the new object.\nProperties and Methods\nAfter the constructor, you can define as many properties and\nmethods as you like.\nCreating methods in a class\nAlthough the syntax of a class may resemble the syntax of an\nobject literal, they aren't the same. Classes aren't objects, they're\nfunctions that can be used to create objects. To create a method\ninside a class, you can use method notation, the way you would\nuse it inside object literal notation, though the methods have no\ncommas between them.\nFor example, in the class, you can create a method\nBeverage\ncalled , as shown in Listing 9-3.\ndrink()\nLISTING 9-3: Creating a method in a class\nclass Beverage {\nconstructor(size, temperature) {\nthis.size = size;\nthis.temperature = temperature;\n}\ndrink(){\nif (this.temperature !== 'scalding'){\nconsole.log('now drinking');\n}\n}\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:240>\n", "text": "Any class derived from will also have access to the\nBeverage\nmethod.\ndrink()\nOverriding methods in a derived\nclass\nBecause the parent of a derived class is the class's prototype, an\nobject created from a derived class also has access to its parent's\nmethods.\nIf a derived class has its own version of a method defined in its\nparent, the derived class's own method is used.\nFor example, the class may have a method, as\nCoffee drink()\nshown in Listing 9-4.\nLISTING 9-4: Overriding a method in a\nclass\nclass Coffee extends Beverage {\nconstructor(size, temperature, hasCaffeine, howYouTakeIt){\nsuper(size, temperature);\nthis.hasCaffeine = hasCaffeine;\nthis.howYouTakeIt = howYouTakeIt;\n}\ndrink(){\nif (this.temperature != 'scalding') {\nconsole.log('now drinking coffee');\n}\n}\n}\nDefining methods, properties, and\nfields\nProperties created in a class are also known as fields. Fields and\nmethods are both called features of a class, or they can be\nreferred to as members of the class instead.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:241>\n", "text": "The same way that methods in a class are defined without using\nthe keyword, fields in a class are defined without using a\nfunction\n, , or keyword, like this:\nvar let const\nclass MyClass {\npublicField = 'this is a public field';\n}\nIf you define fields of a class using this syntax (called class fields\nsyntax), it's a good practice to first define all class fields in the\nclass, before the constructor \u2014 this strategy helps document your\nclass and keep it tidy, as shown here:\nclass Cat {\npaws = 4;\nsound = 'meow';\nconstructor(name, favoriteToy) {\nthis.name = name;\nthis.favoriteToy = favoriteToy;\n}\n}\nWhen you define members (methods or fields) outside of the\nconstructor, they're added to the instance before the constructor\nruns, which means that you can access them from within the\nconstructor.\nPublic members\nBy default, members of a class are public. Public fields are called\npublic because they can be accessed by code outside of the class.\nPrivate fields, on the other hand, can be accessed only from\nwithin the class. You don't need to do anything special to declare\na public method or field.\nPublic class members exist on every instance of a class you\ncreate. In a derived class, public members that belong to the\nparent class are added when is called \u2014 which is why\nsuper()\nmust always be the first statement in a constructor of a\nsuper()\nderived class.\nPrivate members\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:242>\n", "text": "To make a member of a class private, preface the name of the\nproperty or method with the number sign, , as shown in the\n#\nfollowing snippet. Private members of a class can be used by\nother fields and methods within a class but are invisible to the\nworld outside of the class:\nclass Cat {\n#isSleeping;\npaws = 4;\nsound = 'meow';\nconstructor(name, favoriteToy) {\nthis.name = name;\nthis.favoriteToy = favoriteToy;\n}\n#takeNap(){\nthis.#isSleeping = true;\n}\n}\nAs with public members of a class, private members are added\nwhenever a class is constructed or is called.\nsuper()\nStatic members\nThe keyword creates a method or property that can't be\nstatic\ncalled on instances of the class \u2014 only on the class itself. Static\nmethods are commonly used for utilities, and static properties are\nuseful for caches and other class-level data.\nIn Listing 9-5, is a static property because it needs to be\nspecies\nthe same for every instance of . The static method named\nCat\nis static because it's a utility method. I've bolded the static\nherd()\nmembers in the following listing to make them easier for you to\nfind.\nLISTING 9-5: Creating static members\nclass Cat {\nstatic species = 'Felis catus';\n#isSleeping;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:243>\n", "text": "paws = 4;\nsound = 'meow';\nconstructor(name, favoriteToy) {\nthis.name = name;\nthis.favoriteToy = favoriteToy;\n}\nstatic herd(){\nthrow new Error(`You can't do that.`);\n}\n#takeNap(){\nthis.#isSleeping = true;\n}\n}\nIn the preceding example, both the property and the\nspecies\nmethod are public, which means they can be accessed by\nherd()\nother JavaScript code by using the name of the class followed by\nthe property or method name.\nPrivate fields can be static as well. Private static fields can be\naccessed only within the class where they're defined.\nThe ability to declare public as well as private fields is part\nof encapsulation \u2014 one of the defining patterns of object-\noriented programming, which you can read about at the\nbeginning of this chapter.\nPracticing and Becoming\ncomfortable with Classes\nFully understanding how to use classes takes some time, and\nunderstanding all the ins and outs of various class-related\nkeywords also takes time. Follow these steps to see in action all\nthe various topics you can read about in this chapter:\n1. Open the JavaScript console in your web browser.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:244>\n", "text": "2. Enter the code from Listing 9-6 to create a new class\nthat contains public and private fields as well as static\nfields.\n3. Create two instances of the class:\nCat\nconst cat1 = new Cat('Mr. Furly', 'tinfoil');\nconst cat2 = new Cat('Sparky', 'box');\n4. Call the method on one of the cats:\nplay()\ncat1.play();\n5. Type each object name into the console to see the\nvalues of its properties and methods:\ncat1\ncat2\nYou can see that the instance of the object you called\nCat\non now has its private property set to .\nplay() isSleeping true\nAlso notice that the and objects lack the static\ncat1 cat2\nproperty and the static method , which are\nspecies herd()\ndefined in the class.\n6. Try to access the property from the console:\nisSleeping\ncat1.#isSleeping\nYou get a syntax error.\n7. Access a public property of one of the objects:\ncat\ncat1.paws\nThis step works as you'd expect.\n8. Call the method on the class:\nherd() Cat\nCat.herd()\nThe static method called will run, and you'll see the\nherd()\nerror message (as expected) that you can't herd cats.\n9. Make a derived class from , named :\nCat ShortHair\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:245>\n", "text": "class ShortHair extends Cat {\nfur = 'short';\nconstructor(name, favoriteToy){\nsuper(name, favoriteToy);\n}\n}\n10. Create an instance of :\nShortHair\nconst cat3 = new ShortHair('Murray', 'keyboard');\n11. Check the properties of :\ncat3\ncat3\nYou'll see that contains all the same properties as\ncat3 cat1\nand but also contains a new public property, , as\ncat2 fur\nshown in Figure 9-1.\nLISTING 9-6: Creating a class with public,\nprivate, and static fields\nclass Cat {\nstatic species = 'Felis catus';\n#isSleeping;\npaws = 4;\nsound = 'meow';\nconstructor(name, favoriteToy) {\nthis.name = name;\nthis.favoriteToy = favoriteToy;\n}\nstatic herd() {\nthrow new Error(`You can't do that.`);\n}\nplay() {\nconsole.log(`Playing with ${this.favoriteToy}.`);\nthis.#takeNap();\n}\n#takeNap() {\nthis.#isSleeping = true;\n}\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:246>\n", "text": "FIGURE 9-1: Making a derived class.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:247>\n", "text": "Chapter 10\nMaking Things Happen with\nEvents\nIN THIS CHAPTER\nStepping through the JavaScript runtime model\nRunning through the event loop\nIntroducing the Event object\nAdding event listeners\nDispatching events\nAdding and removing event listeners\nStopping default actions from happening\n\u201cYou have power over your mind \u2014 not outside events. Realize\nthis, and you will find strength.\u201d\n\u2014 MARCUS AURELIUS\nIf you\u2019re read the earlier chapters in this book, you've reached an\nimportant milestone in your JavaScript education. Until this point\nin the book, I have described the JavaScript language itself,\nlargely without considering the environment in which it's running.\nNow it's time to shift to talking about taking JavaScript to the\npeople.\nEvents are things that happen outside of your program, such as a\nmouse button click or an HTML element loading or a timer\nreaching a certain point. In this chapter, I tell you how events\nwork, how to listen for them from within a JavaScript program,\nand how to run functions in response to events.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:248>\n", "text": "Understanding the JavaScript\nRuntime Model\nA programming language's runtime model describes how\nimplementations of the language should run code. In the case of\nJavaScript, the runtime model is implemented in JavaScript\nengines, such as Chrome's V8 engine, Mozilla's SpiderMonkey\nengine, and Apple's JavaScriptCore engine.\nAt a high level, JavaScript's runtime model is made of these three\ncomponents:\nThe stack\nThe heap\nThe queue\nFigure 10-1 shows a visual representation of the JavaScript\nruntime model.\n\u00a9 John Wiley & Sons, Inc.\nFIGURE 10-1: The JavaScript runtime model.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:249>\n", "text": "Stacking function calls\nThe stack is made up of frames. You can think of them as film\nframes. JavaScript processes frames one at a time and then\nmoves on to the next one. Along with the heap, the stack is part\nof the core JavaScript engine (refer to Figure 10-1).\nHeaping objects\nThe heap is an area of memory where objects are stored. Unlike\nthe stack, which is ordered based on first-in-first-out (FIFO), the\nheap is unstructured.\nThe names of the heap and the stack are quite\nappropriate to how they work. For example, when you\nremove your clothes from the dryer, they're in an unordered\nheap. When you stack them, you put them into an order.\nQueuing messages\nEvents, such as the event that happens when you click a button\nin a web page, create messages. Your browser is generating\nhundreds of these event messages all the time in response to\nevery mouse movement, page or image load, keystroke, and\nmany other events. These messages all go into the event queue.\nMost of the messages in the queue just exit it without causing\nanything to happen. But, in some cases, the JavaScript engine\ndetermines a message to be important and takes some action\nbased on it.\nThe Event Loop\nThe event loop is a constantly running process in a JavaScript\nengine that processes messages from the message queue. When\nit finds a message it's interested in, it adds function calls to the\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:250>\n", "text": "stack to handle the event. One reason that a message in the\nqueue might be important is that the current program has created\nan event listener for that event. You can find out how to create\nevent listeners later in this chapter, in the section \u201cListening for\nEvents.\u201d\nJavaScript is single-threaded\nJavaScript can do only one thing at a time. It might seem to you,\nhowever, that it's doing many things simultaneously, because it\ngenerally runs very quickly and because it can handle input and\noutput using events and callbacks.\nEvents and callbacks are the keys to asynchronous\nprogramming, which I tell you about in Chapter 11 of Book 1.\nThey're also key concepts to understand for working with\nNode.js, which I discuss in Book 7.\nMessages run until they're done\nBecause JavaScript is single-threaded, it must deal with messages\none at a time and process each one until it's done. This can lead\nto situations in which a message that takes a long time to process\ncan hold up everything else. This is called blocking.\nIf you've ever visited a web page or run a JavaScript program\nwhere you're unable to click on anything or even scroll in the web\npage and the browser eventually asks you whether you want to\ncontinue waiting, JavaScript is trying to handle a message that's\nblocking execution.\nTo avoid blocking, most event handler functions are short.\nAnother strategy to avoid blocking is to use asynchronous\nfunctions, which hand off execution of code to a process outside\nof the JavaScript engine (such as a networking or data access\nAPI) along with a callback function that will be returned to the\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:251>\n", "text": "stack when the outside process finishes its work (such as getting\ndata, waiting for a timer, or making an HTTP request).\nListening for Events\nFor JavaScript to be able to receive input from users and\ninformation about the world outside of itself, it needs to run in an\nenvironment that can create events. For client-side JavaScript,\nthis environment is most commonly a web browser.\nWeb browsers contain APIs for interacting with the browser\nwindow, web pages, the network, storage, and much more. It's\nby using these APIs that we can write JavaScript programs that\ndo more than just output messages to the console. You can find\nout much more about how web browsers work and about the\nAPIs built into web browsers in Book 2.\nFor a JavaScript program to know what's happening in a web\nbrowser, the program needs to listen for events that are produced\nin the browser. This can be done in three different ways:\nHTML event attributes\nEvent handler properties\nThe method\naddEventListener()\nYou see each of these methods used in JavaScript programming,\nso it's important to know them all. However, only one,\n, is the recommended and best way.\naddEventListener()\nListening with HTML event\nattributes\nHTML's event attributes are attributes that can be added to HTML\nelements to run JavaScript in response to events on those\nelements. For example, the attribute can be added to a\nonclick\nvisible HTML element and will run JavaScript statements or a\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:252>\n", "text": "function when that element is clicked. The following code shows\nhow to use an event attribute:\n<button onclick=\"alert('You clicked the button')\">Click Here</button>\nEvent attributes were introduced into HTML when JavaScript was\nfirst created. In addition to , there are event attributes for\nonclick\nmany other browser events, such as , , ,\nonload onsubmit onkeydown\nand .\nonmouseover\nBecause they're written in your HTML and apply to only one\nelement, event attributes can quickly become difficult to maintain,\nand they violate the separation of concerns rule that says\nJavaScript and HTML should be kept separate.\nBecause there are now superior ways to handle events in HTML,\nthe event attributes are considered obsolete and shouldn't be\nused.\nListening with Event handler\nproperties\nEvent handler properties are properties that are available on built-\nin browser objects that can be used to listen for events. For\nexample, elements have an property that can be used like\nonclick\nthis:\nconst helpButton = document.getElementById('help-button');\nfunction displayHelpWindow(){\nwindow.open('help.html');\n}\nhelpButton.onclick = displayHelpWindow;\nNotice that, unlike the HTML event attributes, event handler\nproperties properly separate JavaScript code from HTML. Also\nunlike event attributes, they take a function, rather than a\nfunction call, as their value.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:253>\n", "text": "A function name without parentheses after it represents\nthe code of the function, a function name with parentheses\nafter it causes the function to be run.\nAlthough using event handler properties is better than using\nevent attributes, they do have their downsides. The biggest\nproblem with event handler properties is that it's impossible to\nuse them to set more than one event of a certain type to an\nelement. Another downside is that each event handler property\ncan be used for only one type of event, and there aren't built-in\nevent handler attributes for every possible event that can happen.\nUsing addEventListener()\nThe method is the newest and best way to\naddEventListener()\ncreate event listeners. It can be called on any instance of an\nobject, and it takes two parameters: the event to listen for and a\ncallback function that should run when the event happens on the\nobject.\nHere's the basic syntax for :\naddEventListener()\nEventTarget.addEventListener('event', callback, options);\nSelecting your event target\nThe event target is the object the event listener should be\nattached to. For example, if you want to detect an event that\nhappens in the browser window (such as the event), you can\nload\nset the event target to . Inside the is the\nwindow window document\nobject, which represents the current HTML page. Inside the\nobject are element nodes, representing the HTML\ndocument\nelements that make up your web page.\nAn event listener usually is applied to a single element, such as a\nbutton or a text input. The most common way to select a single\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:254>\n", "text": "element is by using the method, like\ndocument.getElementById()\nthis:\ndocument.getElementById('submitButton')\nThe value passed to is a string that should\ngetElementById()\nmatch the value of the attribute for an element in your\nid\ndocument.\nSetting addEventListener()'s parameters\nThe first parameter is the name of the event to listen for. Unlike\nwhen you use event attributes or event handler properties, this is\njust the event name, without the prefix.\non\nThe types of events that can be applied to a node depend on the\nnode. Hundreds of different events can be detected by a browser,\nincluding mouse events, touch events, keyboard events, speech\nrecognition events, window scrolling events, and many others.\nTable 10-1 shows some of the more common events that can be\napplied to HTML element nodes.\nTABLE 10-1 Events Supported by All HTML Elements\nEvent \u2026 \u2026 Occurs When This Happens\nabort The loading of a file is aborted.\nchange An element's value has changed since losing and regaining focus.\nclick A mouse button has been clicked on an element.\ndblclick A mouse button has been clicked twice on an element.\ninput The value of an <input> or <textarea> element has changed.\nkeydown A key is pressed.\nkeyup A key is released after being pressed.\nmousedown A mouse button has been pressed.\nmouseenter A mouse pointer is moved onto the element.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:255>\n", "text": "Event \u2026 \u2026 Occurs When This Happens\nmouseleave A mouse pointer is moved off the element.\nmousemove A mouse pointer has moved.\nmouseout A mouse pointer is moved off the element.\nmouseover A mouse pointer is moved onto the element.\nmouseup A mouse button is released.\nmousewheel A wheel button of a mouse is rotated.\nreset A form is reset.\nselect Text has been selected.\nsubmit A form is submitted.\nThe second parameter of is a callback\naddEventListener()\nfunction. Note that this must be either an anonymous function or\nthe name of a function defined outside of the\naddEventListener()\nfunction call. If you add parentheses after the name of the\nfunction, the function is invoked and JavaScript attempts to use\nthe result of invoking the function as the event handler when the\nevent occurs. This is usually a mistake, as shown in the following\ncode example:\nfunction handleClick(){\nalert(`I've been clicked!`);\n}\ndocument.addEventListener('click', handleClick());\nIf you enter this code into your browser's JavaScript console, you\ncan see that the alert happens right away rather than waiting for\na click event.\nIf you remove the parentheses from after the name of the\nfunction, the browser waits until it detects a\nhandleClick() click\nevent anywhere on the current web page before opening the alert\nwindow.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:256>\n", "text": "The third parameter to is an optional options\naddEventListener()\nobject. If you include the options object, it can contain any of the\nfollowing properties:\n: This option is a Boolean value that, when set to ,\ncapture true\ncauses the event to be dispatched on the element the listener\nis registered to before being dispatched to elements beneath it\non the DOM tree. By default, capture is set to , and\nfalse\nthat's almost always what you want to happen.\n: This option is a Boolean value that causes the event\nonce\nlistener to be removed from the element automatically after\nthe first time it's invoked. By default, is set to .\nonce false\n: This option is a Boolean value indicating that the\npassive\ncallback function that handles the event won't call\nto block the default browser event that the\npreventDefault()\nevent normally triggers. By default, this option is .\nfalse\nHowever, setting it to can be used to improve\ntrue\nperformance of a user interface in some cases.\n: The signal option takes an as its value. An\nsignal AbortSignal\nis an object containing an method that,\nAbortSignal abort()\nwhen called, removes the event listener.\nThe method has several advantages over the\naddEventListener()\nother two methods for handling events:\nYou can use it to apply more than one event listener to an\nelement.\nIt works with any node in the DOM, not just on elements.\nIt gives you more control over when it's activated.\nListing 10-1 shows an example of using to\naddEventListener()\ndetect mouse movements in the browser.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:257>\n", "text": "LISTING 10-1: Setting an event listener\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Mouse Tracking</title>\n<script>\nwindow.addEventListener('load', app);\nfunction app() {\nconst trackingArea = document.getElementById('tracking-area');\ntrackingArea.addEventListener('mousemove', onMouseMove);\nfunction onMouseMove(e) {\nsetPosition({ x: e.offsetX, y: e.offsetY });\n}\n}\nfunction setPosition(position) {\nconst { x, y } = position;\nconst positionElement = document.getElementById('current-position');\npositionElement.innerHTML = `x: ${x}; y: ${y}`;\n}\n</script>\n<style>\n#tracking-area {\nwidth: 500px;\nheight: 500px;\nborder: 1px solid black;\n}\n</style>\n</head>\n<body>\n<h1 id=\"current-position\"></h1>\n<div id=\"tracking-area\">\nMove your mouse in here. If it's not working, click inside this box and\ntry again.\n</div>\n</body>\n</html>\nThe program in Listing 10-1 uses two calls to .\naddEventListener()\nThe first one waits for the event on the object. The\nload window\nobject represents the current browser window. The\nwindow load\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:258>\n", "text": "event is emitted after an object loads and is displayed in the\nbrowser. When this event happens, the function is called.\napp()\nListening for the event is necessary to make sure that the\nload\nHTML elements that the rest of the program uses are available in\nthe browser window before the function tries to access\napp()\nthem.\nAnother way to accomplish the same result is to put your\nJavaScript block at the bottom of the HTML document.\nInside the function, the second event listener listens for\napp()\nmouse movements in the element with the of\n<div> ID tracking-\n. When the mouse moves, the function is\narea onMouseMove()\ncalled, which gets the current mouse position and updates the\nvalue of the element with an of .\n<h1> ID current-position\nThe key to how the function works is the\nonMouseMove() Event\nobject.\nThe Event object\nNotice that the function in Listing 10-1 receives a\nonMouseMove()\nparameter called \u2014 this is an event object. An event object is\ne\npassed automatically to event handler callback functions. You can\ngive the event object any name you like inside an event handler\nfunction, but it's most commonly called , , or .\ne evt event\nThe event object contains a wealth of information about the event\nthat happened. To see all the information you can get from the\nevent object, add the following statement inside the\nfunction from Listing 10-1:\nonMouseMove()\nconsole.log(\"event:\", e);\nAfter you add this line and move your mouse, you can see the\nevent objects that are generated logged to the console, as shown\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:259>\n", "text": "in Figure 10-2.\nListening on multiple targets\nAlthough applies an event listener to only a\naddEventListener()\nsingle target, it's possible to use a single\naddEventListener()\nmethod call to detect events on multiple events by using event\nbubbling. Event bubbling is the default method that browsers use\nto detect events on nested elements. Event bubbling refers to the\nfact that when an event happens on a nested node, such as a\nbutton inside a form, the button receives the event first and then\nbubbles up to the elements that contain the node where the\nevent happened.\nTo detect events on multiple nodes, you can apply an event\nlistener to an element that contains those nodes. For example, in\nListing 10-2, the element around the buttons combines\n<div>\nthem into a group. Because a click on any one of the buttons will\nbubble up to the element, you can detect a click on any one\n<div>\nof the buttons by listening for a event on the\nclick <div>\nelement.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:260>\n", "text": "FIGURE 10-2: Viewing the event object.\nLISTING 10-2: Using event bubbling to\ndetect events on multiple elements\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Using Bubbling</title>\n</head>\n<body>\n<div id=\"button-group\">\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:261>\n", "text": "<button>Click Me</button>\n<button>No, Click Me</button>\n</div>\n<script>\ndocument\n.getElementById('button-group')\n.addEventListener('click', () => alert('clicked'));\n</script>\n</body>\n</html>\nDispatching events\nprogrammatically\nNormally, events happen in response to an action outside of your\nprogram, such as input from the browser or the user of the web\npage. Sometimes, however, it's useful to be able to create custom\nevents or dispatch built-in events from within your program itself.\nTo accomplish this, you can use the method.\ndispatchEvent()\nUnlike events fired by the browser, which invoke event\nhandlers asynchronously by using the event loop, events fired\nusing the method invoke event handlers\ndispatchEvent()\nsynchronously.\nTo use , you first have to create an event object\ndispatchEvent()\nto dispatch. To create an event object, use the keyword with\nnew\nthe interface that contains the type of event you want to\nEvent\ndispatch.\nFor example, the interface can be used to create\nMouseEvent\n, , and events, among others. Here's the\nclick mouseup mousedown\ncode to create a simple click event:\nconst clickEvent = new MouseEvent('click');\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:262>\n", "text": "Once you have the event, call on an event\nclick dispatchEvent()\ntarget and pass it the event object you want to dispatch:\ndocument.getElementById('my-button').dispatchEvent(clickEvent);\nIf an event listener is registered for that event on the event\ntarget, it will be handled.\nListing 10-3 shows how you can use to fire a\ndispatchEvent()\nevent on an element.\nfocus <input>\nLISTING 10-3: Firing a built-in event\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Document</title>\n</head>\n<body>\n<input id=\"test-text\" type=\"text\" value=\"this is a test\"/>\n<script>\nconst focusEvent = new Event('focus');\nconst testInput = document.getElementById('test-text');\ntestInput.addEventListener('focus', (e) => {\nconsole.log(`${e.target.value}`);\n});\ntestInput.dispatchEvent(focusEvent);\n</script>\n</body>\n</html>\nIf you run Listing 10-3 in a browser, you see that the event\nlistener runs and logs the value of the input to the console. You\nmight also notice that the element isn't highlighted. If you\ninput\nclick your mouse into the element, however, the border of\n<input>\nthe element becomes bold to indicate that the element currently\nis active. If you add the following code to the event listener\ncallback, you get a clue about what's going on:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:263>\n", "text": "console.log(`The active element is: ${document.activeElement.id}`);\nWhen you refresh the page with this statement included, you see\nthe following output in the console:\nthis is a test\nThe active element is:\nIf you click on the input element, the event listener fires again\nand the following text is added to the console:\nthis is a test\nThe active element is: test-text\nBoth the programmatically fired event and the event that resulted\nfrom clicking on the element caused the event listener to run, but\nonly clicking on the event actually changed the state of the input\nelement from unfocused to focused. This is because events are\njust the messengers. They don't do anything by themselves.\nTriggering built-in events\nIf you want an event fired with to do something,\ndispatchEvent()\nyou have to tell it what to do in the event handler function. Try\nadding the following line before the console.log statements in the\ncallback function in Listing 10-3:\naddEventListener()\ntestInput.focus();\nNow, when you look at the console, you see the following output:\nthis is a test\nThe active element is: test-text\nthis is a test\nThe active element is: test-text\nCan you figure out why the message was printed twice? The\nmethod of an element actually gives that element focus\nfocus()\nand dispatches the focus event. So, by using and\ndispatchEvent()\nthen calling , you created two events.\nfocus() focus\nCreating and triggering custom events\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:264>\n", "text": "The method can be used to dispatch custom\ndispatchEvent()\nevents containing data as well. To pass data with an event, pass\nan object to the second parameter of the event interface\ncontaining a property called .\ndetail\nFor example, you might want to create an event that passes a\ndate object to the event listener when it's clicked, as in the\nfollowing example:\nconst event = new CustomEvent('stampedClick', {detail: new Date()});\nYou can then access the detail property in the event handler\ncallback:\ntestInput.addEventListener('stampedClick', (e) => {\nconsole.log(`Clicked at`, e.detail);\n});\nRemoving event listeners\nTo remove an event listener, use the\nremoveEventListener()\nmethod. To use , pass it the type of event\nremoveEventListener()\nand the listener you want to remove.\nIf you're going to be using , you need to\nremoveEventListener()\ncreate the event handler function outside of the\nmethod so that you can pass it to both\naddEventListener()\nand :\naddEventListener() removeEventListener()\nconst handleClick = function(e){\nconsole.log('click handled');\n}\nmyButton.addEventListener('click', handleClick);\nmyButton.removeEventListener('click', handleClick);\nPreventing default actions\nSome elements have default actions that happen when certain\nevents are fired. For example, the element submits a form\n<form>\nusing HTTP when the event fires. If you don't want the\nsubmit\ndefault events to happen (as is often the case with the\n<form>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:265>\n", "text": "element's default action), you can use the\npreventDefault()\nmethod inside your event handler:\ne.preventDefault();\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:266>\n", "text": "Chapter 11\nWriting Asynchronous\nJavaScript\nIN THIS CHAPTER\nMultitasking with Asynchronous JavaScript\nMaking promises you can keep\nPutting it all together with AJAX\nFetching data\nSimplifying promises with async and await\nUnderstanding CORS\nWorking with JSON\n\u201cYour mind will answer most questions if you learn to relax and\nwait for the answer.\u201d\n\u2014WILLIAM S. BURROUGHS\nThere's no getting around the fact that everything a computer\nprogram does takes time. Some actions, like declaring a variable\nor performing a simple calculation, take such a small amount of\ntime that the action seems instantaneous. But when programs\nstart to involve network requests, database access, and accessing\nresources outside of the web browser, wait times can start to add\nup.\nUnderstanding Asynchronous\nJavaScript\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:267>\n", "text": "Asynchronous programming is a technique that allows JavaScript\nto start a process and then continue to run the program while it\nwaits for the result. It might seem confusing that JavaScript is\nsingle-threaded but also has a way to do asynchronous\nprogramming. To understand, it's helpful to think about\nasynchronous code in terms of an ordinary human activity such as\nwashing your clothes.\nWhen you wash your clothes by hand, you have to stop\neverything else you're doing until the clothes are clean. If you use\na washing machine, you can turn it on and then go do something\nelse. When the washing cycle is complete, the machine alerts you\nand you can move the laundry to the dryer and then get back to\nwork or finish your lunch.\nAsynchronous JavaScript works the same way.\nReading synchronous code\nBefore Chapter 10 in Book 1, all the JavaScript examples I show\nyou run synchronously. In synchronous programming, one\nstatement runs, followed by the next statement, and so on until\nthe program is finished running or is stopped.\nListing 11-1 shows an example of a synchronous program.\nLISTING 11-1: A synchronous program\nfunction count(maxNumber) {\nlet i = 0;\nwhile (i < maxNumber) {\nconsole.log(i);\ni++;\n}\n}\ncount(1000);\nNotice that even though the program in Listing 11-1 contains a\nloop and a function, you can still follow the execution of the code\nstep-by-step and know the exact order in which statements will\nbe executed.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:268>\n", "text": "Synchronous programming is easy to understand, and there's\nnothing inherently bad about it. In fact, synchronous code is a\nnecessary part of every JavaScript program.\nProblems with synchronous code occur when a process takes a\nlong time to complete. Because JavaScript is single-threaded,\nstatements that take a long time to execute block anything else\nfrom happening. The user of such a program perceives that the\nprogram is unresponsive.\nEvents to the rescue\nEvent handlers provide JavaScript with a way to do asynchronous\nprogramming. When you use , you tell\naddEventListener()\nJavaScript to do something whenever it detects a certain type of\nevent. Without being able to create event listeners, any type of\nevent would have to happen in a particular order, and modern\nJavaScript user interfaces would be impossible.\nConsider, for example, the synchronous user interface in Listing\n11-2.\nLISTING 11-2: A synchronous JavaScript\nuser interface\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Login Form</title>\n<script>\nalert('Welcome to the login screen');\nconst username = prompt('Enter your username:');\nconst password = prompt('Enter your password:');\nalert('Click OK to continue logging in');\ndoLogin();\nfunction doLogin() {\nalert(`logging in ${username}\u2026`);\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:269>\n", "text": "}\n</script>\n</head>\n<body></body>\n</html>\nIn the synchronous login form, the data entry and messages are\ndone using and . Both of these methods are\nalert() prompt()\nsynchronous. Everything in your program stops and you can't use\nthe browser while they wait for input.\nNow consider the asynchronous version of this program, shown in\nListing 11-3.\nLISTING 11-3: An asynchronous JavaScript\nuser interface\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Login Form</title>\n</head>\n<body>\n<h1 id=\"status\"></h1>\n<label\n>Username\n<input id=\"username\" type=\"text\"/>\n</label>\n<label\n>Password\n<input id=\"password\" type=\"password\"/>\n</label>\n<button id=\"login\">Log In</button>\n<script>\nconst username = document.getElementById('username');\nconst password = document.getElementById('password');\nconst loginBtn = document.getElementById('login');\nconst statusMsg = document.getElementById('status');\nloginBtn.addEventListener('click', doLogin);\nfunction doLogin() {\nstatusMsg.innerHTML = `logging in ${username.value}\u2026`;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:270>\n", "text": "}\n</script>\n</body>\n</html>\nOn the asynchronous login form, you don't need to enter your\nusername or password in a certain order, and the rest of the\nprogram (if there were more JavaScript in this example) can\ncontinue to run at the same time.\nCalling you back\nThe function in Listing 11-3 is passed to\ndoLogin()\nas a callback function.\naddEventListener()\nA callback function is a function passed to another\nfunction that will be called at a later time. In the case of\n, the callback function is called when the\naddEventListener()\nevent listener detects an event.\nCallback functions are one way to write asynchronous code, but\nthey do present some problems when you need to complete a\nseries of steps instead of just one action.\nFor example, consider the following series of steps:\n1. When the user clicks the button, start the login process.\n2. When the login is finished, check to see whether it was\nsuccessful.\n3. If it was successful, load the members-only screen.\n4. When the members screen finishes loading, display it.\n5. If the login wasn't successful, show an error message.\nBecause each of the steps in this process can't be done until\nsome condition is met (such as the button being clicked or the\nlogin process finishing), you need to pass the functions that\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:271>\n", "text": "perform each of these steps as callbacks by nesting the callbacks,\nas shown in Listing 11-4.\nLISTING 11-4: Nested callbacks\nsendLoginData(\nargs,\nfunction (result) {\nlogIn(\nresult,\nfunction (result) {\nloadPage(\nresult,\nfunction () {\nconsole.log(`result: ${result}`);\n},\nfailureCallback\n);\n},\nfailureCallback\n);\n},\nfailureCallback\n);\nloginBtn.addEventListener('click', sendLoginData);\nThe code in Listing 11-4 is greatly simplified, but you can see that\nthe function has multiple levels of nested function. This\ndoLogin()\ntype of code is difficult to read and debug. Complex programs\nwritten using callbacks can have many more levels of nested\nfunctions. Because of the way the nested callbacks form a triangle\n(if you look at it sideways), nested callbacks have been\nnicknamed the Pyramid of Doom or the Christmas Tree.\nMaking Promises\nA promise is an object (created from JavaScript's built-in Promise\ninterface) that represents the result of an asynchronous\noperation. A promise lets you work with the result of an\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:272>\n", "text": "asynchronous operation as though it were synchronous and\nwithout complex nesting of callbacks.\nPromises in JavaScript work like promises in real life \u2014 for\nexample, you run a restaurant and a customer promises to pay\nyou Tuesday for a hamburger you give him today.\nWhen the promise is made, the result of the promise is unknown.\nThe only thing you know is that the person will eventually keep\nthe promise or not keep it. In programming, we say that there are\nthree possible states for the promise:\nPending: The promise has been made, but the outcome is\nuncertain.\nFulfilled: The promise was kept, and the customer paid you\non Tuesday.\nRejected: The promise wasn't kept.\nPromises still use callback functions, but rather than using nesting\nto pass a value from one finished task to the next, they use a\npromise chain. For example, the nested callbacks from Listing 11-\n4 can be rewritten with promises, as shown in Listing 11-5.\nLISTING 11-5: Creating a promise chain\ndoLogin()\n.then((result) => sendLoginData(result))\n.then((result1) => logIn(result1))\n.then((result2) => loadPage(result2))\n.then((result3) => {\nconsole.log(`final result: ${result3}`);\n})\n.catch(failureCallback);\nThese are the important things to know about using Promises:\nEach function in a callback chain must return a promise.\nThe function is actually a type of event handler that\nthen()\nexecutes the function passed to it when the previous function\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:273>\n", "text": "in the chain returns.\nThe handler runs only when one of the steps in the\ncatch()\nchain fails.\nWriting promises\nTo create a basic promise, use the keyword with the\nnew Promise\nconstructor. The constructor takes a callback function as\nPromise\nits argument. This callback function takes two callback function\narguments: and :\nresolve reject\nlet myPromise = new Promise((resolve,reject) => {\nsomeAsynchronousFunction(function(){\nresolve(\"Success!\");\n});\n});\nOnce you've created a promise, you can chain it with other\npromises using :\nthen()\nmyPromise().then((result) => {\n// do something with the result\n});\nListing 11-6 shows a program that uses a promise and the\nmethod to load text from a web server and then\nXMLHttpRequest()\ndisplay it.\nLISTING 11-6: Using a promise to load\ndata with\nXMLHttpRequest()\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Document</title>\n</head>\n<body>\n<div id=\"text-display-area\"></div>\n<script>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:274>\n", "text": "function bookLoad(url) {\nreturn new Promise(function (resolve, reject) {\nlet request = new XMLHttpRequest();\nrequest.open('GET', url);\nrequest.onload = function () {\nif (request.status === 200) {\nresolve(request.response);\n} else {\nreject(\nError(`The text couldn't be loaded: ${request.statusText}`)\n);\n}\n};\nrequest.onerror = function () {\nreject(Error('There was a network error.'));\n};\nrequest.send();\n});\n}\nconst displayArea = document.getElementById('text-display-area');\nbookLoad('https://www.gutenberg.org/files/2701/2701-0.txt').then(\nfunction (response) {\ndisplayArea.innerText = response;\n},\nfunction (Error) {\nconsole.log(Error);\n}\n);\n</script>\n</body>\n</html>\nIf you try to run the program in Listing 11-6 in your browser, you\nget an error in the console that looks something like Figure 11-1.\nFIGURE 11-1: The error that's generated when running Listing 11-6.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:275>\n", "text": "What's happening here is that your browser is keeping your\nprogram from accessing the data from the remote server. This is a\nsecurity restriction known as cross-origin resource policy, or\nCORS. I describe this policy later in this chapter, in the section\n\u201cMaking requests with CORS.\u201d\nFollow these steps to modify the code in Listing 11-6 to load data\nin a way that won't cause an error:\n1. Visit and\nhttps://www.gutenberg.org/files/2701/2701-0.txt\ncopy the text or save the file into a new file named\n.\nmobydick.txt\nPlace it in the same directory as your html file containing\nListing 11-6.\n2. Locate the call to near the end of the code\nbookLoad()\nfrom Listing 11-6 and change the remote URL to just\nmobydick.txt.\nThis way, it will be loaded from your computer instead of\ntrying to make a request to an outside web server.\n3. Right-click the HTML file in VS Code and choose Open\nin Live Server from the menu.\nA browser window opens and the script runs. Once\nis loaded, the promise returns successfully and\nmobydick.txt\nthe text is displayed, as shown in Figure 11-2.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:276>\n", "text": "FIGURE 11-2: Loading and displaying a local file.\nMost of the time, you won't need to write functions that\ncreate promises. Instead, you'll write functions that make use\nof methods defined by asynchronous APIs built into web\nbrowsers or Node.js.\nIntroducing async functions\nPromises and promise chains are a great improvement over\nnested callbacks in terms of readability, but there's a better way\nto write asynchronous code: async functions.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:277>\n", "text": "To write an async function, prefix the name of the function with\nthe keyword. Once you do that, you can write expressions\nasync\nusing the keyword inside the function. Here's what using\nawait\nasync / await looks like:\nasync function getData (){\nconst response = await fetch('http://www.example.com/data');\nreturn response;\n}\nIf you want to run asynchronous operations in a sequence, the\nway you would with nested callbacks or a promise chain, you just\nwrite additional expressions. Each expression waits\nawait await\nfor the asynchronous operation to resolve before allowing the\nnext expression to proceed, as in this example:\nasync function getData (){\nconst response = await fetch('http://www.example.com/data');\nconst response2 = await processData(response);\nreturn response2;\n}\nBehind the scenes, async functions use promises. The\nawait\nkeyword is essentially a callback, and the statement\n.then return\nin an async function is the final link in a promise chain. Async\nfunctions always return a promise.\nAsync functions make writing asynchronous code as easy and\nstraightforward as writing synchronous code. Once you become\ncomfortable with async functions, you'll want to start rewriting\nanything that uses nested callbacks or promises. The next two\nsections show you how to do that.\nConverting nested callbacks to async\nfunctions\nThough newer APIs generally return promises, many common\nAPIs still use callbacks. For example, the function\nsetTimeout()\ncauses a browser to wait for a certain number of milliseconds\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:278>\n", "text": "before it invokes a callback. Here's an example of using\n:\nsetTimeout()\nsetTimeout(() => console.log('done!'), 1000);\nThis statement waits 1 second (1000 milliseconds) before\ninvoking an arrow function that will log the word done to the\nconsole. Granted, it's not an exciting program, but because\nruns asynchronously, if you want to do something\nsetTimeout()\nelse after the message is logged to the console, you need to nest\ncallbacks inside the callback, as shown in Listing 11-7.\nLISTING 11-7: Nested setTimeout calls\nfunction doProcessing() {\nvar timeout;\ntimeout = setTimeout(function () {\nconsole.log('doing first thing');\ntimeout = setTimeout(function () {\nconsole.log('step 2');\ntimeout = setTimeout(function () {\nconsole.log('step 3');\nsetTimeout(function () {\nconsole.log('last thing!');\n}, 300);\n}, 1000);\n}, 2500);\n}, 3000);\n}\ndoProcessing();\nFunctions that were written to accept callbacks present a problem\nwhen you're trying to use them with async/await: They don't\nreturn promises. Because async/await is an abstraction of\npromises, it seems that libraries built using callbacks would\nnecessarily crush your dreams of switching entirely to using async\nfunctions.\nHowever, all hope is not lost, because you can \u201cpromisify\u201d\ncallback functions!\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:279>\n", "text": "To convert the function from Listing 11-7 to\ndoProcessing()\npromises, you can create a promisified version of .\nsetTimeout()\nTo do this, wrap the Promise constructor in a function. The\nPromise constructor gets the arguments and passes them to the\ncallback, as shown here:\nconst promisifiedSetTimeout = function (ms) {\nreturn new Promise(function (res) {\nreturn setTimeout(res, ms);\n});\n};\nWith this new function, you can rewrite\npromisifiedSetTimeout()\nthe function using async/await, as shown in Listing\ngetSquare()\n11-8.\nLISTING 11-8: Rewriting doProcessing()\nusing async/await\nasync function doProcessingAsync() {\nawait promisifiedSetTimeout(3000);\nconsole.log('doing first thing');\nawait promisifiedSetTimeout(2500);\nconsole.log('step 2');\nawait promisifiedSetTimeout(1000);\nconsole.log('step 3');\nawait promisifiedSetTimeout(300);\nconsole.log('last thing');\n}\ndoProcessingAsync();\nListing 11-7 and Listing 11-8 produce the same result.\nWhich one do you prefer, in terms of readability and ease of\nuse?\nConverting promise chains to async\nfunctions\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:280>\n", "text": "Converting a promise chain to an async function is simply a\nmatter of converting the functions to expressions and\n.then await\nreplacing the function with a try/catch block. I tell you\n.catch()\nmore about try/catch in the \u201cHandling errors with async/await\u201d\nsection in this chapter and in Chapter 7 of Book 7. Listing 11-9\nshows the function from Listing 11-7 rewritten to use\nloadBook()\nasync/await.\nLISTING 11-9: Replacing a promise chain\nwith an async function\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Read a book</title>\n</head>\n<body>\n<div id=\"text-display-area\"></div>\n<script>\nconst displayArea = document.getElementById('text-display-area');\nasync function openBook() {\nconst bookText = await bookLoad('mobydick.txt');\ndisplayArea.innerText = bookText;\n}\nfunction bookLoad(url) {\nreturn new Promise(function (resolve, reject) {\nlet request = new XMLHttpRequest();\nrequest.open('GET', url);\nrequest.onload = function () {\nif (request.status === 200) {\nresolve(request.response);\n} else {\nreject(\nError(`The text couldn't be loaded: ${request.statusText}`)\n);\n}\n};\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:281>\n", "text": "request.onerror = function () {\nreject(Error('There was a network error.'));\n};\nrequest.send();\n});\n}\nopenBook();\n</script>\n</body>\n</html>\nHandling errors with async/await\nUnlike with promise chains, there's no catch function for async\nfunctions. Instead, you can use a try/catch statement \u2014 it's made\nup of a block and either a block, a block, or\ntry catch finally\nboth a block and a block. Here's the syntax:\ncatch finally\ntry {\n// try to do something\n} catch(e) {\n// do something with e, which is an Error object\n} finally {\n// something to do whether successful or not\n}\nIn an async function, put the expressions in a block,\nawait try\nand put error reporting or error handling code in the block,\ncatch\nas shown here:\nasync function openBook() {\ntry {\nconst bookText = await bookLoad('mobydick.txt');\ndisplayArea.innerText = bookText;\n} catch(e) {\ndisplayArea.innerText = e;\n}\nIn this example, when the file is loaded and successfully\ndisplayed, the block is skipped. If the promise returned by\ncatch\nis rejected, the error is displayed.\nbookLoad()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:282>\n", "text": "Using AJAX\nAJAX stands for asynchronous JavaScript and XML \u2014 the\ntechnique that makes dynamic JavaScript user interfaces possible\nin web browsers. These days (and for most of the time JavaScript\nprogrammers have been using this acronym), the primary way it\nhas been used is with JSON data (which I describe shortly) rather\nthan XML. So a more appropriate name for AJAX would be AJAJ.\nAJAX uses asynchronous APIs along with the Document Object\nModel (DOM) to enable the modern web application experience.\nThese are some of the features that AJAX enables:\nUpdating only part of a page\nReceiving and sending live data\nInfinitely scrolling user interfaces\nAdding forms with autocomplete capabilities\nIncorporating Like buttons\nThe two features that make AJAX possible are asynchronous data\nand DOM manipulation (which is covered extensively in Book 2).\nFor the rest of this chapter, I talk about the techniques and APIs\nthat are used for accessing data asynchronously today.\nGetting data with the Fetch API\nThe Fetch API, which is a more modern and easy way to access\nfiles and the HTTP pipeline, was first introduced in 2015 as a\nreplacement for (which I describe earlier in this\nXMLHttpRequest()\nchapters). The Fetch API was never adopted by Internet Explorer,\nhowever, so using it always required providing a backup method\n(what we call a polyfill) for browsers that didn't support it.\nNow that Microsoft has officially discontinued support for Internet\nExplorer (as of June 15, 2022), the Fetch API is supported by\nevery current web browser.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:283>\n", "text": "A polyfill is a piece of code that provides replicas of\nmodern functionality (using JavaScript) for features that are\nunsupported in a browser. Polyfills allow you, as the\ndeveloper, to write code as though the feature is supported\nby every browser. The goal is for all browsers to support the\nsame core standards and features, but until that point is\nreached, some types of polyfills will be necessary.\nGetting a response with fetch()\nThe most basic form of using the Fetch API is to provide the\nmethod with a path to a resource (such as a file or a data\nfetch()\nstream), like this:\nfetch('myfile.json');\nThe method returns a promise that resolves to a\nfetch() Response\nobject.\nParsing the Response\nA object represents a response to a request made using\nResponse\nthe Fetch API. To see an example of a object, type the\nResponse\nfollowing statement into your browser's JavaScript console:\nconst response = await fetch('https://api.github.com/orgs/facebook');\nThis statement fetches information about Facebook's GitHub\nrepositories.\nIf for some reason this URL doesn't exist in the future, you\ncan use this same scheme to find information about any\npublic repositories on GitHub.\nAfter you fetch the data from GitHub, you can type the name of\nthe new constant you created into the console to see its value.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:284>\n", "text": "You see that the response has a value that's a object and\nPromise\nthat the promise has been fulfilled, as shown in Figure 11-3.\nFIGURE 11-3: Promise, fulfilled.\nIf you expand the and look at the , you can see\nPromise Prototype\nthat a has a number of properties and methods. The\nResponse\nproperty of the Response object that contains the data returned\nby the method is the property.\nfetch() body\nBut, if you expand the property, you can see that it doesn't\nbody\nseem to contain data you can read. Instead, it tells you that the\nbody is a . A stream works similarly to how\nReadableStream\nstreaming video or audio works. It's not actually a video or audio\nfile itself, but the stream of data can be assembled into video or\naudio with some parsing. In the same way, you need to do some\nparsing to convert the response's property to data you can\nbody\nwork with in your programs.\nFortunately, the object provides methods for parsing the\nResponse\nresponse body easily. The method you use to parse this stream\nretrieved from GitHub is the method. The method\njson() json()\nreturns a that resolves to the result of parsing the body\nPromise\nstream as data.\njson()\nI tell you what JSON data is shortly.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:285>\n", "text": "In the console window, use the method on the\njson() Response\nobject returned by :\nfetch()\nconst data = await response.json();\nNow, if you type data into the console, you see that the response\nbody has been converted into a JavaScript object, as shown in\nFigure 11-4.\nWorking with this object is now just like working with any other\nJavaScript object.\nFIGURE 11-4: Converting a Response body to an object.\nCalling other Response methods\nThe method of the object returned by is\njson() Response fetch()\nthe most frequently used method. However, several other useful\nmethods are provided by the object.\nResponse\nResponse.blob()\nIf the content returned by the server is file data (such as a video,\na PDF file, or an image, for example) use the method to\nblob()\nconvert the ReadableStream returned by the server into a binary\nfile. Like the other Response methods that convert the response\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:286>\n", "text": "to a different type of data, returns a promise, so it must\nblob()\nbe called asynchronously, either as part of a promise chain or by\nusing the keyword inside an async function.\nawait\nBlob is the acronym for binary large object.\nResponse.text()\nThe method returns a promise that resolves to a text\ntext()\nrepresentation of the body.\nHandling fetch() errors\nA promise is only rejected if a network error occurs.\nfetch()\nHowever, many other types of errors can happen in an HTTP\nrequest that are important to detect and handle. If the problem\nwith the request doesn't have to do with a problem like the client\nlacking Internet access, for example, the promise still resolves.\nTo detect and handle errors that happen with a request,\nfetch()\nyou can check the value or the response object's status property\nfor a value of . A status of indicates that the request was\n200 200\nsuccessful.\nIn fact, anything between and indicates a\n200 299\nsuccessful request, but, in practice, the only success status\ncodes you're likely to ever see are (which indicates that\n200\nthe request succeeded) and (which indicates that the\n201\nrequest succeeded and a new resource was created as a\nresult).\nListing 11-10 shows how to capture both network errors and\nHTTP errors that happen with .\nfetch()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:287>\n", "text": "LISTING 11-10: Catching errors with\nfetch()\nasync function fetchTheData(url) {\ntry {\nconst response = await fetch(url);\nif (response.status >= 200 && response.status <= 299) {\nreturn response.json();\n} else {\nthrow Error(response.statusText);\n}\n} catch (error) {\nconsole.log(error);\n}\n}\nTo use the function from Listing 11-10, pass it a URL as an\nargument. There are four possible outcomes from any request\nthat this function will handle:\nThe request is successful.\nThe request results in a network error.\nThe request results in an HTTP error.\nThe request isn't made, because the browser prevents it due\nto cross-origin policy restrictions.\nFigure 11-5 shows an example of each of these results in the\nbrowser console.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:288>\n", "text": "FIGURE 11-5: The possible outcomes of an HTTP request.\nThe fetch init object\nThe second parameter that the method accepts is an\nfetch()\nobject, called the object, which controls settings for the\ninit\nrequest. If you're using to do anything more than make a\nfetch()\nsimple request to a publicly available API (such as GitHub's),\nGET\nyou need to set various options for the request to be successful.\nThese are the most important options you can set with the\ninit\nobject:\nmethod: The option is where you specify the HTTP\nmethod\nmethod. See the later section \u201cIntroducing HTTP\u201d to find out\nmore about HTTP methods.\nheaders: The option takes as its argument an object\nheaders\ncontaining the HTTP headers you want to send with your\nrequest.\nbody: The option is where you can pass data to the\nbody\nserver when you're making any type of request other than one\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:289>\n", "text": "done by using the or method.\nGET HEAD\nmode: Mode is important for being able to make requests to\ndifferent domains than the web page's origin. The options for\nmode include , , and .\ncors no-cors same-origin\ncredentials. The option tells the browser\ncredentials\nwhether to send credentials to the server with the request.\nThe possible values for credentials are , , and\nomit same-origin\n.\ninclude\nTo fully understand which options you need to use with a\nfetch()\nrequest, you need to understand a few more concepts, including\nhow HTTP works and how CORS works. Both topics are covered\nlater in this chapter and in more detail in Chapter 1 of Book 2.\nIntroducing HTTP\nHypertext Transfer Protocol (HTTP) is the protocol used to\ncommunicate on the web. Every time a web browser fetches a\nweb page, an image, a media file, or any other type of resource\nfrom the web, it's using HTTP.\nHTTP is a client-server protocol. The client is typically a web\nbrowser, and the server is a web server. The client and server\ncommunicate with each other using messages.\nThe client in an HTTP conversation is also known as the\nuser agent.\nMessages sent by the client are called requests, and messages\nsent by the server are called responses.\nIf you still have your browser window open from doing the\nin the preceding section, you can see examples of HTTP\nfetch()\nrequests and responses. Chrome Developer Tools has a tab called\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:290>\n", "text": "Network. If you switch to that tab, you see the request you\nperformed, as shown in Figure 11-6.\nIf you click on the subtabs on the Network tab, you see details\nabout the request and the response. On the Headers tab, you can\nsee the header data, which includes metadata sent by the client\nand by the server.\nThe most important pieces of data in the headers are the Request\nMethod and the Status Code.\nFIGURE 11-6: The Network tab.\nThe request method\nThe request method is usually one of the following:\nGET: The GET method is used to get data from a server. It's\nthe method that's used by the method when you\nfetch()\ninvoke it with just a single argument.\nPOST: The POST method submits data to the specified URL.\nThis is the method that's used, for example, when you submit\na form on the web.\nPUT: The PUT method replaces the target resource with the\npayload of the HTTP request.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:291>\n", "text": "PATCH: The PATCH method makes a partial update to a\nresource. For example, a request that will result in only some\nfields of a database record being updated should use PATCH.\nDELETE: The DELETE method deletes the specified resource.\nHTTP status codes\nThe HTTP status codes indicate whether the HTTP request was\nsuccessful and tells you what went wrong if it wasn't successful.\nHTTP status codes range from 100 to 599. In web application\ndevelopment, however, you're likely to see only the following\nstatus codes:\n200: The status code that everyone hopes to see. It indicates\nthat the request succeeded.\n301: The status code that indicates the requested resource\nhas permanently moved to a new URL, which is given in the\nresponse. Think of a 301 redirect as a change-of-address\nform.\n400: Indicates a bad request. In web application\nprogramming, it often happens because your request is\nmissing some piece of data required by the server.\n401: Indicates that your request isn't authorized. You likely\nneed to provide authentication data.\n404: Uh-oh \u2014 indicates that the resource you're looking for\ncan't be found.\n500: Internal server error. When you see this error, it often\nindicates that something went wrong on the server.\nMaking requests with CORS\nJavaScript's ability to reach out of the browser and fetch data is\nuseful and is an important tool for programming web apps.\nHowever, it also has the potential to be misused by malicious\nscripts. For example, a script downloaded as part of an otherwise\ninnocent-seeming website might use to download code\nfetch()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:292>\n", "text": "that can install viruses or other malware on your computer. This\ntype of attack is known as cross-site scripting, or XSS.\nTo prevent cross-site scripting attacks, web browsers have\nimplemented a same-origin policy. The same-origin policy restricts\nscripts on one website, such as , from accessing\nwww.example.com\nresources from another website, such as .\nwww.evilsite.com\nHowever, scripts have legitimate reasons to access resources from\nother origins. For example, if your web app is located at\nand you have a database server at\nwww.mywebsite.com\n, cross-origin policy prevents access to the\ndatabase.mywebsite.com\ndatabase server, unless you have some way for the server to tell\nthe browser it's okay. Services such as Google Maps and\nthousands of publicly available sources of data also rely on the\nability to share data across different origins.\nThe method used by browsers and servers for allowing cross-\norigin HTTP requests is called the cross-origin resource sharing\nstandard, or CORS. CORS uses HTTP headers that let the server\ntell browsers what origins and types of requests it allows.\nMaking a simple request\nWhen a browser makes a cross-origin request using the , ,\nGET HEAD\nor methods with certain content types (including form data\nPOST\nand plain text), it's known as a simple request.\nIn a simple request, the browser makes the request and the\nserver responds with a status code of 200 if the origin of the\nscript is allowed by the value of the server's\nAccess-Control-\nheader.\nAllow-Origin\nTo see an example of a simple request, type the following\nstatement into your browser console:\nawait fetch('https://api.github.com/repos/chrisminnick/javascriptaio');\nAfter a second, the promise resolves and you see the response\nappear. You can view the HTTP headers by switching to the\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:293>\n", "text": "Network tab, as shown in Figure 11-7.\nFIGURE 11-7: Viewing the HTTP headers.\nIf you look at the Response Headers section on the Network tab,\nyou can see the header, with a\nAccess-Control-Allow-Origin\nvalue of . This indicates that the server allows simple requests\n*\nfrom any origin.\nServers may restrict access to just certain domains as well. For\nexample, if this server wanted to allow access only from the\ndomain, it could send the following header:\nexample.com\nAccess-Control-Allow-Origin: https://example.com\nMaking a non-simple request\nNon-simple requests are ones that have the potential to change\nserver data. In these cases, the browser makes a preflight\nrequest. The preflight request uses the HTTP method. It\nOPTIONS\ntells the server the details of the request it wants to make,\nincluding the origin of the script, the HTTP method of the request,\nand the headers it wants to send.\nA typical preflight request looks like this:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:294>\n", "text": "OPTIONS /user HTTP/1.1\nHost: example.com\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15.7)\nAccept: application/json\nAccept-Language: en-us,en;q=0.9\nAccept-Encoding: gzip,deflate\nConnection: keep-alive\nOrigin: https://foo.com\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: X-PINGOTHER, Content-Type\nThe server then responds to the request with something like the\nfollowing:\nHTTP/1.1 204 No Content\nServer: Apache/2\nAccess-Control-Allow-Origin: https://foo.com\nAccess-Control-Allow-Methods: POST, GET, OPTIONS\nAccess-Control-Allow-Headers: X-PINGOTHER, Content-Type\nAccess-Control-Max-Age: 86400\nVary: Accept-Encoding, Origin\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nIf the allowed methods, origin, and headers returned by the\nserver match the requested method, origin, and headers, the\nbrowser then proceeds to make the actual request.\nIf the server is configured correctly, all you need to do to make a\nrequest with CORS is to pass the option with a value of\nmode\n' ':\ncors\nfetch('https://www.example.com/user',{mode:'cors'});\nIn the \u201cMaking a Web Server\u201d section of Chapter 5 of Book 7, I\nshow you how to implement CORS on the server side.\nWorking with JSON data\nThe most common format for sending and receiving data to and\nfrom JavaScript applications is JavaScript Object Notation, or\nJSON. JSON data resembles JavaScript object literal notation, and\nit's easy to convert between JSON data and JavaScript objects.\nListing 11-11 shows an example of data in JSON format.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:295>\n", "text": "LISTING 11-11: JSON data\n{\n\"coord\": {\n\"lon\": -122.08,\n\"lat\": 37.39\n},\n\"weather\": [\n{\n\"id\": 800,\n\"main\": \"Clear\",\n\"description\": \"clear sky\",\n\"icon\": \"01d\"\n}\n],\n\"base\": \"stations\",\n\"main\": {\n\"temp\": 282.55,\n\"feels_like\": 281.86,\n\"temp_min\": 280.37,\n\"temp_max\": 284.26,\n\"pressure\": 1023,\n\"humidity\": 100\n},\n\"visibility\": 10000,\n\"wind\": {\n\"speed\": 1.5,\n\"deg\": 350\n},\n\"clouds\": {\n\"all\": 1\n},\n\"dt\": 1560350645,\n\"sys\": {\n\"type\": 1,\n\"id\": 5122,\n\"message\": 0.0139,\n\"country\": \"US\",\n\"sunrise\": 1560343627,\n\"sunset\": 1560396563\n},\n\"timezone\": -25200,\n\"id\": 420006353,\n\"name\": \"Mountain View\",\n\"cod\": 200\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:296>\n", "text": "The code in Listing 11-10 bears a striking resemblance to a\nJavaScript object. However, if you look closely, you can see that\nit's not. The first difference is that the lefthand sides of the colons\nare in quotes. The other difference is that JSON data isn't\nassigned to a variable or constant. An object isn't any use if it's\nnot assigned a name. JSON data, on the other hand, is extremely\nuseful for sending and receiving data.\nJSON can also be used with programming languages\nbesides JavaScript, and most languages include tools for\nworking with JSON data.\nAlthough the data in Listing 11-11 starts and ends with curly\nbraces, it's common to see JSON data that starts and ends with\nsquare brackets and therefore turns into an array when it's\nconverted from JSON data.\nGetting JSON data\nThe most common way to get JSON data into your application is\nby using . Once you have the JSON data, you can use the\nfetch()\nobject's method to convert it to data that can be\nResponse json()\nused inside your JavaScript code.\nIf you don't use to get the JSON data into your program\nfetch()\n(for example, if you load a JSON file directly into the program),\nyou still need to convert it to JavaScript before you can use it. You\ncan use JavaScript's built-in method to do this.\nJSON.parse()\nTo see JSON parse in action, you can create a JSON string like the\nfollowing:\nconst person = '{\"firstName\": \"Conway\",\"age\": 59}';\nNotice that the value of is a string. As such, there's no\nperson\neasy way to extract the individual names or values from it. Here's\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:297>\n", "text": "how to convert a JSON string to an object:\nconst personObject = JSON.parse(person);\nSending JSON data\nIf you have an object in your application that you want to send to\na server as JSON data, it needs to be converted to JSON before it\ncan be sent. JavaScript has a built-in method that does this for\nyou, called .\nJSON.stringify()\nTo use the method, pass an object or value into it.\nstringify()\nFor example, if you followed the steps to create a JSON string and\nconvert it to an object in the preceding section, you can convert it\nback to a JSON string:\nconst personJSON = JSON.stringify(personObject);\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:298>\n", "text": "Chapter 12\nUsing JavaScript Modules\nIN THIS CHAPTER\nIntroducing modules\nCreating modules with export\nUsing modules with import\nGiving your module a name\nSetting a default export\nLoading modules dynamically\nUsing modules with HTML files\n\u201cDivide each difficulty into as many parts as is feasible and\nnecessary to resolve it.\u201d\n\u2014RENE DESCARTES\nUntil now, every JavaScript program you've written has been in a\nsingle file, which is fine for small programs and examples. But, in\nreal-life programming, a program may have thousands of lines of\ncode. Keeping everything in a single file in a large program would\nmake your code impossible to maintain.\nTo keep your code organized, to enable multiple people to work\non a project, and to help you think about your code more easily,\nJavaScript provides a way to subdivide programs into modules.\nDefining Modules\nA JavaScript module is a function, variable, constant, or class that\nis stored in a separate file that can be imported into your main\nprogram. In the same way that using functions helps keep your\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:299>\n", "text": "JavaScript files organized, using modules helps keep your\nJavaScript programs organized.\nJavaScript modules are enabled by two keywords: and\nexport\n.\nimport\nExporting Modules\nTo create a module, you have to export it by using the\nexport\nkeyword. For example, one common and simple use for modules\nis to store constants that are used frequently in your program. To\nstart this file, you might create a file named .\nconstants.js\nExamples of constants might include the base URL for an API\nused by your program, color themes, and labels and text used in\nyour application. Listing 12-1 shows what this file\nconstants.js\nmight look like.\nLISTING 12-1: A file containing modules\nexport const API = 'https://api.example.com';\nexport const colorThemeDrk = {\nbackgroundColor: '#000',\ntextColor: '#EEE',\nheaderColor: '#FF0000',\nfooterColor: '#FF0000'\n}\nexport const colorThemeLght = {\nbackgroundColor: '#fff',\ntextColor: '#333',\nheaderColor: '#FF0000',\nfooterColor: '#FF0000'\n}\nexport const labels = {\nenglish:{\nsupportLink: 'Get Support',\ncontactLink: 'Contact Us'\n}\n};\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:300>\n", "text": "Never store any sensitive data in a static file. Examples of\nsensitive data are passwords and API keys and any other\ninformation you wouldn't want to become public.\nModules can be created in one of two ways: as named exports or\nas default exports, as described next.\nNamed exports\nThe export statements in Listing 12-1 are examples of named\nexports. A named export creates a module with the same name\nas the variable, constant, function, or class that's being exported.\nOne way to create a named export is to preface the declaration of\nthe variable, constant, function, or class with the word\nexport.Listing 12-2 shows a named module created from a\nfunction.\nLISTING 12-2: A named function module\nexport function addOne(input){\nreturn input + 1;\n}\nYou can also create named exports by using an statement\nexport\nthat's separate from the feature you want to export. To create a\nseparate export statement, specify one or more names of\nvariables, constants, functions, or classes surrounded by curly\nbraces and separated by commas. For example, rather than\nspecify an export statement for each of the modules created in\nListing 12-1, you can remove the statements that preface\nexport\neach constant and just write the following statement:\nexport\nexport {API, colorThemeDrk, colorThemeLght, labels};\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:301>\n", "text": "Export statements containing all the modules you want to\nexport from a file are typically placed at the end of the file.\nDefault exports\nDefault exports specify a single function or class from a file.\nUnlike named exports, default exports have no particular name\nassociated with them. Instead, a default export is associated with\nthe file it's a part of. (This topic will make more sense if you read\nthe following section, where I show you how to import modules.)\nYou can create a default export by prefacing the name of a\nfunction or class with . For example, to write the\nexport default\nmodule from Listing 12-2 as a default export, you just need to\nadd after , like this:\ndefault export\nexport default function addOne(input){\nreturn input + 1;\n}\nA file can have only one default export. But a module with a\ndefault export can also have multiple named exports. For\nexample, Listing 12-3 shows a file containing several named\nexports as well as a default export.\nLISTING 12-3: A file containing named\nexports and a default export\n// oregonInfo.js\nexport const stateName = 'Oregon';\nexport const capitalCity = 'Salem';\nexport const stateBird = 'Western meadowlark';\nexport default function getStateInfo(){\nreturn {stateName, capitalCity, stateBird};\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:302>\n", "text": "Using the file from Listing 12-3, you can make use\noregonInfo.js\nof individual constants, or you can import and run the default\nfunction to get an object containing data from multiple constants\nin the file.\nThe return value of the function in Listing 12-3\ngetStateInfo()\ndemonstrates a shorthand method of using properties of an\nobject where the name and value of the property are the same.\nIn this case, the following statement:\nreturn\nreturn {stateName, capitalCity, stateBird};\nis equivalent to this one:\nreturn {stateName: stateName, capitalCity: capitalCity, stateBird:\nstateBird};\nAs when you create named exports, you can also write an export\nfor a default export as a separate statement. A default export just\nuses the keyword followed by , followed by the\nexport default\nname of the variable, constant, function, or class that should be\nthe default export.\nexport default getStateInfo;\nImporting Modules\nAfter you've created modules by using the statement, you\nexport\ncan import them into other files by using the keyword.\nimport\nUnlike export statements, which can be placed anywhere in a file,\nstatements typically appear at the beginning of a file.\nimport\nImported modules can be used as though they were created in\nthe same file. However, unlike functions and variables that you\ncreate in a JavaScript file, imported modules are read-only.\nImporting named modules\nThis is the basic syntax for importing named modules:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:303>\n", "text": "import {moduleName} from 'file path';\nThe module name can be a single exported module or a comma-\nseparated list of module names. The file path is the relative path\nfrom the file doing the importing to the file containing the\nmodule.\nFor example, if you keep your modules in a folder called\nmodules\nand the file you want to import them from is outside of the\nfolder, you can import modules from a file inside the\nmodules\nfolder by specifying the path as ,\nmodules ./modules/filename.js\nwhere is the name of the file containing the module\nfilename.js\nor modules you want to import, of course. The complete import\nstatement needed to import and from a\nstateName capitalCity\nfile named would look like this:\n/modules/oregonInfo.js\nimport {stateName,capitalCity} from './modules/oregonInfo.js';\nNote that the path to the file you're importing from has the\nperiod-slash ( characters before the path. This is necessary for\n./)\ntelling the statement to start from the current directory. If\nimport\nthe folder you're importing from is at a higher level in the folder\nstructure than the file you're importing to, you can use to tell\n../\nthe statement to start one level higher in the folder\nimport\nhierarchy. Likewise, if the folder is two levels higher in the\nhierarchy, you can use .\n../../\nImporting default modules\nTo import a module that was exported as a default export, use\nthe statement without curly braces. Because you're\nimport\nallowed to have only one default export per file, you don't need to\nspecify the same name as the one the function or class has inside\nthe file. For example, you could import the default\ngetStateInfo()\nfunction from like this:\noregonInfo.js\nimport oregonStateInfo from './modules/oregonInfo.js';\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:304>\n", "text": "Renaming Exports and\nImports\nYou can rename any exported member of a module by using the\nkeyword inside curly braces. Renaming using can be done\nas as\ninside either an export or an import statement. For example, if\nyou want to export a function called using the name\nsum\n, you could use the following statement in the file\naddNumbers\nwhere is defined:\nsum\nexport {sum as addNumbers};\nThe exported function will be available for import into other files\nwith the name .\naddNumbers\nAlternatively, you can rename modules when you import them.\nFor example, if you have a file named with the\nmodule.js\nfollowing export:\nexport {sum};\nyou can change its name inside an import, like this:\nimport {sum as addNumbers} from './module.js';\nImporting a Module Object\nIf you have a file that contains many different named exports, it's\noften easier to import them all at the same time rather than to\nspecify the names of the modules individually in the\nimport\nstatement.\nTo import all exported modules from a file, use the asterisk (*)\nsymbol along with the keyword to create a module object. For\nas\nexample, the following statement imports every module from a\nfile named :\nmodules.js\nimport * as myModules from './modules.js';\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:305>\n", "text": "After this import operation is done, the named exports from\nwill be available as properties and methods of the\nmodules.js\nobject.\nmyModules\nLoading Dynamic Modules\nNormally, modules are imported in the order in which\nimport\nstatements appear in the file. Because statements appear\nimport\nat the beginning of a file, all the imported files in a program are\nloaded before any other code runs. This can have a negative\nimpact on your program's performance.\nBy using dynamic module loading, you can tell JavaScript to load\nmodules only when they're needed.\nTo use dynamic module loading, use the keyword as a\nimport\nfunction. This function returns a promise object containing a\nmodule object. The function can be called in response to\nimport()\nan event.\nFor example, Listing 12-4 shows how you can import the modules\nfrom Listing 12-3 when a button is clicked.\nLISTING 12-4: Using dynamic loading\nconst stateButton = document.getElementById('oregonButton');\nstateButton.addEventListener(\n'click',\n() =>\nimport('./listing12-3.js').then((OregonInfo) => {\nalert(`${OregonInfo.stateName}'s state bird is\n${OregonInfo.stateBird}.`);\n})\n);\nImporting Modules into HTML\nAlthough modules are most commonly imported into other\nJavaScript files, you can also import them into HTML files by\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:306>\n", "text": "setting the attribute of a script tag to . Listing 12-5\ntype module\nshows how to import the module from Listing 12-4 into an HTML\nfile.\nLISTING 12-5: Importing a module into an\nHTML file\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Get Oregon Info</title>\n</head>\n<body>\n<button id=\"oregonButton\">Click to find out about Oregon!</button>\n<script src=\"listing12-4.js\" type=\"module\"></script>\n</body>\n</html>\nWhen run in a browser, the preceding HTML file displays a button\nand loads the event handler code from Listing 12-4. When you\nclick the button, the modules from Listing 12-3 are loaded and an\nalert displays, showing information from the modules, as shown in\nFigure 12-1.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:307>\n", "text": "FIGURE 12-1: Loading modules dynamically in response to an event.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:308>\n", "text": "Book 2\nMeet Your Web Browser\nContents at a Glance\nChapter 1: What a Web Browser Does\nInterfacing with a Browser\nIntroducing the Browser Engine\nThe Rendering Engine\nNetworking\nChapter 2: Programming the Browser\nUnderstanding Web APIs and Interfaces\nGetting Around the Navigator\nStealing a Glimpse Through the Window\nIntroducing the HTML DOM\nKnowing Your History\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:309>\n", "text": "Chapter 1\nWhat a Web Browser Does\nIN THIS CHAPTER\nDefining the parts of a web browser\nSeeing how rendering works\nTaking a look at the JavaScript engine's role\nLoading JavaScript asynchronously\nDeferring JavaScript execution\n\u201cInternet Explorer is the best web browser.\u201d\n\u2014NOBODY\nToday's web browsers are highly complex pieces of software that\nhandle a wide variety of tasks beyond simply displaying web\npages. In fact, a modern web browser more closely resembles an\nentire operating system or virtual computer than it does the web\nbrowsers of the past.\nIn this chapter, you'll learn about the various parts of a web\nbrowser and how web browsers interact with your computer, with\nthe world outside of your computer, and with you.\nWhen you think about a web browser, you probably consider only\nthe part of it that you interact with most directly and most often,\nwhich is the large space in which web pages appear. But there's\nmuch more going on with web browsers behind the scenes.\nThe functionality of a web browser can be divided into the\nfollowing components:\nThe user interface (UI)\nThe browser engine\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:310>\n", "text": "The rendering engine\nThe JavaScript engine\nNetworking\nData storage\nThe relationship between these components is shown in Figure 1-\n1.\n\u00a9 John Wiley & Sons, Inc.\nFIGURE 1-1: The components of a web browser.\nInterfacing with a Browser\nThe browser's user interface is how users interact with a web\nbrowser. The user interface of a web browser is also known as the\nbrowser chrome (which is not to be confused with the Chrome\nbrowser). The user interface consists of the parts of a web\nbrowser that make one browser different from another: It\nincludes the menu bars, the address bar, the bookmarking\nfunctionality, the scroll bars, and even the developer tools.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:311>\n", "text": "The user interface components of a web browser also provide the\nhooks into the rest of your computer's operating system. For\nexample, when you print a web page or save a file, that's the\nbrowser user interface at work.\nSimilarly, when a web page finds your location, accesses your\nwebcam, or installs extensions, that's the browser user interface\nat work. It's called the user interface because it provides an\ninterface for users to use the core component of a web browser,\nwhich is known as the browser engine.\nEach tab in a browser's user interface runs as a separate process.\nWhat this means is that at any one time, you have as many\nbrowser engines running on your computer as you have browser\ntabs open. This helps to increase performance (because\nJavaScript is single-threaded) and also increases security and\nreduces the number and severity of browser crashes (because\neach website you view is isolated from the others).\nIntroducing the Browser\nEngine\nJust as an engine is the essential component of any automobile,\nthe browser engine is what makes the browser go. In the same\nway that different models of cars might use the same type of\nengine, different browsers also use the same browser engine.\nThese are the three browser engines that are now used by nearly\nall web browsers:\nWebKit: WebKit was originally created by Apple by building\nupon the now defunct KHTML engine. WebKit is used by all\niOS browsers and by Apple's Safari browser.\nBlink: Blink is Google's browser engine, which is used by\nGoogle Chrome and Android browsers, as well as by\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:312>\n", "text": "Microsoft's Edge browser and the Opera browser. It was\noriginally based on Apple's WebKit engine.\nGecko: Gecko is Mozilla's engine, which is used in the Firefox\nbrowser.\nNo matter which browser engine a web browser uses, they all\nshare the same basic functionality. The browser engine provides a\nlink between the user interface and the rendering engine.\nThe Rendering Engine\nDepending on the browser and on whom you ask, the rendering\nengine may be considered a separate component of the browser\nor a part of the browser engine. Its job is to interpret HTML and\nCSS and to lay out the web page.\nIn the same way that a JavaScript interpreter must process\nJavaScript in a certain way and in a certain order to ensure that\nJavaScript runs the same wherever it's used, rendering engines\nmust also conform to strict rules to ensure that web pages display\nthe same on different browsers.\nThese are the steps involved in rendering a web page:\n1. The HTML elements are parsed, and the Document Object\nModel (DOM) is created. The DOM provides an interface for\nJavaScript to interact with a web browser. You can learn more\nabout the DOM in Book 2, Chapter 2.\n2. The CSS is parsed to create the CSS Object Model (CSSOM).\n3. The DOM and CSSOM are combined to form a render tree. The\nrender tree describes the visual elements of the document\nbeing rendered.\n4. During the layout step, the rendering engine calculates the\nsize and position of each element, based on the HTML and\nCSS.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:313>\n", "text": "5. During the paint step, the rendering engine creates layers\nfrom the shapes created from the layout step. Each pixel on\neach layer is drawn to form bitmap images during a process\ncalled rasterization.\n6. In the final step of rendering, known as compositing, the\nlayers are combined and sent to the user interface to be\nshown to the user.\nOnce a web page is displayed to the user, the rendering process\ndoesn't just stop. Each time the browser window is scrolled, or\nsomething changes as a response to an animated element or\nJavaScript, or the window is resized, some portion of the\nrendering process must be repeated.\nRendering a web page is a precise and complex process, which\nI've simplified enormously here. It's not usually necessary for\nfront-end developers to know exactly what happens behind the\nscenes with rendering. What is important to know is that each\nchange to a web page causes a chain reaction of reflowing and\nrepainting the browser window. If a JavaScript application is\nmaking many changes to the DOM, this can have a negative\nimpact on the perceived responsiveness of a web application.\nOne of the most important goals of libraries and\nframeworks like ReactJS, Svelte, and Vue.js is to minimize the\nnumber of changes made to the DOM.\nTo see the result of the rendering engine's work, open the\ndeveloper console and select the Elements tab, as shown in\nFigure 1-2.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:314>\n", "text": "FIGURE 1-2: The Elements tab contains tools for inspecting the DOM, CSSOM,\nand layout.\nThe JavaScript engine\nThe JavaScript engine compiles and runs the JavaScript that's\nincluded in, or linked to from, the HTML document. Although the\nJavaScript engine used to be a JavaScript interpreter, all browsers\nnow use just-in-time compilation to convert the JavaScript source\ncode to machine code before it's run.\nThese are the JavaScript engines in use today:\nV8: V8 is Google's JavaScript engine. It's used by Chrome and\nby Node.js.\nSpiderMonkey: SpiderMonkey is the JavaScript engine for\nMozilla Firefox.\nJavaScriptCore: JavaScriptCore is Apple's JavaScript engine,\nwhich is used by Safari.\nChakra: Chakra is the JavaScript engine for Microsoft Edge.\nThe way JavaScript code executes is covered in Book 1, Chapter\n1. To improve the performance of web applications, you should\nunderstand when JavaScript code is executed, what render\nblocking is, and how to reduce or eliminate blocking.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:315>\n", "text": "Identifying and preventing render\nblocking\nJavaScript files included in web pages load and run as they're\nencountered by the rendering engine during the DOM\nconstruction. For example, if your HTML page has a\n<script>\nelement in the element that includes JavaScript code\n<head>\n(what's known as an embedded script because it's embedded in\nthe HTML document), parsing of the HTML stops while that bit of\nJavaScript is executed.\nOnce the JavaScript is finished running, the parsing of the HTML\ncontinues. This blocking of the DOM parsing is necessary because\nJavaScript code may perform DOM manipulations while it's\nrunning that will affect the rendering.\nA script that's linked to from an HTML document is also render\nblocking by default. For example, consider the following\n<script>\nelement, which may appear in the of your HTML:\n<head>\n<script src=\"app.js\"></script>\nWhen the rendering engine encounters this element, it\n<script>\nstops what it's doing while the browser downloads the script and\nthe JavaScript engine compiles and runs it.\nIf your JavaScript code affects what the user will see when the\npage first loads (what's known as above the fold content), this\nblocking behavior may be exactly what you want. Without\nblocking, the page may appear in the browser and then be\nreorganized by the JavaScript code, resulting in a disorienting\nuser experience.\nHowever, most of the time, JavaScript has no impact (or no\nsignificant impact) on the initial layout of the page. In these\ncases, render blocking creates an unnecessary delay in the display\nof the page. You can eliminate this delay by using the and\nasync\nattributes of the element.\ndefer <script>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:316>\n", "text": "Unblocking your code with async\nand defer\nWhen you use the element's attribute, the\n<script> async\nbrowser continues parsing the document while it loads the\nJavaScript. Once the JavaScript is loaded, parsing stops while the\ncode is compiled and executed. Using reduces the amount\nasync\nof time before the browser can display a page to the user by\nperforming the loading of JavaScript asynchronously. Considering\nthe number and size of JavaScript files that a modern web\napplication requires, the loading of JavaScript is often the slowest\npart of the rendering process.\nThe attribute of the element works similarly to the\ndefer <script>\nattribute in that it causes the browser to continue parsing\nasync\nwhile the script is loading. With , however, the script doesn't\ndefer\nexecute until the rendering engine has parsed all the HTML and\nthe DOM is fully constructed.\nOnce the DOM is constructed, deferred JavaScript files run in the\norder in which they appear in the document.\nNetworking\nThe networking functions of a browser handle the making of\nHTTP requests, the loading of resources, and the enforcement of\nsecurity policies during the parsing of the HTML and the execution\nof the JavaScript. You can inspect the functions of the browser's\nnetworking component by opening the developer console and\nviewing the Network tab, as shown in Figure 1-3.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:317>\n", "text": "FIGURE 1-3: Viewing the browser's networking functions.\nData storage\nThe data storage (also known as data persistence) component of\na web browser handles cache storage, browser cookies,\nbookmarks, and data related to client-side data persistence APIs,\nsuch as IndexedDB and WebSQL. Because a web browser may be\nused to access many different websites that each store data, it's\nimportant that each domain has its own separate data storage.\nBrowsers restrict access to the data stored by a website to the\nURL that set the data in the first place.\nYou can view the data stored by your browser's data storage\ncomponents by opening the developer tools and viewing the\nApplication tab, as shown in Figure 1-4.\nThe fact that browser storage is restricted by domain\ndoesn't mean that it's impossible for websites to share data,\nas everyone knows from seeing the highly personalized\nadvertising that shows up on websites they've never even\nvisited. Advertisers typically use third-party services (such as\nGoogle Ads) to track web user activities and present\ncustomized ads. Two sites that both use Google Ads can't see\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:318>\n", "text": "what you searched for on the other site or read cookies set\nby the other, but Google knows everything because it can\nstore data in your browser from any site that uses Google\nAds.\nFIGURE 1-4: Viewing local data storage on the Application tab.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:319>\n", "text": "Chapter 2\nProgramming the Browser\nIN THIS CHAPTER\nDefining Web APIs\nLearning the difference between an API and an\ninterface\nLearning your way around the Navigator interface\nPeeking into the Window interface\nInvestigating and manipulating the DOM\nKnowing your History API\n\u201cPut simply, if an interface is poorly designed, I will not see the\ndata I looked for, even if it's right there on the page.\u201d\n\u2014JEFFERY ZELDMAN\nWeb browsers provide many APIs for interacting programmatically\nwith their functionality. Using JavaScript, you can find out what\nthe browser is doing as well as tell the browser what to do. In this\nchapter, you'll learn about the Web APIs and see how to use the\nmost essential ones.\nUnderstanding Web APIs and\nInterfaces\nWeb APIs are application programming interfaces for web\nbrowsers or web servers. The purpose of Web APIs is to extend\nthe capabilities of HTTP clients or servers by allowing developers\nto interact with them \u2014 most commonly, using JavaScript.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:320>\n", "text": "Hooking into interfaces\nAs implied by the name, a Web API is an interface that gives a\nprogrammer a way to interact with the functionality and data of\nanother application.\nAll Web APIs are interfaces, but not all interfaces are Web\nAPIs.\nIn JavaScript, interfaces may be implemented using either\nconstructor functions or JavaScript classes, as you can see in\nBook 1, Chapter 7. Interfaces serve as templates for objects.\nFor example, the interface in a browser represents a\nWindow\nwindow (or tab) in a browser that contains a DOM document.\nWhen you open a web page, the interface is used to\nWindow\ncreate an instance of the interface, called a object.\nWindow window\nInstances of interfaces (objects) are created using constructors.\nYou can access properties and methods of instances of the\nWindow\ninterface, and many Web APIs also make use of these properties\nand methods.\nThis list describes a few of the interfaces (also known as object\ntypes) that are built into web browsers:\n: The interface represents the browser. It\nNavigator Navigator\nprovides information about the type of browser and its\ncapabilities. is also used for accessing geolocation\nNavigator\ncapabilities of browsers and the operating system.\n: Any object in the browser (including the\nEventTarget\n, , and objects) that can receive events\nDocument Window Element\nimplements the interface.\nEventTarget\n: The interface represents a web page\nDocument Document\nloaded into a browser.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:321>\n", "text": ": The interface represents a single audio\nAudioTrack AudioTrack\ntrack specified using the or element.\n<audio> <video>\nBuilt-in browser APIs\nThe Web APIs that are built into web browsers provide access to\na wide range of functionality in the browser as well as in the\nunderlying operating system. For example, the API, which\nFetch\nyou can read about in Book 1, Chapter 11, gives JavaScript\nprogrammers a way to make HTTP requests. Here are just a few\nof the other APIs that are built into web browsers:\n: llows JavaScript to store structured data that's\nIndexedDB A\nindexed and can be searched quickly.\nAPI: Gives JavaScript applications the ability to access\nFile\nfiles from the operating system that the user has made\navailable, such as by selecting them or dragging-and-dropping\nthem into the browser.\nAPI: Allows applications to capture images and\nImageCapture\nvideo.\nAPI: Gives browsers a way to draw 2D graphics using\nCanvas\nJavaScript.\n: n API for drawing 2D and 3D images.\nWebGL A\nWeb Workers: An API that enables the running of scripts as\nbackground threads that are separate from the execution of\nthe main application in a browser window.\nCustom APIs\nIn addition to the built-in browser APIs, thousands of third-party\nAPIs are available that you can use to add functionality to your\napplications. Many third-party APIs give your program access to\nresources or data that would otherwise be difficult or impossible\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:322>\n", "text": "to re-create. Examples of third-party APIs are the GitHub API,\nFacebook's APIs, Google Maps, Stripe, PayPal, and Skyscanner.\nBy making use of third-party APIs, any app can have access to\ndata such as weather information, news headlines, maps,\npayment processing, and much more by using HTTP requests.\nCustom Web APIs are also known as web services.\nGetting Around the Navigator\nNetscape Navigator, which was one of the first web browsers, was\nthe browser that first implemented an interface for accessing data\nabout the browser itself. It called this interface . As\nNavigator\nmore web browsers were created, many of them based on the\nsame code as Netscape Navigator, the name of the\nNavigator\ninterface stuck.\nWhen your browser starts up, it creates an instance of the\ninterface named .\nNavigator navigator\nInspecting the navigator's quirks\nYou may still be able to see some relics of the early days of the\ninterface by typing or\nNavigator navigator.appCodeName\ninto your JavaScript console. Although neither\nnavigator.appName\nproperty is officially now supported, both are still present in every\nweb browser (at the time of this writing). The\nappCodeName\nproperty always returns , and the property always\nMozilla appName\nreturns , no matter what browser you're using.\nNetscape\nNavigator properties\nYou can view all properties and methods of the object\nnavigator\nby typing into the JavaScript console, as shown in\nnavigator\nFigure 2-1.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:323>\n", "text": "FIGURE 2-1: Viewing the properties and methods of the navigator object.\nThe properties created by the interface include several\nNavigator\nthat are obsolete and mostly useless as well as a handful of\nextremely useful bits of information. Here are a few of the\nproperties of that you're likely to have a need for at\nNavigator\nsome point:\n: Returns the preferred language of the user.\nlanguage\n: Returns if the browser is working online;\nonLine true\notherwise, returns .\nfalse\n: Returns if the browser can display PDF\npdfViewerEnabled true\nfiles.\n: Returns a object. You can use this\npermissions Permissions\nobject to query the permissions status of many Web APIs. This\nis how an application can determine whether the user has\nallowed an application to access the device's camera, for\nexample.\n: Returns a object that allows the\ngeolocation Geolocation\napplication to access information about the device's position.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:324>\n", "text": "INVESTIGATING THE USER AGENT STRING\nThe Navigator.userAgent property returns a string containing information\nabout the current browser \u2014 or at least that was the original idea. In the early\ndays of the web, the userAgent string was the most reliable way to detect\nmobile browsers or whether a browser supported certain features.\nFor example, here's how you might customize the display of a website for\nChrome browsers:\nif (navigator.userAgent.includes(\"Chrome\")){\nlet welcomeMessage = \"Welcome, Chrome user!\";\n}\nAs more websites implemented user agent checking, new web browsers tuned\ntheir user agent string to make sure they passed user agent checks. The result\nwas that the user agent string became mostly useless. For example, here's the\nuser agent string for the most recent version of Chrome for macOS at the time\nof this writing:\n'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)\nAppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0\nSafari/537.36'\nAnd here's the user agent string for Microsoft Edge running in Windows 11:\n'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML,\nlike Gecko) Chrome/108.0.0.0 Safari/537.36\nEdg/108.0.1462.76'\nThe bulk of both strings is just legacy keywords remaining because some\nwebsites still check user agent strings to see what the browser is capable of.\nNotice that both Edge and Chrome list Chrome in their user agent strings.\nTo make matters worse, even though the userAgent property is read-only, you\ncan change your browser's user agent string in the developer tools, as shown\nin the following figure:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:325>\n", "text": "The userAgent string is still widely used by security APIs and web hosts to\ndetect bots and potentially malicious web traffic \u2014 as you'll discover if you try\nusing the web with a custom user agent string.\nThe best way to do feature detection is to use a library such as Modernizr.\nModernizr provides tests for CSS and JavaScript that you can use to check\nwhether a user's browser supports the features and APIs you want to use, as\nshown in the following snippet:\nif (Modernizr.ambientlight){\nadjustSiteBrightness();\n} else {\nshowNormalBrightness();\n}\nStealing a Glimpse Through\nthe Window\nThe interface represents a browser window containing a\nWindow\nDOM document. In a browser window, an instance of the\nWindow\ninterface can be accessed using the window object. The\nwindow\nobject holds many constructors, properties, and methods. It's also\nwhere global variables that you may create in your JavaScript\nprogram are stored.\nTo see all properties of the interface, type window into\nWindow\nthe JavaScript console, as shown in Figure 2-2.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:326>\n", "text": "FIGURE 2-2: Viewing the properties of the window object.\nBecause is the global state, you can access any properties\nwindow\nof the object without using the name of the object.\nwindow window\nFor example, to use the method, you can\nwindow.console.log()\njust write anywhere in your code.\nconsole.log()\nWindow properties\nThe interface's properties include the object, the\nWindow document\nobject, and the object. I cover these topics in their\nhistory screen\nown sections later in this chapter.\nIn total, the Window interface defines more than 50 properties,\nand quite a few of them are no longer used but are kept around\nfor compatibility with older browsers and code. You can read a\ncomplete reference for the Window interface at\n.\nhttps://developer.mozilla.org/en-US/docs/Web/API/Window\nTable 2-1 lists some of the most commonly-used properties of the\ninterface.\nWindow\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:327>\n", "text": "Window methods\nLike all properties of the object, the interface's\nwindow Window\nmethods run in the global scope. This is important to know\nbecause some of the methods of the interface can produce\nWindow\nseemingly unexpected results if you try to use them as though\nthey're normal function-scoped functions.\nTable 2-2 lists the most commonly used methods of the Window\ninterface.\nTABLE 2-1 Examples of Interface Properties\nWindow\nProperty Description\nconsole A reference to the browser's debugging console object\nThe ratio between the physical (device) pixels and the\ndevicePixelRatio\ndevice-independent pixels of the current display\nevent The event that's currently being handled\nA Boolean value indicating whether the window is displayed\nfullScreen\nin full-screen mode\ninnerHeight The height of the content area of the window\ninnerWidth The width of the content area of the window\nlocation Gets or sets the current URL of the window\nlocalStorage A reference to the local storage object\nThe number of pixels that the document has been scrolled\nscrollX\nhorizontally\nThe number of pixels that the document has been scrolled\nscrollY\nvertically\nTABLE 2-2 Commonly-Used Methods of the\nWindow\nInterface\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:328>\n", "text": "Method What It Does\nalert() Displays a dialog with a message.\nblur() Takes focus away from the window\nclose() Closes the current window\nfocus() Sets the focus to the window\nopen() Opens a new window\nDisplays a dialog with a text input and returns the text that's\nprompt()\nentered into it\nScrolls the document by the amount passed to it as an\nscroll()\nargument\nTakes x- and y-coordinates as arguments and scrolls to that\nscrollTo()\nposition\nclearInterval() Stops the repeated execution set using setInterval()\nclearTimeout() Stops the delayed execution set using setTimeout()\nsetInterval() Executes a function every specified number of milliseconds\nsetTimeout() Executes a function after a specified number of milliseconds\nIntroducing the HTML DOM\nThe interface is used to create the object\nDocument document\ninside the object in a browser. It describes the properties\nwindow\nand methods of a document (usually, an HTML document) and\nprovides access to the HTML DOM.\nVisualizing the DOM\nThe DOM is the tree of nodes that's created whenever a HTML or\nXML document renders. Each element and piece of content in a\ndocument becomes a node in the DOM tree. For example, if you\nhave an HTML document that looks like the following:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:329>\n", "text": "<html>\n<head>\n<title>My web page</title>\n</head>\n<body>\n<h1>Welcome</h1>\n</body>\n</html>\nYou can visualize the resulting DOM tree, as shown in Figure 2-3.\nDescribing relationships in the DOM family\ntree\nThe relationships in a DOM tree are often described using the\nlanguage of family trees. For example: Every element in a DOM\ntree is a child of the node. The element is the\nDocument <html>\nparent of every other element in an HTML document. Nodes at\nthe same level, such as and , are called siblings.\n<head> <body>\nDocument properties\nMany of the properties of the interface allow JavaScript\nDocument\nto access and change the document as a whole. Only a few of\nthese are commonly used in JavaScript programming, but they're\nhelpful to know about. Table 2-3 lists some of the most important\nproperties.\ndocument\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:330>\n", "text": "FIGURE 2-3: A DOM tree.\nTABLE 2-3 Important Properties of the Document\nInterface\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:331>\n", "text": "Property Description\nactiveElement The element that has focus\nbody The <body> node of the current document\nchildren The child elements of the current document\nforms A collection of the <form> elements in the current document\nhead The <head> element of the current document\nimages A collection of the images in the current document\nscripts A collection of the scripts in the current document\nstylesheets A collection of the stylesheets in the current document\nDocument methods\nThe methods described by the interface are the key to\nDocument\nhow every JavaScript DOM manipulation library works. Table 2-4\nshows some of the most commonly used methods of the\nDocument\ninterface.\nTABLE 2-4 The Most Common Document Methods\nMethod What It Does\nInserts nodes or strings after the last child of the\nappend()\ndocument\nReturns a new Attr object (which represents an\ncreateAttribute()\nattribute of an element)\ncreateComment() Creates a new comment node\nCreates a new element with the tag name passed\ncreateElement()\nto it\ncreateEvent() Creates an event object\ncreateTextNode() Creates a text node\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:332>\n", "text": "Method What It Does\nReturns a reference to the element with the id\ngetElementById()\nattribute value passed to it\nReturns a list of elements with the class name\ngetElementsByClassName()\npassed to it\nReturns a list of elements with the tag name\ngetElementsByTagName()\npassed to it\nprepend() Inserts nodes before the first child in the document\nReturns the first element node in the document\nquerySelector()\nthat matches the selector passed to it\nReturns a list of all element nodes in the document\nquerySelectorAll()\nthat match the selector passed to it\nSelecting element nodes\nThe interface provides several ways to select element\nDocument\nnodes in the DOM. Selecting element nodes allows you to add\nevent listeners to them, change their attributes and content, and\nmodify their style.\nUsing the correct method for selecting elements is important\nbecause element selection and manipulation is, computationally, a\nrelatively expensive operation. Changes to the DOM cause the\nbrowser engine to reflow the layout of the page, so selecting\nmore elements than necessary or doing more DOM manipulation\noperations than necessary can cause your user interface to seem\nslow.\nOne major benefit of using a DOM manipulation library\nsuch as React, Vue, or Svelte rather than the\nDocument\nmethods directly is that they optimize DOM manipulation\noperations.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:333>\n", "text": "Selecting with getElementById()\nThe most efficient way to select DOM elements is by using\n. Because the value of an element's attribute\ngetElementById() id\nis unique within a document, always returns a\ngetElementById()\nsingle element and can stop parsing a document when it finds the\ncorrect element.\nTo use , pass it a string that matches the value\ngetElementById()\nof the attribute of the element you want to select. For\nid\nexample, in Listing 2-1, selects the\ngetElementById() <h2>\nelement and replaces the HTML between its start and end tags\nwith a message after a 1-second delay.\nLISTING 2-1: Selecting with\ngetElementById()\n<html>\n<head>\n<title>Today's date</title>\n</head>\n<body>\n<h1>Here's the current date</h1>\n<h2 id=\"dateToday\">calculating the date\u2026</h2>\n<script>\nsetTimeout(() => {\ndocument.getElementById('dateToday').innerHTML = new Date();\n}, 1000);\n</script>\n</body>\n</html>\nSelecting using selectors\nAlthough is the most efficient way to select\ngetElementById()\nelements, it's far from flexible. If you need to select multiple\nelements, or if the element you want to select has no attribute,\nid\nwon't be of any use to you.\ngetElementById()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:334>\n", "text": "For more flexible element-selection needs, you can use\nand . Both methods select\nquerySelector() querySelectorAll()\nelements using a CSS-style selector string. The difference\nbetween them is that returns just the first\nquerySelector()\nelement to match the selector string and\nquerySelectorAll()\nreturns all of the elements that match the query selector.\nAlthough CSS selectors are beyond the scope of this book, you\ncan read more about them at\nhttps://developer.mozilla.org/en-\nor in HTML5 and CSS3 For\nUS/docs/Web/CSS/CSS_Selectors\nDummies (Wiley).\nListing 2-2 shows an example of using to\nquerySelectorAll()\nselect all elements in a list and reverse their order in the\ndocument.\nLISTING 2-2: Selecting elements with\nquerySelectorAll()\n<html>\n<head>\n<title>Make Guacamole</title>\n</head>\n<body>\n<h1>Ingredients</h1>\n<ul id=\"guacIngredients\">\n<li class=\"ingredient\">Avocados: $2 each</li>\n<li class=\"ingredient\">Onions: $1 each</li>\n<li class=\"ingredient\">Serrano peppers: $3/lb</li>\n<li class=\"ingredient\">Cilantro: $1.50/bunch</li>\n</ul>\n<button id=\"reverse\">Reverse List Order</button>\n<script>\ndocument\n.getElementById('reverse')\n.addEventListener('click', reverseOrder);\nfunction reverseOrder() {\nlet ingredientsList = document.getElementById('guacIngredients');\nlet ingredients = document.querySelectorAll('.ingredient');\nlet ingredientsArray = Array.from(ingredients);\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:335>\n", "text": "ingredientsArray.reverse();\ningredientsList.innerHTML = '';\ningredientsList.append(\u2026ingredientsArray);\n}\n</script>\n</body>\n</html>\nNotice that the function in Listing 2-2 uses the\nreverseOrder()\nfunction to convert the element collection returned\nArray.from()\nby to an array. This is necessary because,\nquerySelectorAll()\nalthough a list of elements can be accessed like an array, it's not\nan array and its prototype doesn't include the array methods,\nsuch as .\nreverse()\nCreating and adding elements to\nthe DOM\nThe method creates a new element node. Once\ncreateElement()\nyou have an element node, you can add attributes to it with the\nmethod and insert it into the DOM using the\ncreateAttribute()\nor method of the element node.\nappend() prepend()\nListing 2-3 shows how to create a to-do list that the user can add\nitems to. Each time the Add Item button is clicked, a new\n<li>\nelement is created and appended inside the element.\n<ul>\nLISTING 2-3: Creating and appending\nelement nodes\n<html>\n<head>\n<title>To Do List</title>\n</head>\n<body>\n<h1>Things I gotta do</h1>\n<ul id=\"toDoList\"></ul>\n<input type=\"text\" id=\"itemToAdd\"/>\n<button id=\"add\">Add Item</button>\n<script>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:336>\n", "text": "document.getElementById('add').addEventListener('click', addItem);\nfunction addItem() {\nlet itemInput = document.getElementById('itemToAdd');\nlet toDoList = document.getElementById('toDoList');\nlet newItem = document.createElement('li');\nnewItem.innerHTML = itemInput.value;\ntoDoList.append(newItem);\nitemInput.value = '';\n}\n</script>\n</body>\n</html>\nFigure 2-4 shows the result of opening the document from Listing\n2-3 in a browser and adding some items to the list.\nFIGURE 2-4: A simple to-do list, created using DOM methods.\nElement nodes\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:337>\n", "text": "The interface is the base class that's used to create\nElement\nvarious types of element nodes, such as or\nHTMLElement\nnodes. Table 2-5 shows the most-often-used\nSVGElement\nproperties of the interface.\nElement\nTABLE 2-5 Properties of the Element Interface\nProperty Description\nattributes An object containing the attributes of an element\nchildren The child elements of an element\nclassList The value of the class attribute of an element\nid The value of the id attribute of an element\nUsed for getting or setting the content (everything between the\ninnerHTML\nstarting tag and ending tag) of an element\nElement nodes have other properties that can be used to select\ncertain child elements or to select the elements around an\nelement. For example, the property returns the\nfirstElementChild\nfirst child of an element, returns the last child of\nlastElementChild\nan element, and and\nnextElementSibling previousElementSibling\ncan be used to find the elements on either side of an element.\nThese element selection properties used to be a good way to\nlocate elements that had no attributes, in the days before the\nid\nand methods. Today,\nquerySelector() querySelectorAll()\nhowever, it's much less common to need to select elements using\ntheir relationship to other elements.\nElement methods\nTable 2-6 lists some of the most useful methods of the Event\ninterface.\nTABLE 2-6 Useful Event Methods\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:338>\n", "text": "Method What It Does\naddEventListener() Registers an event handler on the element\nInserts node objects or strings into the children list\nafter()\nof the element's parent, after the element\nInserts node objects or strings after the last child\nappend()\nof the element\nInserts node objects or strings into the children list\nbefore()\nof the element's parent, before the element\ndispatchEvent() Dispatches an event to this node\ngetAttribute() Gets the value of an attribute for the element\nGets the descendants of the element that have\ngetElementsByClassName()\nclasses matching the passed value\nGets the descendants of the element that match\ngetElementsByTagName()\nthe passed tag name\nReturns true if the element has the specified\nhasAttribute()\nattribute\nTakes a selector string and returns a Boolean value\nmatches() indicating whether the element would be matched\nusing the string\nInserts node objects or strings before the first child\nprepend()\nof the element\nReturns the first node that matches the passed\nquerySelector()\nselector string, relative to the element\nReturns all nodes that match the passed selector\nquerySelectorAll()\nstring, relative to the element\nRemoves the element from the children list of the\nremove()\nparent\nNotice that many of the interface's methods match those\nElement\nof the interface. The only difference between using them\nDocument\non the document and using them on an element is that when you\nuse them with an element, they run relative to the element.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:339>\n", "text": "For example, the following statement uses the\nmethod to select all elements in the\nDocument.querySelectorAll()\ndocument that have the tag name and are children of\nli ul\nelements:\ndocument.querySelectorAll('ul>li')\nThe following statement uses the\nDocument.getElementById()\nmethod to select a element and then uses\nul\nmethod to select the children of that\nElement.querySelectorAll()\nelement that are elements:\nul li\ndocument.getElementById('todoList').querySelectorAll('li');\nAs a rule, keep your selections of elements as narrow as\npossible. If your goal is to select the list items in a particular\nlist in the document, the second method (just shown) is\nmuch better than the first because it eliminates the possibility\nof matching items in more than one element.\nul\nKnowing Your History\nThe interface gives you the ability to see and modify the\nHistory\nlist of URLs visited in the current browser window. Each tab in\nyour browser has a global variable named that's created\nhistory\nfrom the class. The object can be used to get\nHistory history\nand change the current location, which is the URL of the current\npage in the browser that shows up in the browser's location bar\nabove the browser window.\nThe interface has the following methods for changing the\nHistory\ncurrent URL and location (the page that is open in the window):\n: Changes the location to the previously open\nhistory.back()\nURL, which is the same as pressing your browser's Back\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:340>\n", "text": "button.\n: Changes to the next location in the\nhistory.forward()\nsession history, which is the same as pressing your browser's\nForward button.\n: Accepts a positive or negative number and\nhistory.go()\ncauses the location to change by the relative location in the\nsession history. For example, does the same\nhistory.go(-1)\nthing as .\nhistory.back()\nThese three methods are useful for traditional websites in which\nnavigation between screens is done by changing the open HTML\npage. For example, to go to the About Us page on a website, you\ncan change the location to\n. The useful aspect of\nhttps://www.example.com/about/index.html\nhaving URLs associated with various parts of an application is that\nit makes it possible for users to bookmark pages and for search\nengines to direct people to subpages of sites.\nIn a JavaScript application, however, everything happens in a\nsingle HTML page. Loading a different HTML page causes the\nJavaScript application to be reloaded, and any data in memory\nfrom the page you were working on is cleared out. For this\nreason, JavaScript applications used to switch between various\n\"pages\" by appending the hash mark ( ) to the URL, followed by\n#\nthe name of a resource. For example, in a JavaScript application,\nyou might use a URL like the following one to cause the\napplication to display the About Us page:\nhttps://www.example.com/index.html#aboutUs\nThe hash mark in a URL doesn't cause the page to reload, and\nthe JavaScript on the page can still find out what the value is\nafter the hash mark and use it to show different content. This\nstrategy made possible the use of direct linking to specific screens\nin JavaScript applications. However, it produces strange-looking\nURLs that aren't as easy to use as normal URL paths.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:341>\n", "text": "The solution to this problem was the introduction of two new\nmethods for the History interface: and\npushState()\n. Both methods change the location that's on the\nreplaceState()\naddress bar without reloading the page. The difference is that\nadds a new location to the session history and\npushState()\nchanges the URL on the location bar, whereas\nreplaceState()\nonly replaces the URL on the location bar, without creating a new\nitem in the session history state.\nUsing either or allows JavaScript\npushState() replaceState()\napplications to display different resources or screens based on the\nURL. If you use , however, the user can't move\nreplaceState()\nbackward or forward through the history.\nIn both client-side and server-side applications, showing different\nscreens for different URLs is known as routing. In Node.js, routing\nis done using the Express framework. In React, routing can be\ndone using React Router. Vue has a library called Vue Router.\nSvelte has several different libraries and frameworks that handle\nrouting.\nIt\u2019s possible, however, to write your own routing code without\nusing a library, as shown in Listing 2-4.\nLISTING 2-4: Routing with JavaScript\n<html>\n<head>\n<title>JavaScript Routing</title>\n</head>\n<body>\n<h1>What do you want to see?</h1>\n<nav id=\"navigation\">\n<button id=\"page1\">Page 1</button>\n<button id=\"page2\">Page 2</button>\n<button id=\"page3\">Page 3</button>\n</nav>\n<div id=\"main\"></div>\n<script>\nlet pageText = 'Welcome. Click a button.';\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:342>\n", "text": "document\n.getElementById('navigation')\n.addEventListener('click', changeRoute);\nfunction changeRoute(e) {\nlet requestedRoute = e.target.id;\nhistory.pushState({}, '', requestedRoute);\nroute();\n}\nfunction route() {\nlet currentRoute = location.pathname;\nfunction getLastURLSegment(path) {\nreturn path.substring(path.lastIndexOf('/') + 1);\n}\ncurrentRoute = getLastURLSegment(currentRoute);\nswitch (currentRoute) {\ncase 'page1':\npageText = 'This is page 1';\nbreak;\ncase 'page2':\npageText = 'This is page 2';\nbreak;\ncase 'page3':\npageText = 'This is page 3';\nbreak;\ndefault:\npageText = 'Route not found.';\n}\ndocument.getElementById('main').innerHTML = pageText;\n}\n</script>\n</body>\n</html>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:343>\n", "text": "Book 3\nReact\nContents at a Glance\nChapter 1: Getting Started with React\nUnderstanding ReactJS\nInitializing a Project with Vite\nIntroducing ReactDOM and the Virtual DOM\nChapter 2: Writing JSX\nLearning the Fundamentals of JSX\nUsing JavaScript Expressions in JSX\nConditionally Rendering JSX\nMaking a List\nStyling React Apps and Components\nChapter 3: Building React Components\nThinking in Components\nRecognizing the Two Types of Data\nFunction Components\nClass Components\nThe Component Lifecycle\nUsing the Lifecycle in Function Components\nComposing Components\nChapter 4: Using Data and Events in React\nEvent Handling in React\nMaking Forms with React\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:344>\n", "text": "Chapter 1\nGetting Started with React\nIN THIS CHAPTER\nGetting started with ReactJS\nCreating your first ReactJS project\nRendering in the browser with ReactDOM\n\u201cIt's not what happens to you, but how you react to it.\u201d\n\u2014EPICTETUS\nReactJS was created in 2012 by Facebook for use on the\nFacebook.com newsfeed and on Instagram. It was released as\nopen source in 2013 and quickly became one of the most popular\nJavaScript user interface libraries.\nUnderstanding ReactJS\nWhen ReactJS (also known as just React) was brand-new, it\nrepresented a new way of building and updating user interfaces.\nBehind the scenes, of course, React is using the DOM, which you\ncan read about in Book 2, Chapter 2, to dynamically update HTML\ndocuments. But it was the way that the React library built a layer\non top of the DOM that was revolutionary.\nTo web developers who are used to the old way of thinking about\nmanipulating the DOM, making the switch to thinking about user\ninterfaces in \u201cthe React way\u201d presents a bit of a challenge. To\nhelp programmers understand how React thinks about user\ninterfaces, React's creators wrote a brief article, \u201cThinking in\nReact,\u201d that still provides guiding principles for how the language\nevolves.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:345>\n", "text": "New React developers should check out the original \u201cThinking In\nReact\u201d article at\nhttps://reactjs.org/docs/thinking-in-\n.\nreact.html\nDistilling \u201cThinking in React\u201d\nReact treats user interfaces as a collection of independent and\nreusable components, somewhat like the nodes in a DOM tree.\nUnlike the HTML DOM, however, you're not limited to using only\ncertain kinds of nodes (such as HTML elements, in the case of the\nHTML DOM).\nInstead, React allows you to create custom components by\ncombining HTML elements with JavaScript and style rules. These\ncomponents can be used like custom HTML elements.\nYou can think of a React user interface as a higher level of\nabstraction than the user interface represented by the HTML\nDOM, as shown in Figure 1-1.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:346>\n", "text": "FIGURE 1-1: A React UI is a higher level of abstraction.\nBuilding a React UI\nYou can understand how React works by learning how to\napproach building a React app. The process, whether for a small\napp or a large one, generally follows these five steps:\n1. Break up the UI into a component hierarchy.\n2. Build a static version in React.\n3. Identify the minimal representation of UI state.\n4. Identify where the state should live.\n5. Add inverse data flow by using events and event handlers.\nStep 1: Design the component hierarchy\nFigure 1-2 shows a simple and familiar user interface.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:347>\n", "text": "FIGURE 1-2: A user interface mockup.\nIf it's your job as a React developer to translate this user interface\ninto React, your first task is to figure out how to split it up into\nindependent and reusable components. By thinking about\nindependence and reusability, you might decide that the user\ninterface shown in Figure 1-2 should be split into the following\ncomponents:\nThe logo\nThe search box\nThe Sign In button\nThe navigation bar\nThe search results\nAn individual search result\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:348>\n", "text": "The sidebar\nAnd just like that, you're finished with the first step in the React\ndevelopment process. Pat yourself on the back and move on!\nStep 2: Build a static version in React\nOnce you've thought about the various components that make up\nthe user interface, your next job is to translate each component\ninto static code. You can think of this part as similar to writing a\nsnippet of HTML for each component, except that you'll write a\nJavaScript function that returns the HTML.\nFor example, Listing 1-1 shows how you might create a simple\nstatic version of the navigation bar shown earlier, in Figure 1-1.\nLISTING 1-1: A Static Navigation Bar\nMockup\nfunction TopNavBar() {\nreturn (\n<nav>\n<ul>\n<li>All</li>\n<li>News</li>\n<li>Videos</li>\n<li>Images</li>\n<li>Books</li>\n<li>More</li>\n</ul>\n</nav>\n);\n}\nexport default TopNavBar;\nNotice that the statement of the preceding\nreturn\ncomponent seems to contain just simple HTML code. As you\ncan read about in Book 3, Chapter 2, this is not actually\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:349>\n", "text": "HTML. Rather, it's a templating language called JSX that looks\nlike HTML but compiles to JavaScript.\nAs you make each static component, you can save it in a file with\nthe same name as the function and export the function using a\ndefault export. You can read about creating JavaScript modules in\nBook 1, Chapter 12.\nLet's try another static component. Listing 1-2 shows what your\ncompleted static mockup for the search box might look like.\nLISTING 1-2: A Static Search Box Mockup\nfunction SearchBox() {\nreturn (\n<div>\n<input type=\"text\" placeholder=\"Search Google or type a URL\"/>\n</div>\n);\n}\nexport default SearchBox;\nOnce you've created all the components for your user interface,\nyou need to make a single component that wraps around all of\nthem, in the same as way a element wraps around all\n<body>\nvisible HTML elements in a document. This wrapper component is\nusually named .\nApp\nInside (and the other components as well) you can import\nApp\ncomponents and create instances of them and put them together\n(which is called composition) to build the structure for your user\ninterface, as shown in Listing 1-3.\nLISTING 1-3: Putting Together the\nComponents in App\nimport GoogleLogo from './GoogleLogo';\nimport SearchBox from './SearchBox';\nimport SignInButton from './SignInButton';\nimport NavBar from './NavBar';\nimport SearchResults from './SearchResults';\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:350>\n", "text": "import SideBar from './SideBar';\nfunction App() {\nreturn (\n<div>\n<div>\n<GoogleLogo/>\n<SearchBox/>\n<SignInButton/>\n</div>\n<NavBar/>\n<div>\n<SearchResults/>\n<SideBar/>\n</div>\n</div>\n);\n}\nexport default App;\nIf you haven't read Book 1, I highly recommend that you\ndo before proceeding with learning React. Having a strong\nunderstanding of how JavaScript works will make learning\nReact a simple task.\nStep 3: Identify the state\nThe next task in creating a React user interface is to figure out\nwhat data should cause the user interface to change. In React,\nthe data that causes the user interface to change is called state.\nFor instance, in the example user interface shown in Figure 1-2,\nthe most basic pieces of data are the search term and the search\nresults. Of these two, the one that causes the user interface to\nchange is the search term entered by the user. The rest of the\nuser interface simply reacts to this key piece of data to generate\nsearch results, the sidebar, advertising, and other elements.\nA user interface may have just one piece of state, as in this case,\nor it may have many different stateful values. Once you think you\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:351>\n", "text": "know what values in your UI represent the state, you're done with\nStep 3.\nIt's common for programmers to change their minds about\nwhat is the state of an application once they start\nprogramming it. The point of Step 3 isn't to set anything in\nstone but rather to start to get an idea of how your\napplication will change (or, react) in response to events.\nStep 4: Determine where the state should\nlive\nOnce you know what the state is, the next step is to figure out\nwhich component should hold the state. Think of state as a\nprivate property of an object (because that's what, in fact, it is).\nOnly the component that owns the state property can change it,\nbut the owner of a state property can share it with its children as\na read-only value, as shown in Figure 1-3.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:352>\n", "text": "\u00a9 John Wiley & Sons, Inc.\nFIGURE 1-3: How state works.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:353>\n", "text": "The state of an application must be at a higher level in the\nhierarchy than every component that uses the state. In the search\nengine example, both the search results and the sidebar make\nuse of the search term. The only component that's at a higher\nlevel in the hierarchy of components is the component.\nApp\nStep 5: Implement inverse data flow\nData in a React application flows from parent components to\nsubcomponents. If you need an event in a subcomponent to\nmodify data in its parent component, you have to use a callback\nfunction passed to the subcomponent, as shown in Figure 1-4.\nReact calls this 1-way data flow, but it's not any different from\nhow JavaScript normally works. For example, it's not possible to\npass data from one module to a module that makes use of it (its\nparent).\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:354>\n", "text": "\u00a9 John Wiley & Sons, Inc.\nFIGURE 1-4: Pass a function to a child to do inverse data flow.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:355>\n", "text": "The final step is to listen for events that will cause the state to\nchange and pass callback functions to the children that need to\ncause the state to be modified. In the search engine example, the\nevent listener can listen for the event on the\nsubmit <input>\nelement in the search component. When this is detected, the\nevent handler uses a callback function to update the state data in\nthe component with the new value.\nApp\nReact is component-based\nWhen you use React to build user interfaces in the browser, you\nneed to use two separate libraries:\nThe React library's job is to render a tree of components. It\nworks similarly to how a browser's rendering engine renders a\nDOM tree from HTML elements.\nThe ReactDOM library's job is to take the tree of components\nfrom the React library and use it to update the browser DOM.\nAs a ReactJS programmer, you need to concern yourself only with\nbuilding components and rendering them using the React library.\nThe work of changing what's shown in the browser window is\nhandled automatically by the ReactDOM library.\nThis brings me to the biggest difference between how React\nworks and how DOM manipulation libraries that came before it\nwork, which I explain in the next section.\nReact is declarative\nPerhaps the most important concept in React is that it's\ndeclarative. A declarative system is one in which you, as the\nprogrammer, provide a state you want the system to create,\nrather than specifically write the steps that the system will take to\nachieve those results.\nHow this works in React is that the components you write\ndescribe how the user interface will look and update, without\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:356>\n", "text": "worrying about the DOM manipulations needed to change what's\ndisplayed in the browser.\nThis is quite different from using the DOM properties and\nmethods you learn about in Book 2, Chapter 2 to change the\nDOM. Using the native JavaScript DOM APIs is an imperative way\nof working. It requires you, as the programmer, to write the steps\nnecessary to change what's displayed in the browser.\nReact is just JavaScript\nUntil now, you haven't seen any code that's specifically React, but\nif you've come this far in the book, you already understand most\nof the code that you'll use to write React applications. This is\nbecause React itself is a fairly small library for rendering a tree of\ncomponents. Unlike some other JavaScript libraries and\nframeworks, React doesn't have a lot of special functions and\ntools that you need to learn to be able to use it.\nReact developers say that React is idiomatic JavaScript,\nmeaning that it conforms to the way JavaScript is written\nrather than creates its own way of working.\nInitializing a Project with Vite\nIf you've read the first half of this chapter, you should have a\npretty good understanding of the fundamental ideas behind\nReactJS programming. In this section, I show you how to build\nyour first ReactJS applications in just a few minutes.\nIntroducing Vite\nUsing any modern front-end library requires a certain amount of\ntool setup and Node.js package installation. The tools and other\npackages you need to install for ReactJS development include the\nReact and ReactDOM libraries themselves, as well as tools for\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:357>\n", "text": "compiling, testing, and running React applications in your\ndevelopment environment.\nIt's possible to install and configure all these tools individually, but\nfortunately there are easier ways. Vite is one way to easily start a\nReact project. Using Vite, you can download, install, and run a\nbasic functioning React application within a few minutes\n(depending on the speed of your Internet connection and\ncomputer).\nAlthough Vite is now a popular way to start a React\nproject, it's not the only way. In fact, at the time of this\nwriting, a tool called Create React App is the officially\nsupported way to get started with React. Although Create\nReact App is great at what it does, many React programmers\nconsider it to be too slow and too difficult to configure.\nThings move fast in the React world, however, and it's\npossible that by the time you're reading this chapter, another\nproduct has replaced Vite as the easiest and fastest way to\nstart a React project.\nMany programmers prefer to use more complete frameworks for\nbuilding React, such as Next.js or a more customized and\ncustomizable build tool. One certainty is that anytime one tool,\nlanguage, or library becomes popular in the JavaScript world, it's\njust a matter of time until something better comes along and\neveryone turns against the old way \u2014 until they eventually return\nto the old way and the cycle repeats.\nOne of my goals with this book is to teach you enough\nthat you can decide for yourself which tools and libraries to\nuse, rather than follow the latest trends among YouTubers\nand JavaScript \u201cgurus.\u201d\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:358>\n", "text": "But enough of my rambling. Let's learn React. To use Vite, you'll\nuse Node.js and a package installer.\nI show you how to install the latest version of Node.js in\nBook 1, Chapter 1.\nLaunching the VS Code terminal\nYou can access Node.js and your package installer from any\nterminal window (such as Terminal on macOS or cmd.exe on\nWindows). For easy access to your terminal, VS Code includes a\nbuilt-in terminal window.\nTo access VS Code's terminal window, either choose Terminal\u21d2\nNew Terminal from the top menu or press Ctrl+` (backtick). A\nnew terminal window opens at the bottom of your VS Code\ninterface, as shown in Figure 1-5.\nFIGURE 1-5: The VS Code terminal window.\nYou can also open a terminal window at any location in your\ncurrent project by right-clicking on a folder name in the VS Code\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:359>\n", "text": "File Explorer pane and choosing Open in Integrated Terminal.\nFollow these steps to start a new ReactJS project with Vite from\nwithin the VS Code Integrated Terminal:\n1. Open an existing VS Code project or create a new one.\n2. Open the Integrated Terminal in VS Code.\n3. Type the following command into the Integrated Terminal:\nnpm create vite@latest my-react-app -- --template react\nYour terminal comes alive with downloading. Wait until it\nfinishes, and you'll see a message like the one shown in Figure\n1-6.\n4. Enter cd followed by the name of your project to make your\nnew project the current working directory.\nIn my example from Figure 1-6, I'd use .\ncd my-react-app\n5. Enter to install the project's dependencies.\nnpm install\nFIGURE 1-6: The message you see when Vite finishes creating a React app.\n6. Enter to start up the development server.\nnpm run dev\nAfter a moment, you see a message telling you the local\ndevelopment server address. If a browser doesn't\nautomatically start and open that address, you can open your\nbrowser and enter the address Vite shows you into the\naddress bar, or you can Ctrl+click (on Windows) or Cmd+click\n(on macOS) the link in the VS Code terminal.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:360>\n", "text": "Touring the structure of a React\napp\nFigure 1-7 shows what the Vite starter project looks like at the\ntime of this writing. You may see something slightly different\nbecause this app has changed several times in the past. The\nactual look of the starter project isn't important, however,\nbecause the whole idea of a starter project is to give you\nsomething to replace with your own app.\nFIGURE 1-7: The default Vite React starter project.\nBefore we start building an app, let's examine this basic starter\napp and see what it's made of. If you expand your project in the\nVS Code File Explorer pane, you can see that it contains several\nfolders and files at the top level:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:361>\n", "text": "node_modules\npublic\nsrc\n.gitignore\nindex.html\npackage-lock.json\npackage.json\nvite.config.js\nLet's look at each of these folders and files. As you read about\nthem, it may be helpful to open or expand them in VS Code to\nsee their contents.\nnode_modules\nThis folder contains all the Node.js modules that were\ndownloaded and installed when you used the\nnpm install\ncommand. You most likely won't ever need to directly modify\nanything in this directory.\npublic\nThe folder contains static assets, which are files that don't\npublic\nneed to be compiled to run in the browser, including images and\nother media files.\nAlthough you may need to occasionally do something with the\nfolder or add files to it, for the most part you won't need\npublic\nto touch the folder.\npublic\nsrc\nThe folder contains your app's source code, including\nsrc\nJavaScript modules, CSS, test files, and some configuration files.\nThis is where you will build your app.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:362>\n", "text": "If you expand the folder, you'll see that it contains several\nsrc\nfiles, a couple of CSS files, and a subdirectory named .\n.jsx assets\nYou can name React components using either a file\n.jsx\nextension or a extension. Many people prefer to use ,\n.js .jsx\nand Vite requires it by default.\nThe file is the main JavaScript file for the app. This is\nmain.jsx\nthe one that's loaded into the browser directly and uses the\nReactDOM library to update the browser DOM.\ncontains the module that creates the component.\nApp.jsx App\nThis is the component at the top of the component tree in\nyour React app.\ncontains CSS code used by the App component.\nApp.css\nAny other files that are in the directory aren't important right\nnow.\n.gitignore\nThe file is a configuration file that lists file and folder\n.gitignore\nnames that shouldn't be tracked in the project's Git repository. If\nyou open , you can see that it includes the project's\n.gitignore\nfolder, some log files, the directory (which is\nnode_modules dist\ngenerated when you run to create a compiled\nnpm run build\nversion of your project for deployment), and some files that are\ncreated by your code editor and are important only on your\ncomputer.\npackage-lock.json\nThe file is automatically generated when you\npackage-lock.json\ninstall node packages. It describes the tree of dependencies in\nyour folder and is used when you install the project.\nnode_modules\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:363>\n", "text": "package.json\nThe file contains meta data about your project,\npackage.json\nincluding general information, such as the name and version, as\nwell as lists of dependencies and scripts (such as and\nnpm run dev\n) you can run. When you install, update, or remove\nnpm run build\npackages, is automatically modified. You may need\npackage.json\nto modify yourself sometimes as well. You can learn\npackage.json\nmore about npm and in Book 6, Chapter 1.\npackage.json\nvite.config.js\nThe file configures the Vite tool. You may need to\nvite.config.js\nmodify this file at some point, but there's nothing you need to do\nhere now.\nNow that you understand what all the different files installed by\nVite do, let's make some changes.\nModifying a React project\nBefore starting to modify the project, make sure that it's still\nrunning in the development server. It isn't necessary for the\ndevelopment server to be running for you to make modifications,\nbut if it is running, you can see the effect that changes to the\ncode have on the browser window as you work. This feature is\ncalled hot reloading.\nYou can know whether the development server is running by\nrefreshing the app in the browser or looking at the terminal\nwindow in VS Code. If you can't type in the terminal window, your\nserver is likely still running.\nIf you want to stop and then restart your development\nserver, click in the terminal window and press Ctrl+C to halt\nthe development server, and then enter to start\nnpm run dev\nit again.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:364>\n", "text": "Follow these steps to make some modifications to the default\nReact project:\n1. Open in VS Code.\nApp.jsx\nNotice that this component is just a simple JavaScript function.\nThe statement contains something that looks like HTML\nreturn\nmarkup. This is JSX code, which gets compiled to JavaScript.\nYou can learn all about JSX in Book 3, Chapter 2.\n2. Edit the text in the function's statement.\nreturn\n3. Save the file and return to your web browser to see the\nchanges.\n4. Try making some other changes to .\nApp.js\nHere are some suggestions:\nRemove the containing linked elements.\ndiv img\nNotice that when you remove the element, the\nimg\nstatement for the logo is dimmed out. If you\nimport\nhover the mouse cursor over the part of the\nimport\nstatement with the yellow squiggly line, you see a tool\ntip telling you what's going on.\nOpen the linked stylesheet, , and change the\nApp.css\nbackground color for the selector.\n#root\nDelete everything between the\n<div className=\"App\">\nand tags.\n</div>\nInsert an element inside the\n<h1> <div\nelement and give your page a title \u2014\nclassName=\"App\">\nfor example, Learning React.\nAt this point, you can make changes to the root component, and\nwhen you save the file, the component is re-rendered and\nupdated in the browser. In the next section, I show you how that\nhappens.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:365>\n", "text": "Introducing ReactDOM and\nthe Virtual DOM\nReactDOM is the library that renders React components in the\nbrowser. The only place in a React app where ReactDOM is used\nis in the file. Inside , you see the following\nsrc/main.jsx main.jsx\ncode:\nReactDOM.createRoot(document.getElementById('root'))\n.render(\n<React.StrictMode>\n<App/>\n</React.StrictMode>\n)\nThis code passes a reference to an element in to the\nindex.html\nmethod. This creates the root element\nReactDOM.createRoot()\nwhere your entire React application is rendered. If you open\n, you can find the element that's passed to\nindex.html\n.\ncreateRoot()\nThe method of the root object returned by ReactDOM is\nrender()\nthen called and is passed to it. The element\n<App /> <App />\nrepresents an instance of the component. is called the\nApp App\nroot component.\nThe method is called automatically whenever the user\nrender()\ninterface generated by React is updated. ReactDOM then\ncalculates the difference between the new state of the application\nand what's displaying in the browser, and it updates the browser\nDOM to match the tree rendered by React. This process is known\nas the Virtual DOM.\nThe idea behind the Virtual DOM (VDOM) is that the React code\nyou write doesn't directly change the HTML DOM. Instead, React\ncreates (or renders) a \u201cvirtual\u201d DOM in memory that represents\nthe ideal state of the user interface. The virtual DOM rendered by\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:366>\n", "text": "React is passed to a renderer, such as ReactDOM, which\ncompares the new ideal state with the previous state to figure out\nhow to update the user interface.\nFigure 1-8 shows how the virtual DOM works.\n\u00a9 John Wiley & Sons, Inc.\nFIGURE 1-8: The React Virtual DOM.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:367>\n", "text": "Separating the library that makes components (React) from the\nrendering library makes it possible for React to be used for more\nthan just rendering user interfaces in the browser. By using a\ndifferent renderer, React can be used to generate other things,\nincluding native mobile apps, PDFs, and static HTML.\nCongratulations on creating your first React App!\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:368>\n", "text": "Chapter 2\nWriting JSX\nIN THIS CHAPTER\nWriting JSX elements\nUsing JavaScript in JSX\nRendering conditionally\nMaking lists\nStyling React components\n\u201cI write to discover what I know.\u201d\n\u2014FLANNERY O'CONNOR\nJSX is a template language for describing user interfaces. In this\nchapter, I show you how to write JSX to compose views in the\nbrowser DOM.\nLearning the Fundamentals of\nJSX\nMany people's first reaction to seeing React components is that\nthey seem to violate a fundamental best practice of writing web\ncode: Logic should be separate from presentation. In terms of\nweb pages, there exists a long tradition of placing HTML and\nJavaScript in different files.\nHowever, React is fundamentally a library for creating user\ninterfaces with reusable components. What's important in a React\nuser interface is the component, not the various languages the\ncomponent contains.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:369>\n", "text": "Rather than enforce a separation of languages, React emphasizes\nseparation of concerns by using components that are self-\ncontained and independent parts that can be assembled and used\nwithout external dependencies.\nJSX is not HTML\nListing 2-1 shows a simple React component.\nLISTING 2-1: A Simple React Component\nfunction SearchForm() {\nreturn (\n<form>\n<label htmlFor=\"searchterm\">\nSearch For:\n<input type=\"text\" id=\"searchTerm\"/>\n</label>\n<button>Search</button>\n</form>\n);\n}\nexport default SearchForm;\nAt first glance, it seems that the code in Listing 2-1 combines\nHTML and JavaScript and that it should generate a syntax error.\nThe key, however, is that the code in the statement isn't\nreturn\nHTML \u2014 it's JSX.\nJSX is XML\nJSX is an XML language for writing JavaScript. When React code\nis compiled, the JSX code gets transformed into calls to React\nmethods for generating HTML. Listing 2-2 shows what the JSX\ncode in Listing 2-1 compiles to before it runs in the browser.\nLISTING 2-2: Compiled JSX\nReact.createElement(\n'form',\nnull,\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:370>\n", "text": "React.createElement(\n'label',\n{ htmlFor: 'searchterm' },\n'Search For:',\nReact.createElement('input', {\ntype: 'text',\nid: 'searchTerm',\n})\n),\nReact.createElement('button', null, 'Search')\n);\nYou could write your React components by using nested\nmethods, but no one does that, because it\nReact.createElement()\nwould be much more difficult and there's no benefit to it. Keep in\nmind that before you test or deploy your React code, it gets\ntranslated to pure JavaScript. So, what the browser sees is all\nJavaScript.\nTranspiling with Babel\nThe name of the node package that converts JSX code to\nJavaScript is Babel. Babel is one of the programs that runs when\nyou enter in a project created with Vite.\nnpm run dev\nBabel is also responsible for making sure your React app will run\non every browser someone is likely to use. Because some\nbrowsers may not support the latest JavaScript syntax, Babel\nconverts the code you write to the equivalent code in an earlier\nversion of JavaScript that is supported by every browser. This\nprocess of converting from one version of JavaScript to another is\ncalled transpilation. Transpilation is what makes it possible for you\nto not worry about browser compatibility when you're writing\nJavaScript code.\nYou can see Babel in action and test it out by going to the web-\nbased interface to Babel at , which is\nhttps://babeljs.io/repl\nshown in Figure 2-1.\nWriting HTML output with JSX\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:371>\n", "text": "React has a built-in set of components that output HTML\nelements. To use these elements in the statements of\nreturn\nReact components, write them using the same element names\nyou use to write the HTML elements they output. For example, to\nproduce a HTML element in the browser, use the React\n<div>\nelement, which creates an instance of React's built-in\n<div> div\ncomponent.\nThese HTML-equivalent React components have the same\nattributes as the HTML components they produce, with just a few\nexceptions, changes, and additions.\nFIGURE 2-1: Using Babel's web-based interface.\nUsing built-in components\nIf you look closely at the React components you can see in Book\n2, Chapter 1 and in this chapter, you see several of the\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:372>\n", "text": "differences between using JSX and HTML. These are the most\nimportant differences:\nSeveral attribute names are different in JSX.\nJSX uses camelCase for attribute names.\nJSX elements must be valid XML.\nAttributes that are different in JSX\nWhen you write JSX, the attribute in HTML is written as\nclass\n, and the attribute in HTML is written as .\nclassName for htmlFor\nThe reason for these two differences is that and are\nclass for\nreserved words in JavaScript and using them in JSX could have\nunwanted side effects.\nJSX uses camelCase\nJSX attributes are always in camel case, whereas all HTML\nattributes are in lowercase or use dashes. For example, the event\nattributes in HTML are written in JSX as , , or\nonClick onSubmit\n.\nonChange\nJSX must be valid XML\nIn JSX, every opening tag must have a closing tag or be self-\nclosing. A self-closing tag has a slash before the closing angle\nbracket. For example, the HTML element is written in JSX as\n<br>\n.\n<br />\nHTML doesn't need to conform to the rules of XML. It's just fine\nto write certain HTML elements without a closing tag or a closing\nslash. These elements are called empty elements because they\nhave no content. The HTML , , and elements\n<br> <img> <input>\nare examples of empty elements. Here's how you write an\nelement in HTML:\n<input>\n<input type=\"text\" id=\"searchTerm\">\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:373>\n", "text": "In JSX, this line produces an error because the element isn't\nclosed. To close an element that doesn't require a closing tag in\nHTML, add a slash at the end of the tag. For instance, to make\nthe previous HTML element into valid JSX, write it like this:\ninput\n<input type=\"text\" id=\"searchTerm\"/>\nUsing JavaScript Expressions\nin JSX\nTo specify that something in JSX should be compiled as JavaScript\nrather than JSX code, surround it with curly braces. In the\nfollowing JSX code, a variable, , is inserted into the\nfirstName\ncontent of the element:\n<h1>\n<h1>Welcome, {firstName}</h1>\nYou can use curly braces to insert any JavaScript expression into\nJSX.\nAn expression is any unit of code that resolves to a value.\nJavaScript expressions are covered in Book 1, Chapter 4.\nJavaScript expressions can also be passed to elements as values\nof attributes. For example, in Listing 2-3 the value of the\nattribute is determined using the result of executing a\nclassName\nfunction.\nLISTING 2-3: Specifying an Attribute Value\nUsing an Expression\nfunction Message({ messageType, message }) {\nfunction getMessageClass() {\nif (messageType === 'error') {\nreturn 'errorStyle';\n} else {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:374>\n", "text": "return 'messageStyle';\n}\n}\nreturn <p className={getMessageClass()}>{message}</p>;\n}\nexport default Message;\nAlthough it's possible to use any JavaScript expression inside your\nJSX code by using curly braces, it's a best practice to limit your\nuse of JavaScript in JSX to presentational code. Presentational\ncode is code that directly affects what renders in the browser.\nCode such as event handlers and functions that perform the logic\nof your app should be outside the statement of your\nreturn\ncomponent.\nOne of the most common things to do with JavaScript in your JSX\nis conditional rendering, as described next.\nConditionally Rendering JSX\nConditional rendering is the use of a conditional statement to\ndetermine whether some piece of JSX should be rendered. You\nhave three main ways to perform conditional rendering in React,\nby using\nElement variables\n&&\nThe conditional operator\nUnlike other libraries, React doesn't provide its own method for\ndoing conditional rendering, so each of these techniques is just\nplain JavaScript.\nConditional rendering with\nelement variables\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:375>\n", "text": "JSX tags themselves are JavaScript expressions. As with any\nJavaScript expressions, you can assign JSX code to a variable.\nNote that because a variable assignment isn't an expression\n(because it doesn't resolve to a value), creating element variables\nmust be done outside of the statement.\nreturn\nIn Listing 2-4, a JSX element is assigned to a constant\n<h1>\nnamed . The variable can then be used in the\nheader header\nstatement instead of the element.\nreturn <h1>\nLISTING 2-4: Using Element Variables\nimport Message from './Listing0303';\nfunction WelcomeScreen() {\nconst header = (\n<h1>\n<Message message=\"Welcome!\" messageType=\"header\"/>\n</h1>\n);\nreturn { header };\n}\nexport default WelcomeScreen;\nNote the parentheses around the element in Listing 2-4.\n<h1>\nAlthough parentheses aren't required when using JSX, it's a good\npractice to use them anytime you have more than one line of JSX.\nTo do conditional rendering with element variables, set the value\nof a variable or constant outside of your statement using a\nreturn\nconditional statement, as shown in Listing 2-5.\nLISTING 2-5: Conditional Rendering with\nan Element Variable\nimport Message from './Listing0303';\nfunction WelcomeScreen({ loggedIn }) {\nlet header;\nif (loggedIn) {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:376>\n", "text": "header = (\n<h1>\n<Message message=\"Welcome\" messageType=\"header\"/>\n</h1>\n);\n} else {\nheader = (\n<header>\n<h1>\n<Message message=\"Please log in to continue!\"\nmessageType=\"header\"/>\n</h1>\n</header>\n);\n}\nreturn { header };\n}\nexport default WelcomeScreen;\nConditional rendering with &&\nThe operator evaluates expressions from left to right and\n&&\nreturns the value of the first falsy operand, or the last operand if\nall the values are truthy.\nYou can use this fact to render JSX conditionally. Because\n&&\ncreates an expression that returns a value, you can use\n&&\nexpressions inside the statement of your component by\nreturn\nsurrounding the expression with curly braces, as shown in\n&&\nListing 2-6.\nLISTING 2-6: Conditional Rendering with\n&&\nimport WelcomeMessage from './WelcomeMessage';\nfunction WelcomeScreen({loggedIn}){\nreturn (\n<div>\n{loggedIn&&<WelcomeMessage/>}\nNote: if you don't see the welcome message,\nyou're not logged in.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:377>\n", "text": "</div>\n)\n}\nexport default WelcomeScreen;\nIn this example, if the value of is , that value is\nloggedIn false\nreturned. A value of doesn't render anything. If the value of\nfalse\nevaluates to , the element is\nloggedIn true <WelcomeMessage />\nincluded in the JSX.\nYou can string together multiple expressions to require multiple\n&&\nvalues to be true for some JSX code to be included. For example,\nListing 2-7 requires both the and variables to be\nloggedIn isHuman\ntruthy.\nLISTING 2-7: Using Multiple Conditions\nwith &&\nimport WelcomeMessage from './WelcomeMessage';\nfunction Welcome({ loggedIn, isHuman }) {\nreturn (\n<div>\n{loggedIn && isHuman && <WelcomeMessage/>}\nNote: If you don't see the welcome message, you're\nnot logged in or you're a bot.\n</div>\n);\n}\nexport default Welcome;\nConditional rendering with the\nconditional operator\nThe conditional, or ternary, operator can also be used in the\nstatement to choose between different JSX expressions to\nreturn\ndisplay. Listing 2-8 shows how to use the conditional operator to\nchoose between two different elements.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:378>\n", "text": "LISTING 2-8: Conditional Rendering with\nthe Conditional Operator\nimport WelcomeMessage from './WelcomeMessage';\nimport Login from './Login';\nfunction Welcome({ loggedIn }) {\nreturn (\n<div>\n{loggedIn ? <WelcomeMessage/> : <Login/>}\n</div>\n);\n}\nexport default Welcome;\nMaking a List\nWhen you return an array from a React component, it's\nautomatically deconstructed into its individual elements. You can\nuse this fact to easily create lists in the user interface.\nFor example, it's common for a web API to return JSON data\ncontaining an array of objects. Listing 2-9 shows a simple\nexample of this type of JSON string.\nLISTING 2-9: A Sample JSON Array of\nObjects\n[\n{\n\"customerId\": \"1\",\n\"address\": \"234 Pine Street\",\n\"city\": \"Pinewood\",\n\"state\": \"IL\"\n},\n{\n\"customerId\": \"2\",\n\"address\": \"456 Elm Street\",\n\"city\": \"Elmwood\",\n\"state\": \"MI\"\n},\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:379>\n", "text": "{\n\"customerId\": \"3\",\n\"address\": \"678 Maple Street\",\n\"city\": \"Maplewood\",\n\"state\": \"OH\"\n},\n{\n\"customerId\": \"4\",\n\"address\": \"901 Chestnut Street\",\n\"city\": \"Chestnut\",\n\"state\": \"SC\"\n}\n]\nThe first thing to do to be able to use JSON data is to convert it\nto JavaScript by using the method, which you can\nJSON.parse()\nlearn about in Book 1, Chapter 11.\nOnce you've converted the JSON data to JavaScript, you can\nconvert the resulting array to an HTML list in the browser using\nJavaScript's method, as shown in Listing 2-10.\nArray.map()\nLISTING 2-10: Making a List from an Array\nfunction CustomerList({ customers }) {\nreturn (\n<ul>\n{customers.map(customer, () => (\n<li key={customer.id}>\n{customer.name}, {customer.address}, {customer.city},\n{customer.state}\n</li>\n))}\n</ul>\n);\n}\nexport default CustomerList;\nIn this example, the component receives an array of objects,\ncalled customers, from its parent component and returns a JSX\nelement containing one element for each item in the\n<ul> <li>\nsupplied array.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:380>\n", "text": "Notice that each element generated from the\n<li> Array.map()\nmethod has an attribute named . The attribute is required\nkey key\nby React anytime you create a list, and each must have a\nkey\nunique value. The attribute is used internally in React to make\nkey\nupdates to lists more efficient.\nStyling React Apps and\nComponents\nThe first thing to understand about modifying the style of React\ncomponents is that it can be done globally or locally.\nThe second thing to know is that, as with nearly everything in\nReact, adding style to components and applications is done using\nstandard JavaScript and CSS techniques.\nI tell you first about adding global styles to your React\napplication, and then I discuss how to style individual\ncomponents.\nAdding global styles\nYou have likely seen examples of using global styles already. In\nthe default component created by Vite, a stylesheet named\nApp\nis imported into the file. The syntax for importing\nApp.css App.jsx\nCSS into a React application using this method is straightforward\nand simple:\nimport './App.css';\nIf you try importing CSS into a JavaScript file, it normally causes\nan error because CSS isn't valid JavaScript. However, importing\nCSS into JavaScript is possible because the compilation process\nthat happens when you run or in a\nnpm run dev npm run build\nVite application automatically extracts any imported CSS files and\ninserts them into the HTML or creates CSS files that are linked to\nfrom the file.\nindex.html\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:381>\n", "text": "No matter where in your application you import CSS using this\nmethod, it becomes global CSS that affects every component in\nyour application. For your file, this is usually the desired\nApp.css\nbehavior because the component contains every other\nApp\ncomponent, and its styles should be global.\nIt's common to include a CSS framework like Bootstrap\n( ) in your App component, which makes\nhttps://getbootstrap.com\nthe styles included in Bootstrap available to every other\ncomponent.\nHowever, importing global CSS into subcomponents can have\nunexpected results if you're not aware of the fact that all\nimported CSS becomes global.\nIt's generally a good practice to think about global style sheets as\nbeing useful for keeping styles that control the layout of\ncomponents in the application and for styles that manage the\noverall theme of the application. For anything that's local to a\ncomponent, such as the layout of elements within a form or the\nway that headers and figures are styled within a component that\ndisplays blog posts, you should use local styles.\nUsing local styles\nReact components are meant to be reusable and self-contained\nparts. Ideally, you should be able to take a React component from\none application and use it in another application just by knowing\nwhat input it requires. For example, a component you\nDatePicker\nbuild for a social media app should be able to be used in an\nappointment scheduling app.\nWhen components rely on global styles for controlling how they\nlook internally, however, the dependency on some other condition\n(global styles) breaks this reusability.\nTo make components more reusable and independent, React\nencourages the use of JavaScript within a component to style\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:382>\n", "text": "elements that are local to that component. JavaScript styling of\ncomponents is enabled with the attribute.\nstyle\nUsing the style attribute\nIn HTML, elements that can be styled (which includes any\nelement that produces visible output) have an attribute named\n, into which you can pass CSS code that is applied only to\nstyle\nthat element. Passing CSS to a element is known as inline\nstyle\nstyling.\nIn HTML, the use of inline styles is generally discouraged because\nit makes maintenance of your web pages more difficult and\nbecause inline styles can't be reused.\nIn React, built-in components that produce visible HTML elements\nhave a attribute. Unlike the HTML attribute, however,\nstyle style\nthe React attribute doesn't take CSS as its value. Instead, it\nstyle\ntakes a JavaScript object. React converts the properties of this\nobject into JavaScript code that manipulates the CSS Object\nstyle\nModel in the browser.\nFor example, Listing 2-11 shows how to style a paragraph of text\nin a component by using the attribute.\nstyle\nLISTING 2-11: Using the Style Attribute\nfunction BlogPostBody({ blogBodyText }) {\nreturn (\n<p style={{ fontSize: '100%', marginBottom: '2.2rem', color: '#171717'\n}}>\n{blogBodyText}\n</p>\n);\n}\nexport default BlogPostBody;\nAlthough the markup in Listing 2-11 looks similar to inline styling\nin HTML, it's not at all the same thing. Keep in mind that when\nyou create a React component that displays a paragraph of text\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:383>\n", "text": "(for example), you're not just styling a single paragraph of text \u2014\nyou're creating a reusable way to style any paragraph of text by\nsimply passing it as an argument to this component.\nUsing style objects\nNotice that the value of the attribute in Listing 2-11 is an\nstyle\nobject literal that's enclosed in curly braces to tell JSX to treat it\nas literal JavaScript. The result is that there are double curly\nbraces around the style properties.\nBecause the values passed to the attribute are used to\nstyle\nmanipulate the CSSOM, property names you use must match the\nnames of the CSSOM properties. The biggest difference between\nCSS properties and CSSOM properties is that multiword CSS\nproperties use kebab-case and CSSOM properties use camelCase.\nFor example, in CSS the roundness of the corners of a border is\ncontrolled using the property, but in JavaScript you\nborder-radius\nuse the property.\nborderRadius\nThe other differences between CSS rules and style objects just\nhave to do with the way JavaScript objects are. For example, CSS\nrule sets separate multiple rules using semicolons. In JavaScript,\nproperties are separated using commas. In CSS, the values of\nproperties aren't put in quotes. For example, to specify a border\nradius for an element in CSS, you use the following code line:\n<div style=\"border-radius: 8px;\">\nHere's how you can convert the preceding CSS rule to a\nJavaScript style object and pass it to the attribute of a\nstyle\nReact component:\ndiv\n<div style={{borderRadius: \"8px\"}}>\nMaking style modules\nBecause style objects are JavaScript objects, they can be assigned\nto variables or constants, and the names of the variables or\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:384>\n", "text": "constants can be passed to the attribute. Once you've\nstyle\nassigned a style object to a constant or variable, you can extract\nit to a separate file and export it as a module. In this way, you\ncan define styles that have local scope but that can also be used\nin multiple components.\nOne common strategy for using style modules is to make a file\ncontaining local styles for each component in a user interface,\nsuch as the one shown in Listing 2-12.\nLISTING 2-12: Creating Style Modules\nexport const headline = {\nfontSize: '200%',\ncolor: '#333',\n};\nexport const authorName = {\nfontWeight: 'bold',\n};\nexport const bodyText = {\ncolor: '#000',\n};\nYou can then import the styles from this module individually or all\nat once into a React component, as shown in Listing 2-13.\nLISTING 2-13: Importing Style Modules\nimport * as styles from './Listing0212.styles.js';\nfunction Article({ headline, authorName, bodyText }) {\nreturn (\n<div>\n<h2 style={styles.headline}>{headline}</h2>\n<div style={styles.authorName}>by: {authorName}</div>\n<div style={styles.bodyText}>{bodyText}</div>\n</div>\n);\n}\nexport default Article;\nOther style strategies\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:385>\n", "text": "Because React doesn't enforce many rules about how components\nshould be assembled, many different libraries and techniques\nhave emerged to accomplish similar things. Nowhere is this more\nobvious, and sometimes confusing, than with styling components.\nEvery strategy for styling React components is some variation of\neither using CSS or using style objects. One particularly\ninteresting method that combines the familiarity of writing CSS\nwith the flexibility of using JavaScript is CSS Modules.\nCSS Modules allow you to write ordinary CSS code in a file with\nthe extension . You can then import the styles defined\n.module.css\nin the file into a React component, where they'll be\n.module.css\nscoped locally to that component by default.\nUsing CSS Modules allows you to use not only locally scoped CSS\nbut also a property named , which gives you the ability to\ncomposes\ncreate new styles by including properties defined in another style.\nListing 2-14 shows an example of a CSS Modules file.\nLISTING 2-14: A CSS Modules File\n.paragraph {\nfont-size: 16px;\nfont-family: Georgia serif;\ncolor: #333;\ntext-indent: 25px;\n}\n.redParagraph {\ncomposes: paragraph;\ncolor: red;\n}\nTo use the styles from the preceding CSS Modules file, import it\ninto a component as an object, as shown in Listing 2-15.\nLISTING 2-15: Importing and using CSS\nModules\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:386>\n", "text": "import styles from './Message.module.css';\nfunction Message(props) {\nreturn <p className={styles.redParagraph}>This text is red.</p>;\n}\nexport default Message;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:387>\n", "text": "Chapter 3\nBuilding React Components\nIN THIS CHAPTER\nWriting custom components\nReturning valid data from components\nPassing props\nFinding the state\nImplementing reactivity with functions and classes\nHooking into component lifecycle\nComposing with components\n\u201cA good engineer thinks in reverse and asks himself about the\nstylistic consequences of the components and systems he\nproposes.\u201d\n\u2014HELMUT JAHN\nReact components define React elements. In this lesson, I\ndescribe how React components work, how to pass data from\nparent components to child components, and how to assemble\ncomponents to build increasingly complex components through a\npattern called composition.\nThinking in Components\nReact components exist to describe an isolated piece of a user\ninterface. So far in Book 3, each component I describe has been a\nsimple JavaScript function that takes an object as an argument\nand returns a React element. As you can see shortly, components\ncan also be written as JavaScript classes.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:388>\n", "text": "Designing your own elements\nWhen you write a React component, what you're doing is creating\na user-defined element. When you're creating a web application,\nyou can think of user-defined elements as a way to create more\ncomplex and customized elements than those that exist in HTML.\nImagine that you're creating a new search engine, and you want\nit to have the same functionality as Bing.com (shown in Figure 3-\n1).\nFIGURE 3-1: Bing.com.\nOne important component of Bing.com that your new search\nengine will need is the weather widget. Rather than write all the\ncustom code that powers and styles this widget, wouldn't it be\nuseful if you could include the current local weather on your own\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:389>\n", "text": "search engine home page just by using a\n<GetLocalWeather>\nHTML element? This is the idea behind React.\nOf course, unless you can find a widget that someone else has\nwritten (and there's a good chance you can), you still need to\nwrite all the logic and presentational code that powers this\nelement. But, by creating a new element, you\n<GetLocalWeather>\ngreatly simplify how the user interface works, or at least you\nmake it much easier to think about how the application works.\nThinking about a user interface in terms of high-level components\nallows you to visualize and work with a user interface as complex\nas Bing.com with just a few elements, as shown in Listing 3-1.\nLISTING 3-1: A High-Level View of\nBing.com\nexport default function Bing() {\nreturn (\n<Homepage>\n<TopNav/>\n<SearchBox/>\n<NewsImageScroller/>\n<div>\n<div class=\"leftColumn\">\n<TopStories/>\n</div>\n<div class=\"rightColumn\">\n<Weather postalCode=\"97103\"/>\n<Sports/>\n</div>\n</div>\n</Homepage>\n);\n}\nSure, each of the custom elements shown in Listing 3-1 may\nconsist of hundreds or thousands of lines of code, but when\nyou're putting together the Bing.com home page, you don't need\nto know about how the underlying code works. You just use the\nelements.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:390>\n", "text": "Returning valid values\nThese are the valid return values for a component:\nOne JSX element\nNote that the single element returned by a component can be\nas deeply nested as you need, as long as it has a single\nelement that wraps around all the others.\nAn array\nWhen a component returns an array (including an array of\nelements), it's spread into the separate elements.\nA string\nA number\nundefined\nnull\nReturning an object (including an object that's part of an\narray) produces an error in React.\nRecognizing the Two Types of\nData\nTwo kinds of data make React components work: props and state.\nUnderstanding the differences between props and state and when\nto use each one is the key to making your React components\nupdate correctly and quickly.\nProps\nProps (short for properties) are data that components receive\nfrom their parent components. To pass props to a component,\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:391>\n", "text": "specify attributes in React elements. The attribute names become\nproperties of the props object in the component instance the\nelement creates.\nFor example, Listing 3-2 defines two components:\nand . creates\nParentComponent ChildComponent ParentComponent\nthree instances of by using JSX elements. Each\nChildComponent\ninstance receives a different value for an attribute\nChildComponent\nnamed .\nfirstName\nThe attribute from becomes a\nfirstName ParentComponent\nproperty of the object passed to , and each of the\nChildComponent\nthree instances of can access and use this\nChildComponent\nproperty.\nLISTING 3-2: Passing Props\nfunction ParentComponent(){\nreturn (\n<div>\n<ChildComponent firstName = \"Alex\"/>\n<ChildComponent firstName = \"Mallory\"/>\n<ChildComponent firstName = \"Jennifer\"/>\n</div>);\n}\nfunction ChildComponent(props){\nreturn (\n<div>Hi, my name is {props.firstName}.</div>\n)\n}\nWhen a parent component passes a value to a child component\nvia an attribute, the resulting property in the child component\ninstance is read-only (or immutable, to use a fancier term).\nProps are how parent components change the output of child\ncomponents.\nBecause props are read-only, a user interface that uses only props\nnever changes. If your goal is to create a static brochure-style\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:392>\n", "text": "web page using React, this is fine. But React is called React for a\nreason \u2014 it's designed to be reactive. To make React applications\nreactive, they need data that can change over time or in response\nto user actions.\nThe data that can change over time or in response to user actions\nin a React application is called state.\nGetting reactive with state\nState describes the data in your application that makes things\nhappen. For example, think about a flashlight. A flashlight\ntypically has two states it can be in: on or off. These states are\ncontrolled using a switch, and they cause the light to shine or not.\nIf you were programming a React component to operate a\nflashlight, you'd probably put a property or variable called in\nisOn\nyour component's state, as shown in Listing 3-3.\nLISTING 3-3: A Flashlight Component\nimport { useState } from 'react';\nfunction Flashlight() {\nconst [isOn, setIsOn] = useState(false);\nreturn (\n<div>\n<Lightbulb glowing={isOn} />\n<button onClick={() => setIsOn(!isOn)}>Change State</button>\n<button onClick={() => setIsOn(false)}>Turn off</button>\n</div>\n);\n}\nexport default Flashlight;\nfunction Lightbulb(props) {\nreturn (\n<div>\n<div\nclassName=\"bulb\"\nstyle={{\nwidth: '100px',\nheight: '100px',\nbackgroundColor: props.glowing ? 'yellow' : 'black',\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:393>\n", "text": "}}\n/>\n</div>\n);\n}\nIn the preceding example, clicking the button changes the\nBoolean value to its opposite, by using the negation operator\nisOn\n( ). The value of is passed to the component\n! isOn Lightbulb\nusing an attribute. Inside the component, is\nLightbulb glowing\navailable as a prop.\nJust as a real-life light bulb doesn't determine whether it's\nglowing and it can't turn itself on, the component has\nLightbulb\nno control over what the value of will be and it can't\nglowing\nchange it.\nState isn't always as simple as a Boolean value. Some React user\ninterfaces contain many changing parts and must use a great deal\nof state data. For example, consider a weather-tracking user\ninterface.\nTo display a live weather-radar map, a user interface must know\nabout temperature, precipitation, windspeed, time, and other\nfactors. All these factors change regularly, and all of them can\ncause changes to the user interface.\nFigure 3-2 shows a weather map widget.\nFIGURE 3-2: A weather map widget (source: weatherwidget.io).\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:394>\n", "text": "To determine what should be state in this widget, you first must\nmake a list of the various data points needed to generate the user\ninterface. Here's what I came up with:\nLocation\nLocal date and time\nSky conditions\nTemperature\nPrecipitation type\nPrecipitation amount\nDaily forecasted high and low temperatures\nWeather icon\nUnit preference (F or C)\nMore pieces of data are surely involved, but you get the idea.\nThe next thing to do is to ask yourself a few questions about each\npiece of data:\nDoes it change over time?\nCan it be determined or calculated based on another piece of\ndata?\nIs it passed to the component in the props object?\nIf you answer the first question with \"Yes\" and the other two\nquestions with \"No,\" that piece of data is likely state.\nIn my expert opinion (as someone who has experienced all kinds\nof weather), many of the data points required by this widget\nshould be stored as state. A couple of them, however, are likely\nprops. For example, the icon showing the type of weather can be\ncalculated based on a combination of the precipitation data, the\ntime of day, and the temperature. Other data, such as the highs\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:395>\n", "text": "and lows displayed on each day, can be stored in a single state\narray that might be called .\nweeklyHighsAndLows\nHow state enables reactivity\nOnce an instance of a component has been created and is active\nin the browser, it can be modified only by using a special setter\nfunction. In a class component, the function is . In a\nsetState()\nfunction component, it's a function returned by the\nuseState()\nhook.\nWhen you call one of these setter function, React makes the\nchange to the state that you request and then re-renders the\ncomponent using the new state data. The changed state may\ncause different props to be passed to a component's children and\nthose components will re-render with different data as well.\nThe process of re-rendering a component and its children in\nresponse to updated state is called updating.\nFunction Components\nFunction components are JavaScript functions that return a piece\nof the user interface. In previous versions of React (before React\n17), function components were also known as presentational, or\ndumb, components because they (like all JavaScript functions)\nlacked the ability to have data that could persist between\ninvocations.\nFor example, the function in Listing 3-4 shows a function\ncomponent that receives data and uses that data to output a list.\nLISTING 3-4: A Function Component\nExample\nfunction toDoList(props) {\nreturn props.todos.map((todo, index) => <li key={index}>{todo}</li>);\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:396>\n", "text": "export default toDoList;\nFunctions are stateless\nIf you call the function from Listing 3-4 and pass in different data,\nit renders a different list. However, each time you call a function,\nit's like the function has never been called before. You can't keep\ntrack of anything or maintain internal data (what React calls\nstate) in a function.\nIntroducing useState()\nThough nothing has changed about the nature of functions, React\nhas special functions, called React hooks, that allow function\ncomponents to store and retrieve data stored outside of the\nfunction. By using hooks, instances of React function components\ncan keep track of their state from one rendering to the next.\nThe hook is a method of the React object that can be\nuseState()\ncalled from a function component. When you invoke useState(), it\nreturns an array containing two elements: the value of a stateful\nvariable (which lives outside the function) and a function for\nupdating the value of that stateful variable.\nBy enabling function components to use data that sticks around\nbetween invocations, gives function components many\nuseState()\nof the benefits of classes, but without the complexity of classes.\nListing 3-5 shows the simplest possible demonstration of using\nstate in a function component.\nTake your time with this example. When you understand\nhow it works, you'll understand function components.\nLISTING 3-5: Using State in a Function\nComponent\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:397>\n", "text": "import { useState } from 'react';\nfunction Counter() {\nconst [currentCount, setCurrentCount] = useState(0);\nfunction incrementCount() {\nconst newCount = currentCount + 1;\nsetCurrentCount(newCount);\n}\nreturn <button onClick={incrementCount}>{currentCount}\n</button>;\n}\nexport default Counter;\nAs you ponder the simplicity and beauty of Listing 3-5, let me\npoint out a few things to you:\nThe return value of is deconstructed (using\nuseState()\nsquare brackets). By deconstructing the array, you gain\naccess to two separate values: a stateful variable and a\nfunction that updates that variable.\nThe stateful variable and its related function are\ndefined as constants. This statement is counterintuitive at\nfirst because the whole point of a stateful variable is to be\nmutable. However, keep in mind that this constant inside the\nfunction must be re-created each time the function\nCounter\nruns. When you use the function, you're\nsetCurrentCount()\nnot actually changing the value of the constant\ncurrentCount\n\u2014 you're changing the value of the property stored outside of\nthe function that uses to get the value of\nuseState()\n.\ncurrentCount\nYou can learn about React state and how to manage state in Book\n3, Chapter 4.\nNow that function components are no longer second-class citizens\n(and certainly no one calls them dumb any more!), most React\ndevelopers use function components almost exclusively.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:398>\n", "text": "However, if you studied classes in Book 1, Chapter 9, you are not\nconsidered most React developers! By understanding how class\ncomponents work, you gain a deeper knowledge of how React\nworks, and then you can decide whether to continue using\nfunction components everywhere it's possible or whether you\nwant to use class components.\nClass Components\nClass components are created by extending the\nReact.Component\nbase class. Listing 3-6 shows an example of a simple class\ncomponent that receives props and renders a to-do list.\nLISTING 3-6: A Class Component\nimport React from 'react';\nclass ToDoList extends React.Component {\nrender() {\nreturn this.props.todos.map((todo, index) => <li key={index}>{todo}\n</li>);\n}\n}\nexport default ToDoList;\nIf you compare the class component in Listing 3-6 with the\nfunction component in Listing 3-4, you'll notice that the function\ncomponent is nearly identical to the method of the class\nrender()\ncomponent. The only difference is that when a class component\nreceives the props object, it becomes a property of the class and\ntherefore must be referenced using the keyword.\nthis\nYou'll also notice that the class in Listing 3-6 has no constructor.\nAs you can see in Book 1, Chapter 8, if you don't provide a\nconstructor for a JavaScript class, the constructor is implied. If\nyou don't provide a constructor for a class that extends another\nclass, the constructor and the call to the parent component's\nconstructor (which is done using ) is also implied.\nsuper()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:399>\n", "text": "Unlike functions, classes can have their own persistent data. In a\nReact class component, is an object that's defined in the\nstate\nconstructor. Each element created from a class can maintain its\nown independent property.\nstate\nListing 3-7 shows the how the Counter component from Listing 3-\n5 can be rewritten as a class component.\nLISTING 3-7: Using State in a Class\nComponent\nimport { Component } from 'react';\nclass Counter extends Component {\nconstructor(props) {\nsuper(props);\nthis.state = {\ncurrentCount: 0,\n};\nthis.incrementCount = this.incrementCount.bind(this);\n}\nincrementCount() {\nconst newCount = this.state.currentCount + 1;\nthis.setState({ currentCount: newCount });\n}\nrender() {\nreturn (\n<button onClick={this.incrementCount}>\n{this.state.currentCount}\n</button>\n);\n}\n}\nexport default Counter;\nHere are the important things to notice about Listing 3-7:\nThe constructor is necessary because we're using it to define\nthe property and to bind the method.\nstate incrementCount()\nAs you can see in Book 1, Chapter 8, the method\nbind()\nreturns a new function that's bound to the object you pass to\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:400>\n", "text": "it. In this case, you're binding to the current\nincrementCount()\nobject. The effect is that no matter where you call\n, it affects the properties of the\nincrementCount() App\ncomponent.\nIn the method, you call . The\nincrementCount() setState()\nmethod is a method inherited from the base class\nsetState()\n( ). It takes an object as its value and merges that\nComponent\nobject into the object.\nstate\nSee if you can follow the logic of what happens, starting from the\nconstruction of an object using the class in Listing 3-7 and\nfollowing through to when the user clicks the button.\nThe Component Lifecycle\nThe life of a component starts when an instance of the\ncomponent is created (using a JSX element or the\nmethod). Between creation of the\nReact.createElement()\ncomponent instance and when it's removed from the DOM, every\nReact component completes a series of phases during its lifetime.\nThese phases are called the component lifecycle. The milestones\nof a component's life are marked by events, called lifecycle\nevents.\nThese are the most important events for a component:\nmount: This is when an instance of a component is created,\nrendered, and inserted into the browser window.\nupdate: This happens when the component receives new\ndata (as either state or props) that requires it to be re-\nrendered.\nunmount: When a component is no longer needed, it can be\nremoved, or unmounted, from the browser.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:401>\n", "text": "At each phase (and several subphases) of a component's lifecycle,\nthe component invokes methods, called lifecycle methods, in\nresponse to the lifecycle events.\nIn a class component, the default behavior of lifecycle methods\ncan be overridden to perform useful tasks.\nThe mounting methods\nThese lifecycle methods run while a component is mounting and\nafterward:\nconstructor()\ngetDerivedStateFromProps()\nrender()\ncomponentDidMount()\nKicking it off with the constructor\nThe method is run whenever an instance of a\nconstructor()\nJavaScript class is created. The constructor is where you can set\ninitial values for an object's properties and bind event handlers. In\na React class component, the constructor is where you initialize\nthe state object, as shown in Listing 3-8.\nLISTING 3-8: Setting State in the\nConstructor\nimport React from 'react';\nclass App extends React.Component {\nconstructor(props) {\nsuper(props);\nthis.state = {\nlocation: {\ncoords: { lat: 0, long: 0 },\n},\ntemperature: 0,\nwindSpeed: 0,\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:402>\n", "text": "precipitation: 0,\n};\n}\nrender() {\nreturn <div>Widget Goes Here</div>;\n}\n}\nexport default App;\nThe constructor is the only place in a React class component\nwhere you can modify the state object directly. This is for a very\ngood reason: The method runs before the\nconstructor() render()\nmethod. As a result, changes you make to in the\nthis.state\nare reflected in the output of the component.\nconstructor()\nGetting the derived state\nThe method is a static method: It\ngetDerivedStateFromProps()\nbelongs to the class rather than to instances of the class. This\nmethod receives the component's props and state and returns an\nobject that will be merged with the object.\nstate\nAlthough it's rarely used, this method exists (as its name implies)\nfor situations where the state depends on changes to props.\nThe official React documentation advises against using\nthis method, so I wouldn't be surprised if it eventually\ndisappears from the library.\nRendering the output\nThe method is the only method that's required in every\nrender()\ncomponent. In a class component, the method runs\nrender()\nwhen a component mounts and then again after every update to\nthe object.\nstate\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:403>\n", "text": "A function component is basically just the\nrender()\nmethod of a class component.\nThe return value of every component's method is the\nrender()\npiece of the user interface created by the component. The return\nvalue is usually described using JSX, although it may also be a\nstring, a number, an array, null, or undefined.\nListing 3-9 shows an example of rendering output that makes use\nof the state set in the constructor.\nLISTING 3-9: Rendering with State Data\nimport React from 'react';\nclass App extends React.Component {\nconstructor(props) {\nsuper(props);\nthis.state = {\nlocation: 'Chicago',\ncurrent_condition: {\ntemp_C: 0,\nwindspeedKmph: 0,\nprecipMM: 0,\n},\n};\n}\nrender() {\nreturn (\n<div>\n<h1>Today's weather for {this.state.location}</h1>\n<ul>\n<li>temperature: {this.state.current_condition.temp_C} C</li>\n<li>wind speed: {this.state.current_condition.windspeedKmph}\nkm/h</li>\n<li>\nprecipitation amount: {this.state.current_condition.precipMM} mm\n</li>\n</ul>\n</div>\n);\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:404>\n", "text": "}\n}\nexport default App;\nFinishing the mount\nOnly after a component has been rendered is it safe to do\noperations that modify the rendered component. The\nevent fires when the component has been\ncomponentDidMount\nrendered and inserted into the DOM tree, and it causes the\nmethod to run.\ncomponentDidMount()\nThe most common use for this lifecycle method is for kicking off\nnetwork requests to fetch data. For example, Listing 3-10 shows\nan example of using the method within\nfetch()\nto get data from a remote server and using\ncomponentDidMount()\nthat data to update the state.\nLISTING 3-10: Fetching Data Inside\ncomponentDidMount()\nimport React from 'react';\nclass App extends React.Component {\nconstructor(props) {\nsuper(props);\nthis.state = {\nlocation: 'Chicago',\ncurrent_condition: {\ntemp_C: 0,\nwindspeedKmph: 0,\nprecipMM: 0,\n},\n};\n}\ncomponentDidMount() {\nconst getWeatherData = async (city) => {\nconst response = await fetch( `https://wttr.in/${city}?format=j1`\n);\nconst weatherData = await response.json();\nthis.setState({ current_condition: weatherData.current_condition[0] });\n};\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:405>\n", "text": "getWeatherData(this.state.location);\n}\nrender() {\nreturn (\n<div>\n<h1>Today's weather for {this.state.location}</h1>\n<ul>\n<li>temp: {this.state.current_condition.temp_C} C</li>\n<li>wind: {this.state.current_condition.windspeedKmph} km/h</li>\n<li>precip amt: {this.state.current_condition.precipMM} mm\n</li>\n</ul>\n</div>\n);\n}\n}\nexport default App;\nThe updating methods\nThe updating cycle starts after a component has been mounted.\nUpdating happens in response to changes to a\ncomponent's state.\nThese are the updating lifecycle methods:\ngetDerivedStateFromProps()\nshouldComponentUpdate()\nrender()\ngetSnapshotBeforeUpdate()\ncomponentDidUpdate()\nYou already know about two of these lifecycle methods:\nand . They work the same\ngetDerivedStateFromProps() render()\nway during updating as they do during mounting. Take a look at\nthe other ones now.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:406>\n", "text": "Optimizing with shouldComponentUpdate()\nThe method is rarely needed nowadays.\nshouldComponentUpdate()\nThe idea of is that it returns a Boolean\nshouldComponentUpdate()\nvalue that determines whether the method is called.\nrender()\nBy returning from , you prevent\nfalse shouldComponentUpdate()\nthe re-rendering of a component. This can be useful in cases\nwhere you have a component in a tree of components that always\nrenders the same thing when it's passed the same props.\nProgrammers call this a pure function. If a component is a pure\nfunction, you can compare the previous props to the new props\npassed to it. If the previous and new props are the same, you can\nknow for certain that re-rendering the component produces the\nsame output, and you can tell the component to skip re-\nrendering.\nThe reason is rarely used now is that\nshouldComponentUpdate()\nthere's a better way. If you know that your class component\nalways returns the same output when given the same props, you\ncan create the component by extending the\nReact.PureComponent\nclass, as shown in Listing 3-11.\nLISTING 3-11: Extending\nReact.PureComponent\nclass Message extends React.PureComponent {\nrender() {\nreturn <h1>Hi, {this.props.firstName}</h1>;\n}\n}\nIn function components, you can accomplish the same thing as\nby using . caches\nReact.PureComponent React.memo() React.memo()\nthe return value of a function component and returns the cached\nvalue if the inputs to the component are the same as the last time\nit was rendered. Listing 3-12 shows a function component that\ndoes the same thing as the class component in Listing 3-11.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:407>\n", "text": "LISTING 3-12: Using React.memo() to\nOptimize Rendering of Function\nComponents\nconst Message = React.memo(function Message(props) {\nreturn <h1>Hi, {props.firstName}</h1>;\n});\nGetting a snapshot\nThe lifecycle method is called right\ngetSnapshotBeforeUpdate()\nbefore a component is inserted into the DOM. It can be used to\ncapture data about the current state of the browser before things\nchange. For example, if a component is rendering live data inside\nan element (for example, in a chat application), updating the\ncomponent resets the scroll position of the chat window. This\nbehavior can be truly frustrating to users.\nIf you capture the scroll position of the chat window before it's\nupdated and return it from , the return\ngetSnapshotBeforeUpdate()\nvalue is passed to the method, where you\ncomponentDidUpdate()\ncan return the scroll position to what it was before the update.\nFinishing the update\nThe method is the updating phase's\ncomponentDidUpdate()\nequivalent of the method. If you need to\ncomponentDidMount()\nupdate data using a network request or make changes to the\nDOM directly after a component updates, this is the place to do it.\nThe method has the potential to\ncomponentDidUpdate()\ncreate infinite loops if you're not careful. For example, if you\nmake an HTTP request in and update\ncomponentDidMount()\nthe state using the data from the request, that causes the\ncomponent to re-render, which causes\ncomponentDidMount()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:408>\n", "text": "to run, which updates the state and so on until your\ncomponent crashes.\nTo prevent infinite loops, you must wrap any calls to\nsetState()\ninside in a conditional statement that\ncomponentDidUpdate()\nchecks whether updating the state will result in the same state.\nUnmounting a component\nThe lifecycle method is called whenever a\ncomponentWillUnmount()\ncomponent is about to be removed from the browser DOM.\nRemoving a component may happen when a conditional\nstatement causes the component to no longer be rendered, or\nwhen you specifically unmount a component by using the\nmethod.\nroot.unmount()\nThe purpose of is that it gives you a\ncomponentWillUnmount()\nchance to clean up after your component. If your component uses\na global method, such as or ,\nsetInterval() setTimeout()\nis where you should clear these. If you\ncomponentWillUnmount()\ndon't, you could create a memory leak where the\nsetInterval()\nmethod continues to run even though the component that\ncreated it is no longer visible.\nListing 3-13 shows a component that creates a timer to update\nitself every second and show the current time. Calling\nin the method stops the\nclearInterval() componentWillUnmount()\ntimer from running if the component is unmounted.\nLISTING 3-13: Clearing an Interval in\ncomponentWillUnmount()\nimport React from \"react\";\nclass ShowClock extends React.Component {\nconstructor(props) {\nsuper(props);\nthis.state = { date: new Date() };\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:409>\n", "text": "componentDidMount() {\nthis.timer = setInterval(() => this.getNewTime(), 1000);\n}\ncomponentWillUnmount() {\nclearInterval(this.timer);\n}\ngetNewTime() {\nthis.setState({\ndate: new Date()\n});\n}\nrender() {\nreturn (\n<h1>\nThe current time is {this.state.date.toLocaleTimeString()}\n</h1>\n);\n}\n}\nexport default ShowClock;\nUsing the Lifecycle in\nFunction Components\nJust as you can use state in function components by using the\nhook, you can simulate certain lifecycle methods in\nuseState()\nfunction components by using the hook.\nuseEffect()\nThe hook takes a function as its first argument. By\nuseEffect()\ndefault, this function runs after the component mounts and then\nafter every update of the component. In this way, it functions like\na combination of the and the\ncomponentDidMount()\nlifecycle methods in class components. The\ncomponentDidUpdate()\nhook allows function components to access data\nuseEffect()\noutside of themselves (as in the case of asynchronous network\nrequests) or to perform other actions after rendering.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:410>\n", "text": "An operation done by a function that affects something\noutside the function is called a side effect. Unlike everything\nthat happens inside a function, performing a side effect can\nproduce an unpredictable result.\nListing 3-14 shows a function component that stores a value in\nthe browser's local storage every time a button is clicked.\nTechnically, the component in Listing 3-14 stores the value\nto local storage when the component mounts and every time\nit updates. Because the only time this component updates is\nwhen the value of changes, this isn't currently a\ncount\nproblem. You learn how to run an effect less often in the next\nsection.\nLISTING 3-14: Using useEffect to Perform\nSide Effects\nimport { useEffect, useState } from 'react';\nfunction RecordClicks(props) {\nconst [count, setCount] = useState(0);\nuseEffect(() => {\nlocalStorage.setItem('currentCount', count);\n});\nfunction incrementCount() {\nconst incremented = count + 1;\nsetCount(incremented);\n}\nreturn <button onClick={incrementCount}>Increment and Store: {count}\n</button>;\n}\nexport default RecordClicks;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:411>\n", "text": "Running effects less often\nMost of the time, effects should run less often than on every\nrender of a component. For example, a function to load data\nusing a network request may need to run only the first time the\ncomponent is rendered. Or, you may have a state variable in your\nfunction whose value determines whether an effect should run.\nFor these cases, takes a second argument, which is\nuseEffect()\nan array of dependencies. Here's the syntax of with\nuseEffect()\nthe optional dependency array:\nuseEffect(function, []);\nIf the dependency array is empty, the effect runs on only the first\nrender of the component. This simulates the\ncomponentDidMount()\nlifecycle method.\nIf the dependency array contains one or more dependencies, the\neffect runs when the component mounts and then every time the\nvalue of one of the dependencies changes. In this way,\ncan be used like .\nuseEffect() componentDidUpdate()\nListing 3-15 shows an improved version of the component from\nListing 3-14. In this version, the component attempts to load the\nvalue of from the browser's local storage the first time it\ncount\nrenders, and then updates the value when the value of the\ncount\nstate variable changes.\nBy setting a value to local storage and using its value to set the\ninitial value of a stateful variable, you can maintain the state of\nthe application from one browser session to another.\nLISTING 3-15: Creating Persistent State\nimport { useEffect, useState } from 'react';\nfunction RecordClicks(props) {\nconst [count, setCount] = useState(getSavedState());\nfunction getSavedState() {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:412>\n", "text": "const savedString = localStorage.getItem('currentCount');\nconst initialCount = JSON.parse(savedString);\nconsole.log(`currentCount: ${initialCount}`);\nreturn initialCount || 0;\n}\nuseEffect(() => {\nlocalStorage.setItem('currentCount', JSON.stringify(count));\n}, [count]);\nfunction incrementCount() {\nconst incremented = count + 1;\nsetCount(incremented);\n}\nreturn <button onClick={incrementCount}>Increment and Store: {count}\n</button>;\n}\nexport default RecordClicks;\nPerforming an effect on\nunmounting\nIf the function passed to returns a function, that\nuseEffect()\nfunction runs when the component is no longer rendered (that is,\nbefore it unmounts). As with the lifecycle\ncomponentWillUnmount()\nmethod in class components, this is where you can clean up any\ntimers that the effect has set or unregister event listeners.\nListing 3-16 shows the clock component from Listing 3-13 written\nas a function component. I've also added a container around the\nclock component that shows and hides the clock.\nLISTING 3-16: A Function Component with\na Timer\nimport { useState, useEffect } from 'react';\nfunction ClockContainer(props) {\nconst [visible, setVisible] = useState(true);\nreturn (\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:413>\n", "text": "<div>\n<button onClick={() => setVisible(!visible)}>\nToggle Clock Visibility\n</button>\n{visible && <Clock/>}\n</div>\n);\n}\nfunction Clock(props) {\nconst [date, setDate] = useState(new Date());\nuseEffect(() => {\nconst timer = setInterval(() => getNewTime(), 1000);\nreturn () => {\nconsole.log('stopping the timer\u2026');\nclearInterval(timer);\n};\n}, []);\nfunction getNewTime() {\nsetDate(new Date());\nconsole.log('tick\u2026');\n}\nreturn (\n<div>\n<h1>The current date and time are {date.toLocaleString()}</h1>\n</div>\n);\n}\nexport default ClockContainer;\nIf you run this component in a browser and watch the browser\nconsole, the first thing you notice is that runs the\nuseEffect()\nreturned function when the component first mounts and when it\nunmounts. This doesn't affect anything, because unregistering the\ntimer doesn't matter when the timer hasn't yet started.\nThe second thing you notice is that the messages in the console\nstop running when the clock isn't visible. Figure 3-3 shows the\nresult of rendering the component and clicking the button to hide\nthe clock.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:414>\n", "text": "FIGURE 3-3: Returning a function to stop the clock.\nComposing Components\nComposition is a pattern in React programming where larger\ncomponents are built by putting together smaller components.\nThe idea behind composition is to reduce duplication of code and\nincrease reusability of components.\nHow inheritance works in object-\noriented programming\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:415>\n", "text": "When you want to create a class that's a more specific version of\nan existing class in object-oriented programming, you extend it.\nFor example, if you have a class called , you can extend it to\nShape\ncreate a class called , as shown in Listing 3-17.\nCircle\nLISTING 3-17: Extending a Class to Create\na More Specific Class\nclass Shape {\nconstructor(color){\nthis.color = color;\n}\n}\nclass Circle extends Shape {\nconstructor(color,radius){\nsuper(color);\nthis.radius = radius;\n}\n}\nconst myCircle = new Circle(\"blue\",3);\nWhen you extend a class, the new class inherits the properties\nand methods of its parent class as well as the properties of that\ncomponent's parent, and so on to the base class, which is the\nclass in JavaScript.\nObject\nWhen creating user interfaces using React, every component is an\ninstance of the . Extending your own classes in\nReact.Component\nReact is discouraged. Instead, you use composition.\nThese three techniques are used to enable composition:\nPassing props\nUsing the prop\nchildren\nUsing custom hooks\nComposition using explicit props\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:416>\n", "text": "Suppose you need to display various types of messages in your\napplication, each with different styles, colors, and text. Using\ninheritance, you might think that the way to do it would be to\ncreate a generic component and then extend it to create\nMessage\n, , and classes.\nErrorMessage SuccessMessage WarningMessage\nHowever, this approach can be used only with class components,\nand the resulting components would end up having significant\namounts of duplicate code.\nUsing composition with explicit props, you can create a single\ncomponent that takes several props that can be used to\nMessage\nconfigure instances of the component for the type of\nMessage\nmessage you want to display, as shown in Listing 3-18.\nLISTING 3-18: Using Props to Create a\nMore Reusable Component\nfunction Message(props) {\nreturn (\n<div className={props.messageType}>\n<h1>{props.messageText}</h1>\n</div>\n);\n}\nexport default Message;\nBy wrapping this component inside another component, you can\ncreate an easily reusable component, as shown in\nErrorMessage\nListing 3-19.\nLISTING 3-19: Composing an\nErrorMessage Component\nimport Message from './Message';\nfunction ErrorMessage(props) {\nreturn <Message messageType=\"error\" messageText={props.errorMessage}/>;\n}\nexport default ErrorMessage;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:417>\n", "text": "Composition using the children\nprop\nAnother way to compose components is by using the\nchildren\nprop. The prop is automatically passed to every instance\nchildren\nof a component and contains the children of the React element\nthat creates the component instance.\nUsing allows you to create components that can\nprops.children\nbe \"wrapped around\" other components. For example, Listing 3-\n20 defines two components that use to apply their\nprops.children\nfunctionality to children.\nLISTING 3-20: Creating Components That\nuse props.children\nimport { useState, useEffect } from 'react';\nexport function SolidBorderBox(props) {\nreturn (\n<div style={{ border: '1px solid black', padding: '8px' }}>\n{props.children}\n</div>\n);\n}\nexport function Blink(props) {\nconst [visible, setVisible] = useState(true);\nuseEffect(() => {\nconst blinker = setInterval(() => setVisible(!visible), props.delay);\nreturn () => clearInterval(blinker);\n});\nreturn <div>{visible && props.children}</div>;\n}\nThe first component defined in Listing 3-20 applies a 1-pixel-wide\nblack border to any component. If you were doing web design in\nthe 1990s, you'll recognize the second component as a\nreplacement for the now out-of-favor HTML element.\n<blink>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:418>\n", "text": "To use the components created in Listing 3-20, import them into\nanother component and put their starting and ending tags around\nany other React elements, as shown in Listing 3-21.\nLISTING 3-21: Wrapping Components\nAround Other Components\nimport { Blink, SolidBorderBox } from './StyleElements';\nfunction App() {\nreturn (\n<SolidBorderBox>\n<Blink delay={1000}>\n<p>Important Message</p>\n</Blink>\n</SolidBorderBox>\n);\n}\nexport default App;\nComposition with custom hooks\nThe third method I talk about for using composition is to extract\nreusable functionality from components to create custom hooks.\nCustom hooks aren't technically a feature of React. Instead,\nthey're just JavaScript modules that use React's built-in hooks and\ncan then be imported into function components to easily share\nfunctionality.\nListing 3-22 shows a custom hook that returns a list of public\nGitHub repositories for any GitHub username that's passed to it.\nLISTING 3-22: The useGitHubRepos\nCustom Hook.\nimport { useState, useEffect } from 'react';\nexport default function useGitHubRepos(username) {\nconst [repos, setRepos] = useState([]);\nconst [isLoading, setIsLoading] = useState('idle');\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:419>\n", "text": "useEffect(() => {\nconst getRepos = async () => {\ntry {\nsetIsLoading(true);\nlet response = await fetch(\n`https://api.github.com/users/${username}/repos`\n);\nlet data = await response.json();\nsetRepos(data);\n} catch (error) {\nconsole.log(error);\n}\n};\ngetRepos();\nsetIsLoading(false);\n}, [username]);\nreturn [repos, isLoading];\n}\nTo use a custom hook in a component, import it and get the\nreturn value by invoking the function, as shown in Listing 3-23.\nLISTING 3-23: Using a Custom Hook\nimport './App.css';\nimport useGitHubRepos from './components/Chapter03/useGitHubRepos';\nfunction App() {\nconst [repos, isLoading] = useGitHubRepos('facebook');\nconst reposList = repos.map((repo, index) => (\n<li key={index}>\n<a href={repo.clone_url}>{repo.name}</a>\n</li>\n));\nreturn <div>{isLoading ? 'Loading\u2026' : reposList}</div>;\n}\nexport default App;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:420>\n", "text": "Chapter 4\nUsing Data and Events in\nReact\nIN THIS CHAPTER\nHandling events\nSetting listeners with event attributes\nInvestigating the synthetic event object\nSpecifying and binding event handlers\nPassing event handlers as props\nUsing event handlers in function components\nGathering data with forms\nUsing controlled and uncontrolled inputs\n\u201cIt is the quality of the moment, not the number of days, or\nevents, or of actors, that imports.\u201d\n\u2014RALPH WALDO EMERSON\nIn Book 3, Chapter 1, I cover the React development process,\nwhich starts with a static mockup and progresses through building\na static version, figuring out what is state, and implementing the\nstate. The last step in the process is to implement the ability for\nchild components to send information to a parent component, and\nthat's what this chapter is about.\nEvent Handling in React\nReact's event attributes resemble HTML event attributes. For\nexample, to set an event listener for the click event on a button\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:421>\n", "text": "DOM element, you can pass an attribute to a\nonClick <button>\nelement. You can use event attributes on any of React's built-in\n(HTML equivalent) JSX elements.\nAlthough the JSX event attributes resemble HTML event\nattributes, HTML event attributes and JSX event attributes have\nsome important differences:\nJSX event attributes are spelled using camelCase.\nJSX event attributes take a function as their value, whereas\nHTML event attributes take a string containing a function\ninvocation.\nAlthough it's tempting to think of JSX event attributes as working\nthe same way as HTML event attributes, the reality is that they're\ncompiled to calls to .\naddEventListener()\nUsing event attributes\nUsing JSX event attributes, you can set event listeners for at least\n64 different events. These include mouse events, such as\n, , and ; the generic and\nonClick onDrag onMouseDown onLoad onError\nevents; and form events such as , , and .\nonChange onInput onSubmit\nFor a complete list of the events React can handle, visit\n.\nhttps://reactjs.org/docs/events.html#form-events\nDispatching Synthetic Events\nReact wraps the event object that's always passed to an event\nhandler function with an object it calls the Synthetic Event. The\nobject name of the Synthetic Event is . By\nSyntheticBaseEvent\nwrapping native event objects, React can smooth out differences\nin the way browsers handle events as well as make some\nadditional properties available when an event is fired.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:422>\n", "text": "Listing 4-1 shows how to capture and view the properties of the\nobject.\nSyntheticBaseEvent\nLISTING 4-1: Viewing the Properties of the\nSyntheticBaseEvent Object\nfunction EventProps() {\nconst logClick = (e) => {\nconsole.dir(e);\n};\nreturn <button onClick={logClick}>Click Me</button>;\n}\nexport default EventProps;\nSpecifying a handler function\nThe value you pass to an event attribute can be an arrow\nfunction, the name of a function declared elsewhere, or a function\nreceived by the component via props.\nA common mistake when setting event handlers is to pass\na function call to an event attribute by including parentheses\nafter the function name. Doing so causes the function to be\ninvoked as soon as the component mounts, which can be\nconfusing and hard to debug.\nDeclaring a function outside of the statement of your\nreturn\ncomponent and using its name as the value of the event attribute\nis the most typical way to set event handlers. Listing 4-2 shows\nan example of this technique.\nLISTING 4-2: Defining a Named Event\nHandler Function\nimport { useState } from \"react\";\nfunction Counter(props) {\nconst [counter, setCounter] = useState(0);\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:423>\n", "text": "function increment(incrementBy = 1) {\nsetCounter(counter + incrementBy);\n}\nreturn <button onClick={increment}>{counter}</button>;\n}\nexport default Counter;\nPassing arguments to an event\nhandler\nBecause the event attribute takes the value of a function rather\nthan an invocation, you can't simply pass arguments to an event\nhandler function name, because that would require you to use\nparentheses. For example, the following code won't work as\nintended, because the function is simply invoked when the\ncomponent mounts:\n<button onClick={increment(2)}>Add 2</button>\nTo pass arguments (other than the event object) to an event\nhandler, you can define an arrow function that invokes an inner\nfunction, as shown in Listing 4-3.\nLISTING 4-3: Passing Arguments Using an\nInner Function\n<button onClick={()=>increment(2)}>Add 2</button>\nPassing functions as props\nYou don't need to define event handlers in the same component\nwhere you use them. As with any value, you can pass event\nhandlers from a parent component to a child component using\nprops.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:424>\n", "text": "Passing functions to subcomponents is how components\nlower in the component hierarchy can affect state in\ncomponents higher in the hierarchy.\nDefining event handlers in class components\nWhen you define a method in a class component, it can access\nthe component's value. Before you pass a method from a\nthis\nclass component to a subcomponent, you have to specify the\ncontext in which the function runs.\nWhen you pass an event handler function to an event\nattribute of a built-in element, you're passing the function to\na subcomponent. For example, in Listing 4-4, the\nhandleClick\nfunction is defined as a method of the class\nToggleVisibility\ncomponent. To set the context in which the function should\nrun, you must bind it to the class before\nToggleVisibility\npassing it to the element.\nbutton\nLISTING 4-4: Binding Class Methods\nBefore Passing Them As Attributes\nimport React from 'react';\nclass ToggleVisibility extends React.Component {\nconstructor(props) {\nsuper(props);\nthis.state = { visible: true };\n}\nsetVisibility() {\nthis.setState({ visible: !this.state.visible });\n}\nrender() {\nreturn (\n<div>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:425>\n", "text": "{this.state.visible ? this.props.children : ''}\n<button onClick={this.setVisibility.bind(this)}>\nShow/Hide\n</button>\n</div>\n);\n}\n}\nexport default ToggleVisibility;\nThe class in Listing 4-4 can be wrapped around\nToggleVisibility\nany component and renders a button that toggles whether the\ncomponent is rendered or not. Before the function that toggles\nthe state property can be passed to the\nvisible <button>\nelement, we bind it.\nBinding a function can be done directly in the element's event\nattribute, as shown in Listing 4-4, or it can be done in the\nconstructor.\nTo bind a function in the constructor, set the value of the function\nvariable to the new function created using the method, as\nbind()\nshown in Listing 4-5.\nLISTING 4-5: Binding a Method in the\nConstructor\nimport React from 'react';\nclass ToggleVisibility extends React.Component {\nconstructor(props) {\nsuper(props);\nthis.state = { visible: true };\nthis.setVisibility = this.setVisibility.bind(this);\n}\nsetVisibility() {\nthis.setState({ visible: !this.state.visible });\n}\nrender() {\nreturn (\n<div>\n{this.state.visible ? this.props.children : ''}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:426>\n", "text": "<button onClick={this.setVisibility}>Show/Hide</button>\n</div>\n);\n}\n}\nexport default ToggleVisibility;\nThere are two benefits to binding event handler methods in the\nconstructor:\nIf you pass the method to more than one element, it needs to\nbe bound only once.\nBinding the event handler in the event attribute causes the\nbound function to be re-created with every render, whereas\nthe constructor runs only once, and then the function is\naccessible as long as the class instance exists.\nNot binding an event handler in a class component is one of the\nmost common mistakes that React developers make. There are\nways to avoid needing to bind methods, however.\nDefining methods using arrow syntax\nArrow functions inherit their scope from the scope they're defined\ninside of, which is called lexical scoping. Because arrow functions\nhave lexical scope, there's no need to bind them before passing\nthem as arguments.\nFunctions defined using the keyword, on the other hand,\nfunction\nbind their own value, which is why we need to specifically\nthis\nbind them to use them in a different context.\nListing 4-6 shows a class component with its event handler\ndefined as an arrow function and passed to an element\n<input>\nusing an event attribute.\nLISTING 4-6: Defining Event Handler\nFunctions Using Arrow Function Syntax\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:427>\n", "text": "import React from 'react';\nclass VolumeSlider extends React.Component {\nconstructor(props) {\nsuper(props);\nthis.state = { volume: 0 };\n}\nchangeVolume = (e) => {\nthis.setState({ volume: e.target.value });\n};\nrender() {\nreturn (\n<>\n<p>Turn the volume up! Current Volume: {this.state.volume}</p>\n<input\ntype=\"range\"\nvalue={this.state.volume}\nmin=\"0\"\nmax=\"11\"\nonChange={this.changeVolume}\n/>\n</>\n);\n}\n}\nexport default VolumeSlider;\nPassing event handler functions from\nfunction components\nThe other way to avoid having to think about binding event\nhandlers is to use function components. Because function\ncomponents don't have a value, any function you define\nthis\ninside a function is automatically scoped to that function.\nListing 4-7 shows a function component that does the same thing\nas the class component in Listing 4-6.\nLISTING 4-7: VolumeSlider Written Using\na Function Component\nimport { useState } from 'react';\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:428>\n", "text": "function VolumeSlider(props) {\nconst [volume, setVolume] = useState(0);\nfunction changeVolume(e) {\nsetVolume(e.target.value);\n}\nreturn (\n<>\n<p>Turn the volume up! Current Volume: {volume}</p>\n<input\ntype=\"range\"\nvalue={volume}\nmin=\"0\"\nmax=\"11\"\nonChange={changeVolume}\n/>\n</>\n);\n}\nexport default VolumeSlider;\nWhether you define an event handler function in a\nfunction component using the keyword or arrow\nfunction\nsyntax, you don't need to bind it.\nMaking Forms with React\nHTML form fields, by default, maintain their own internal state. In\nother words, when you type into an input field or select an option\nfrom a drop-down menu, or make changes to any changeable\nform field, the value of an HTML element changes.\nIn React applications, however, allowing a form input to maintain\nits own state makes components less predictable. By default,\nchanging the value of an input doesn't change the underlying\ndata in a component. As a result, it's possible for the content that\ndisplays in a form input to be out of sync with the state data of\nyour component.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:429>\n", "text": "Other front-end libraries allow your form to automatically update\nthe application's state and allow your application to control the\nvalue of the form input. This is what is meant by two-way data\nbinding.\nReact uses one-way data binding. What this means is that form\ninputs can be controlled only by React state. If you want to\nchange the value of an input, you need to do it by updating the\nstate (using an event). The updated state then causes the form\ninput to be updated with the new value. This is called a controlled\ninput.\nUsing controlled inputs\nTo create a controlled input, specify a attribute for any\nvalue\n, , or element, like this:\n<input> <select> <textarea>\n<input name=\"firstName\" type=\"text\" value=\"\"/>\nBy itself, this element is useless. It creates an HTML input\nelement that you can't type into. Or, rather, you can type into it,\nbut you can't see what you're typing, and neither can React.\nTo make a controlled input useful, first create a stateful variable\nto hold the value of the input and a function for updating it, like\nthis:\nconst [firstName, setFirstName] = useState('');\nNext, listen for the event on the input and use it to update\nchange\nthe stateful variable, like this:\n<input name=\"firstName\" type=\"text\" value={firstName} onChange=\n{(e)=>setFirstName(e.target.value)}/>\nNow whenever you type into the input element, it updates the\nstateful variable, which causes the input element to update its\nvalue. Listing 4-8 shows a complete example of using controlled\ninputs in a function component and demonstrates how to control\nseveral different kinds of form elements.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:430>\n", "text": "LISTING 4-8: Using Controlled Inputs\nimport { useState } from 'react';\nfunction CustomerServiceSurvey(props) {\nconst [yourName, setYourName] = useState('');\nconst [yourEmail, setYourEmail] = useState('');\nconst [rating, setRating] = useState('');\nconst [comments, setComments] = useState('');\nreturn (\n<div>\n<div>\nYou've entered the following: <br/>\nRating:{rating}\n<br/>\nComments:{comments}\n<br/>\nName:{yourName}\n<br/>\nEmail:{yourEmail}\n<br/>\n</div>\n<h1>How was your experience with our website today?</h1>\n<select\nname=\"rating\"\nvalue={rating}\nonChange={(e) => setRating(e.target.value)}\n>\n<option>Excellent</option>\n<option>Pretty Good</option>\n<option>Fair</option>\n<option>Bad</option>\n<option>Horrible</option>\n</select>\n<h1>Would you like to leave any comments?</h1>\n<textarea\nname=\"comments\"\nvalue={comments}\nonChange={(e) => setComments(e.target.value)}\n/>\n<h1>\nPlease provide your contact information if you'd like to be\ncontacted.\n</h1>\nYour name:\n<input\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:431>\n", "text": "name=\"yourName\"\nvalue={yourName}\nonChange={(e) => setYourName(e.target.value)}\n/>\n<br/>\nYour email:\n<input\nname=\"yourEmail\"\nvalue={yourEmail}\nonChange={(e) => setYourEmail(e.target.value)}\n/>\n</div>\n);\n}\nexport default CustomerServiceSurvey;\nNotice that setting the value of inputs and\n<select> <textarea>\ninputs in React's built-in components is different from how HTML\nelements work:\nWhereas the value of an HTML input is set by setting\n<select>\nthe attribute on an child, React matches the\nselected <option>\nvalue of a attribute on the input with the value\nvalue <select>\nof an .\n<option>\nWhereas the HTML element uses its content (the\n<textarea>\ncontent between the beginning and ending tags) as the value,\nReact's built-in element uses the value of the\n<textarea> value\nattribute.\nUsing uncontrolled forms\nSome uses for HTML inputs in a web application don't require\nuser input to be stored in state. In these cases, you can choose to\nuse an uncontrolled input element, which is one that maintains,\nby default, its own internal state in the same way that HTML\nworks.\nAn example of a time when you might choose to use an\nuncontrolled input is in a long form that simply sends an email\nrather than do anything with the input values inside the user\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:432>\n", "text": "interface. To create an uncontrolled input, omit the\nvalue\nattribute.\nListing 4-9 shows an example using a form made with\nuncontrolled inputs.\nLISTING 4-9: Creating Uncontrolled Inputs\nfunction CustomerServiceSurvey(props) {\nreturn (\n<div>\n<h1>How was your experience with our website today?</h1>\n<select name=\"rating\">\n<option>Excellent</option>\n<option>Pretty Good</option>\n<option>Fair</option>\n<option>Bad</option>\n<option>Horrible</option>\n</select>\n<h1>Would you like to leave any comments?</h1>\n<textarea name=\"comments\"/>\n<h1>\nPlease provide your contact information if you'd like to be\ncontacted.\n</h1>\nYour name:\n<input name=\"yourName\"/>\n<br/>\nYour email:\n<input name=\"yourEmail\"/>\n</div>\n);\n}\nexport default CustomerServiceSurvey;\nIn uncontrolled inputs, the values of the inputs are handled by\nthe DOM. One way to get the values of uncontrolled inputs in\nJavaScript is by using the of the input. The value of the\nid id\nattribute is accessible as a property of the object, as\nwindow\nshown in Listing 4-10.\nLISTING 4-10: Getting the Values of\nUncontrolled Inputs from the Window\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:433>\n", "text": "Object\nfunction CustomerServiceSurvey(props) {\nfunction onSubmit(e) {\ne.preventDefault();\nalert(\n`You rated us ${window.rating.value} and you had the following\ncomments: ${window.comments.value}`\n);\n}\nreturn (\n<div>\n<h1>How was your experience with our website today?</h1>\n<form onSubmit={onSubmit}>\n<select name=\"rating\" id=\"rating\">\n<option>Excellent</option>\n<option>Pretty Good</option>\n<option>Fair</option>\n<option>Bad</option>\n<option>Horrible</option>\n</select>\n<h1>Would you like to leave any comments?</h1>\n<textarea name=\"comments\" id=\"comments\"/>\n<input type=\"submit\" value=\"Submit\"/>\n</form>\n</div>\n);\n}\nexport default CustomerServiceSurvey;\nThough accessing the values of uncontrolled inputs\nthrough the DOM can be useful in some circumstances, avoid\nusing the technique shown in Listing 4-10 to change the\nvalues of HTML elements in your React components, because\nit bypasses the way React manages updates and produces\nunexpected results.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:434>\n", "text": "Book 4\nVue\nContents at a Glance\nChapter 1: Getting an Overview of Vue\nComparing Vue to React\nScaffolding Your First Vue.js Application\nMounting a Root Component\nExploring Vue's Two Styles\nInstalling Vue DevTools\nChapter 2: Introducing Vue Components\nIntroducing the Single-File Component\nNaming Components\nFollowing the Component Lifecycle\nHandling Errors in Components\nChapter 3: Making Vue Templates\nWriting HTML Templates\nUsing JavaScript in Templates\nIntroducing Directives\nConditional Rendering\nRendering Lists\nComposing with Slots\nAdding Style to Components\nChapter 4: Using Data and Reactivity\nPassing and Using Props\nBinding Data to Templates\nInitializing and Changing Reactive Data\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:435>\n", "text": "Introducing ref()\nComputing Properties\nReacting to State Changes with Watch()\nChapter 5: Responding to Events\nSetting Listeners with v-on\nUsing Event Modifiers\nBinding Forms to Events and Data\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:436>\n", "text": "Chapter 1\nGetting an Overview of Vue\nIN THIS CHAPTER\nLearning how Vue is different from React\nInstalling Vue.js\nUsing create-vue\nCreating a Vue application instance\nMounting and configuring apps\nChoosing between Vue's two APIs\n\u201cI've always felt that a person's intelligence is directly reflected by\nthe number of conflicting points of view he can entertain on the\nsame topic.\u201d\n\u2014ABIGAIL ADAMS\nVue is an incrementally adoptable and reactive front-end\nJavaScript framework. In this chapter, I spell out what that means\nand let you know how to quickly get started with your first Vue\nfront-end.\nComparing Vue to React\nVue.js and ReactJS have many similarities. Because of that, if you\nhaven't read Book 3 yet, I suggest you do so before you proceed\nwith learning to use Vue.js. However, knowing React isn't a\nrequirement, and learning Vue.js is simple enough that you'll be\nable to follow along and learn to write Vue.js applications, even if\nyou haven't read Books 1\u20133.\nThese are a few of the similarities between ReactJS and Vue.js:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:437>\n", "text": "Vue.js updates the browser DOM based on changes to special\nvalues in your application that are referred to as the state of\nthe application.\nVue creates user interfaces from components that are written\ndeclaratively.\nVue uses a virtual DOM to calculate differences between what\nyour application renders and what's in the browser DOM.\nBefore you assume that Vue.js is the same thing as ReactJS, you\nshould know about important differences between the two,\nincluding these:\nVue.js is incrementally adoptable \u2014 you can easily use a\nVue.js component in another non-Vue.js application. Although\nit's possible to do the same with ReactJS, almost no one does\nthat.\nVue.js templates can be written using ordinary HTML, whereas\nReactJS requires the use of JSX.\nVue.js is a framework, whereas ReactJS is a library. As you can\nsee later in this chapter, Vue.js provides much more structure\nand built-in functionality than React. In practice, this means\nthat ReactJS gives developers more freedom, though Vue.js\noffers more simplicity.\nScaffolding Your First Vue.js\nApplication\nEnough theory \u2014 let's make something!\nIn this book, I use the latest available version of Vue.js:\nVue 3. Many people and companies are still using Vue 2, and\na new version of Vue may even be out by the time you read\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:438>\n", "text": "this chapter. Though Vue 3 and Vue 2 have some differences\nand any new version of Vue is likely to have substantial\nchanges from Vue 3, you'll be able to quickly adapt your\nknowledge from JavaScript All-in-One For Dummies to any\nversion of Vue you're likely to encounter.\nBootstrapping with vue-create\nThe easiest way to get started with a new Vue project is to\ngenerate the scaffolding and set up tooling using the create-vue\nNPM package. Under the hood, create-vue uses the same tool you\nmay have read about for bootstrapping React applications: Vite.\nSo some of the following steps may look quite familiar. Here\u2019s how\nto get started:\n1. Create a new project by opening an empty folder in VS Code.\nOf course, you can also install your Vue projects in a\nsubdirectory of your existing code folder.\nSee Book 1, Chapter 2 if you need a refresher on how\nto set up projects in VS Code.\n2. Open the VS Code Integrated Terminal in the folder where you\nwant to make your Vue project.\n3. Type the following command into the terminal window:\nnpm init vue@3\nYou'll see a message asking whether you want to install\ncreate-vue. Press Enter to agree.\n4. When several more questions appear, choose the default\noptions for each one, unless you know that you want to\nchoose a different one.\nFigure 1-1 shows what the questions were and how I\nanswered them at the time I wrote this chapter.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:439>\n", "text": "FIGURE 1-1: Answering questions and installing vue-create.\n5. Enter cd vue-project to change the working directory to your\nnew project's directory.\n6. Enter npm install to install your project's dependencies.\n7. Enter npm run dev to start your project in Development\nmode.\n8. Go to your web browser and either enter the URL shown in\nthe terminal after you run npm run dev or \u2318 +click (on\nmacOS) or Ctrl+click (on Windows) the link in the terminal.\nThe default vue-create application displays in your browser, as\nshown in Figure 1-2.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:440>\n", "text": "FIGURE 1-2: The default vue-create app.\nCongratulations! You've created your first Vue application. Feel\nfree to either click through the links in the default vue-create\napplication to learn more or continue to the next section.\nInstalling Volar\nBefore I help you start exploring your shiny new Vue app, I show\nyou how to install a tool to make Vue development much easier:\nVolar. It\u2019s an extension for VS Code. Follow these steps to install\nVolar:\n1. Open the Extensions panel in VS Code.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:441>\n", "text": "See Chapter 1 in Book 1 to refresh your memory on\naccessing the Extensions panel.\n2. Search for Volar in the Extensions panel.\nThe first result is Vue Language Features (Volar).\n3. Click on Vue Language Features (Volar) in the Extensions\npanel and then click Install in the window that opens.\nExploring the structure of a Vue\napp\nClick the Explorer icon (the top one) in VS Code to return to\nviewing your project.\nInside your new Vue project, you'll see some files and folders. At\nthe top level of your project, these files and folders should look\nsimilar to the ones generated by Vite's ReactJS template, which\nyou learn how to use in Book 3:\nis where the packages your application depends\nnode_modules\non are installed.\nis the directory that serves static files.\npublic\nis where you'll do most of your work.\nsrc\nThe file in a Vue app is located at the root of your\nindex.html\nproject. When you open , you see that it looks like the\nindex.html\nfile shown in Listing 1-1.\nLISTING 1-1: The Default vue-create\nindex.html File\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:442>\n", "text": "<meta charset=\"UTF-8\"/>\n<link rel=\"icon\" href=\"/favicon.ico\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Vite App</title>\n</head>\n<body>\n<div id=\"app\"></div>\n<script type=\"module\" src=\"/src/main.js\"></script>\n</body>\n</html>\nAs you probably can guess, the two important parts of this file are\nthe element with the attribute and the element.\n<div> id <script>\nThe element is where your Vue app is rendered, and the\n<div>\nelement includes the JavaScript file that links to all your\n<script>\nother JavaScript files.\nGoing to the src\nThe place where you do the work of creating your apps is the\nsrc\ndirectory. When you open the directory, you see that it\nsrc\ncontains several subdirectories and files:\n: The directory holds global assets (as opposed\nassets assets\nto component-specific assets) such as images and CSS files\nthat you want to import into your application using JavaScript\nimports.\n: This is where you create custom components. You\ncomponents\nmay also want to store in this directory any assets used by\ncomponents.\n: is the Vue equivalent of in a React\nApp.vue App.vue App.jsx\napplication. This is the one component that holds every other\ncomponent.\n. This is the file that's included in the file. It\nmain.js index.html\nhandles the link between the Vue components and the\nbrowser DOM.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:443>\n", "text": "Mounting a Root Component\nOpen for editing in VS Code. You'll see that it's just a few\nmain.js\nlines of code, as shown in Listing 1-2.\nLISTING 1-2: The Default main.js\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport './assets/main.css'\ncreateApp(App).mount('#app')\nThe file does two important things. The first is that it\nmain.js\nuses the function to create a new Vue application\ncreateApp()\ninstance. Vue's function takes a root component as\ncreateApp()\nits parameter. In this case, the root component is , which is\nApp\ndefined in , and returns an instance of the component..\nApp.vue\nOnce the new application instance has been created, its\nmount()\nfunction is called, which and renders the root component in the\nroot node in the document. In the case of the code in\nindex.html\nListing 1-2, the root component is rendered in the HTML element\nwith an ID of .\n#app\nConfiguring an app\nAlthough the default chains together the and\nmain.js createApp()\nfunctions, sometimes you need to separate them. For\nmount()\nexample, the application instance (created by ) has a\ncreateApp()\nobject that can be used to configure certain options for the\nconfig\napplication.\nAlthough you're unlikely to need to set configuration options\nwhen you're first learning Vue, Listing 1-3 shows an example of\nhow it's done. This example sets a global error handler for any\nuncaught errors that may occur in the application.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:444>\n", "text": "LISTING 1-3: Setting an Application config\nOption to Specify a Global Error Handler\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport './assets/main.css'\nconst app = createApp(App);\napp.config.errorHandler = (err) => {\n// handle the error here\n}\napp.mount('#app');\nYou can also use the object to create global properties that\nconfig\nyou can access from within any component in your application.\nListing 1-4 shows how to create a global property containing the\nname of the application.\nLISTING 1-4: Setting Global Properties\napp.config.globalProperties.appName = 'My Test App';\nMounting multiple apps\nYou can mount multiple apps in the same HTML document by\nusing multiple functions and mounting the resulting\ncreateApp()\napplication instances in different nodes in the DOM. This is helpful\nif you're using Vue to render static web pages or multiple widgets\ninto the browser where the components don't need to\ncommunicate with each other. The code in Listing 1-5 mounts two\ndifferent component trees: one for a stock ticker and one for a\nweather widget.\nLISTING 1-5: Mounting Multiple Apps\nimport { createApp } from 'vue';\nimport {StockTicker, WeatherWidget} from './Widgets.vue';\nimport './assets/main.css';\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:445>\n", "text": "const app1 = createApp(StockTicker);\napp1.mount('#stocks');\nconst app2 = createApp(WeatherWidget);\napp2.mount('#weather');\nExploring Vue's Two Styles\nAs of Vue 3, you have two different ways to write Vue\ncomponents: the Options API and the Composition API.\nThe Options API\nThe Options API is the more common way to write Vue\ncomponents (and it was the only way to write them before Vue\n3). The Options API is also the easier of the two methods for\nbeginners.\nThe Options API focuses on the idea of a component instance and\nis more of an object-oriented API. It provides a strict structure\nthat abstracts away much of the complexity of implementing\nreactivity.\nThe logic in a Vue component created using the Options API is\ndefined by a module that returns an object of options. These\noptions include properties such as the method (which\ndata()\ndefines reactive data in the module), the lifecycle methods,\ncomputed properties, and methods for updating the reactive data\n(also known as state data).\nListing 1-6 shows an example of a component created using the\nOptions API.\nLISTING 1-6: A Component Created Using\nthe Options API\n<script>\nexport default {\ndata() {\nreturn {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:446>\n", "text": "sheepCount: 0,\n};\n},\nmethods: {\ncountASheep() {\nthis.sheepCount++;\n},\n},\n};\n</script>\n<template>\n<h1>Sheep Counting App</h1>\n<h2>Current Count: {{ sheepCount }}</h2>\n<button @click=\"countASheep\">Count a Sheep</button>\n</template>\nFigure 1-3 shows the component created by Listing 1-6, rendered\nin a browser.\nFIGURE 1-3: A sheep-counting app, created by using the Options API.\nThe Composition API\nIn the other style of writing Vue components, Composition API,\nyou write the logic part of the component by using functions you\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:447>\n", "text": "specifically import from the Vue API.\nOf the two methods, Composition API more closely resembles\nReact. Like React, Composition API is closer to being just plain\nJavaScript, with no \"magic\" happening behind the scenes.\nListing 1-7 shows a version of the sheep-counting app from\nListing 1-6 that's been rewritten using the Composition API.\nLISTING 1-7: A Component Created Using\nComposition API\n<script setup>\nimport { reactive } from 'vue';\nconst state = reactive({ sheepCount: 0 });\nfunction countASheep() {\nstate.sheepCount++;\n}\n</script>\n<template>\n<h1>Sheep Counting App</h1>\n<h2>Current Count: {{ state.sheepCount }}</h2>\n<button @click=\"countASheep\">Count a Sheep</button>\n</template>\nThe output and functionality of the component defined by Listing\n1-7 are the same as the one created by Listing 1-6. The way you\nwrite the template section of the component is the same in both\nstyles as well.\nDeciding which API to use\nAt this point, you're probably wondering which API is better, or\nwhich one you should use. Both APIs can create the same\napplications and can take full advantage of Vue's features. The\ndifferences are in style and flexibility.\nAs I mentioned earlier in this chapter, the Options API can be\neasier to use for beginners. This is because it creates a higher\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:448>\n", "text": "level of abstraction that hides from the programmer some of the\ncomplexity of writing JavaScript code.\nThe Composition API requires a deeper knowledge of JavaScript\nand of how reactivity works in Vue. In return, you gain more\nflexibility, especially with regard to reusing code.\nBecause my main point in this book is that if you understand how\nJavaScript works, you can quickly learn to use any JavaScript\nlibrary or framework, I focus on the Composition API. You're free\nto use the Options API if you prefer it, and you can even mix and\nmatch components created using the two different APIs within\none application.\nAlthough it's possible to mix components created using\nthe two APIs in an application, I recommend that you pick an\nAPI and stick with it. Doing so will make your app easier for\nother people to read and save you some confusion as well.\nI think you'll find that once you know how the Composition API\nworks, learning the Options API is simple.\nInstalling Vue DevTools\nDebugging Vue applications is much easier if you have the right\ntools. In addition to Volar, which I tell you how to install earlier in\nthis chapter, the other essential tool is the Vue DevTools browser\nextension. Follow these steps to install it:\n1. In your Chrome browser, go to the Chrome web store at\n.\nhttps://chrome.google.com/webstore\n2. Search for Vue.js DevTools.\n3. Click the Add to Chrome button on the Vue.js DevTools page.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:449>\n", "text": "Once the Vue DevTools extension is installed, you can access it by\nopening the Chrome Developer Tools window and selecting the\nVue tab. The Vue DevTools extension provides information about\nthe components and state of Vue applications during\ndevelopment. It also features a Timeline tool that shows events\nthat happen while you're using the application.\nThe Vue DevTools extension is shown in Figure 1-4.\nFIGURE 1-4: The Vue DevTools extension.\nHOW VUE UPDATES THE DOM\nLike React, Vue makes use of a virtual DOM to apply changes in rendered\ncomponents to the browser's DOM. The details of how the Vue virtual DOM\ndoes what it does are largely hidden from you and you don't need to know all\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:450>\n", "text": "the steps that happen between when your components are rendered and\nwhen the DOM is updated.\nThe process of creating nodes in the browser DOM from the Vue code you\nwrite is called mounting. Vue's mounting process starts with the HTML\ntemplate code you write as part of your components. This template code is\ncompiled into virtual DOM render() functions.\nIt's possible to write Vue components without using a template, by using Vue's\nh() function. The name of the h() function stands for hypertext, which is the\nfirst word in Hypertext Markup Language (HTML), which is what the result of\nusing the h() function is.\nHere's an example of an invocation of h():\nh('h1', {class: 'heading', id:'pageTitle'},'Hello, World!');\nThe h() function takes the following parameters:\nThe type of HTML element it should create\nAn object containing attributes and/or DOM properties\nThe children of the created node\nOnly the first parameter, type, is required. The result of running the h()\nmethod is a vnode (for virtual node) object.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:451>\n", "text": "Chapter 2\nIntroducing Vue Components\nIN THIS CHAPTER\nDifferentiating the parts of a single file component\nDefining components\nStepping through the component lifecycle\nCatching and handling errors in Vue components\n\u201cCreation always involves building upon something else.\u201d\n\u2014LAWRENCE LESSIG\nIt\u2019s possible to write Vue code without using components.\nHowever, splitting an application into components helps make\nbuilding complex applications easier. In this chapter, I show you\nhow Vue components work and how to write them, and then you\nget to practice putting components together and passing data\nbetween them.\nIntroducing the Single-File\nComponent\nVue\u2019s components are called Single-File Components, or SFCs,\nbecause they\u2019re written by combining template code, logic, and\nstyle in a single file. The file extension for a single-file component\nis .\n.vue\nTo start writing a single-file component, create a file\n.vue\ncontaining three elements: , , and , as\n<script> <template> <style>\nshown in Listing 2-1.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:452>\n", "text": "LISTING 2-1: A Starter Template for a\nSingle-File Component\n<script>\n</script>\n<template>\n</template>\n<style>\n</style>\nThe order of the three parts of an SFC doesn't matter, although\nit\u2019s a good idea to be consistent. Listing 2-1 shows the most\ncommon order to use in the Composition API.\nBefore digging into the details, let\u2019s take a quick look at each of\nthe three sections.\nThe script element\nThe element contains the logic of your component. This\n<script>\nis where you create functions, import and use Vue methods, and\ncreate the reactive state. Unlike React components, Vue\ncomponents aren't functions or classes. Instead, they're objects.\nThe object you define in a Vue component is merged with the\ntemplate to create an instance of a single file component.\nThe setup() function\nThe element has a function named that defines\n<script> setup()\nand exports variables and functions that can be used in the\ncomponent. The basic format of a component's element\n<script>\nis shown in Listing 2-2.\nLISTING 2-2: A Single-File Component's\nscript Element\n<script>\nexport default {\nsetup() {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:453>\n", "text": "return {};\n},\n};\n</script>\nAny variables exported by the function are available in\nsetup()\nthe template of the component. Listing 2-3 shows a single-file\nTodo app.\nLISTING 2-3: A Single-File Todo App\n<script>\nimport { reactive } from 'vue';\nexport default {\nsetup() {\nconst state = reactive({\ntodos: [],\nnewTodo: '',\n});\nfunction addTodo() {\nstate.todos.push({\ntitle: state.newTodo,\ndone: false,\n});\nstate.newTodo = '';\n}\nreturn {\nstate,\naddTodo,\n};\n},\n};\n</script>\n<template>\n<div>\n<h1>Todo List</h1>\n<ul>\n<li v-for=\"todo in state.todos\">\n<input type=\"checkbox\" v-model=\"todo.done\"/>\n<span v-text=\"todo.title\"></span>\n</li>\n</ul>\n<input type=\"text\" v-model=\"state.newTodo\"/>\n<button @click=\"addTodo\">Add Todo</button>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:454>\n", "text": "</div>\n</template>\nIf you've read Book 1 and Book 3, you should see much in this\nlisting that looks familiar. Here's a brief line-by-line explanation of\nhow the JavaScript in this component works:\nA function named is imported. The\nreactive() reactive()\nfunction does something like React's hook (which\nuseState()\nis covered in Chapter 4 of Book 3). It creates variables that\ncause the template to rerender when their values are\nchanged.\nA default export creates a module containing an object.\nThe function is defined.\nsetup()\nAn object named is declared as a reactive variable and\nstate\ninitialized with two properties: and .\ntodos newTodo\nA function is created for updating the property of the\ntodos\nstate object and resetting the variable.\nnewTodo\nThe state object and the function are returned from\naddTodo()\nthe function.\nsetup()\nThe function only runs the first time an instance of a\nsetup()\ncomponent is mounted. Once the component has been mounted,\nanything returned by is available inside the component's\nsetup()\ntemplate.\nThe setup shortcut\nIf you're using a build tool, such as Vite, you can use the\nshorthand syntax for the function. To use the shorthand\nsetup()\nmethod, pass the attribute to . When you use the\nsetup <script>\nattribute, any top-level variables and imports inside the\nsetup\nelement are automatically exported and available to the\n<script>\ntemplate.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:455>\n", "text": "Listing 2-4 shows the component from Listing 2-3 rewritten to use\nthe attribute.\nsetup\nLISTING 2-4: A Single-File Component\nUsing the Attribute\nsetup\n<script setup>\nimport { reactive } from 'vue';\nconst state = reactive({\ntodos: [],\nnewTodo: '',\n});\nfunction addTodo() {\nstate.todos.push({\ntitle: state.newTodo,\ndone: false,\n});\nstate.newTodo = '';\n}\n</script>\n<template>\n<div>\n<h1>Todo List</h1>\n<ul>\n<li v-for=\"todo in state.todos\">\n<input type=\"checkbox\" v-model=\"todo.done\"/>\n<span v-text=\"todo.title\"></span>\n</li>\n</ul>\n<input type=\"text\" v-model=\"state.newTodo\"/>\n<button @click=\"addTodo\">Add Todo</button>\n</div>\n</template>\nUsing the shortcut is optional. The benefit to using it is that\nsetup\nit makes your components slightly less verbose, and it\nautomatically exports features of the element to make\n<script>\nthem available to the template. However, understanding the full\nfunction makes it easier to see what's really going on\nsetup()\n(especially for someone with a good understanding of how\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:456>\n", "text": "JavaScript works, like you). In this book, I mostly use the\nsetup\nshortcut, in the interest of saving paper.\nNaming Components\nComponents you create in Vue should be named using\nUpperCamelCase. It's a best practice to use multiple-word\ncomponent names for all your components except (and\nApp.vue\nthe built-in HTML elements, of course).\nUsing multiple-word component names prevents conflicts\nbetween your custom components and HTML elements, which are\nalways single-word. It also tends to make the names of your\ncomponents more descriptive.\nFollowing the Component\nLifecycle\nAn instance of a Vue single-file component completes a series of\nsteps as it's created, updated, and eventually unmounted. These\nsteps are known as the component lifecycle. Figure 2-1 shows all\nthe steps in the Vue component instance lifecycle.\nVue dispatches a lifecycle event at each step in its lifecycle. Using\nlifecycle hooks, you can register event listeners that execute a\ncallback function in response to any of these events.\nIf you\u2019ve read Book 3, you'll see similarities between Vue's\nlifecycle hooks and React's lifecycle methods and the\nhook.\nuseEffect()\nonMounted()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:457>\n", "text": "The lifecycle method registers a callback function\nonMounted()\nthat is invoked after the component instance is created and\nrendered in the DOM. Like React's method,\ncomponentDidMount()\nis where you can perform side effects that need to\nonMounted()\naccess the DOM.\nListing 2-5 shows how to use the lifecycle hook to\nonMounted()\nfetch data from a server.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:458>\n", "text": "\u00a9 John Wiley & Sons, Inc.\nFIGURE 2-1: The Vue component instance lifecycle.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:459>\n", "text": "LISTING 2-5: Fetching a List Using the\nonMounted() Lifecycle Method\n<script setup>\nimport { reactive, onMounted } from 'vue';\nconst state = reactive({\ntodos: [],\n});\nonMounted(async () => {\ntry {\nlet response = await fetch('http://localhost:3000/todos', {\nmode: 'cors',\n});\nconst todos = await response.json();\nstate.todos = todos;\n} catch (error) {\nconsole.log(error);\n}\n});\n</script>\n<template>\n<div>\n<h1>Todo List</h1>\n<ul>\n<li v-for=\"todo in state.todos\">\n<input type=\"checkbox\" v-model=\"todo.completed\"/>\n<span v-text=\"todo.description\"></span>\n</li>\n</ul>\n</div>\n</template>\nThis listing depends on having an API server that responds to an\nHTTP GET request at the endpoint. You can install and run\n/todos\nthe server that I built for this purpose by downloading the code\nfrom this book's website. The app is in\ntodo-server\n. Follow these steps to install and\nBook4/Chapter02/todo-server\nrun the server:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:460>\n", "text": "1. While running the Vue app containing the component shown\nin Listing 2-5, open another terminal window with\nas the working directory.\nBook4/Chapter02/todo-server\n2. Install the server's dependencies by entering npm install.\n3. Run the server by entering node server.\nAfter you start the server, you see the following message in\nthe terminal:\nServer started on port 3000\n4. Return to your browser and reload the Vue application.\nThe Vue Todo app loads several to-do items and displays\nthem, as shown in Figure 2-2.\nFIGURE 2-2: Loading data from a server in the onMounted() lifecycle hook.\nonUpdated()\nThe lifecycle hook registers a callback function that is\nonUpdated()\ninvoked every time the component updates because of a change\nto a reactive-state value.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:461>\n", "text": "Vue's lifecycle hook serves the same purpose as\nonUpdated()\nReact's method, which is covered in\ncomponentDidUpdate()\nChapter 3 of Book 3.\nBecause the event is dispatched every time a\nupdated\ncomponent's state changes, you will create an infinite loop if\nyou use to update reactive-state values.\nonUpdated()\nonUnmounted()\nThe lifecycle hook registers a callback to be called\nonUnmounted()\nafter the component has been unmounted. This callback serves\nthe same purpose as React's method\ncomponentWillUnmount()\n(which is covered in Chapter 3 of Book 3). Use this method to\nclear any manually set side effects you created in the component,\nsuch as timers, event listeners, and server connections.\nonBeforeMount()\nA callback registered using is called after the\nonBeforeMount()\nreactive state of a component has been created but before it's\ninserted into the DOM. This hook gives you a chance to modify\nthe component's state before it's inserted into the DOM.\nonBeforeUpdate()\nThe lifecycle hook is called when a component\nonBeforeUpdate()\nis about to update the DOM tree due to a reactive-state change.\nBecause this happens before the DOM is updated, it's safe to\nmodify the component's state at this point.\nonBeforeUnmount()\nThe lifecycle hook can be used to register a\nonBeforeUnmount()\ncallback that is called while the component is still active, but\nimmediately before it unmounts. One use for this lifecycle hook is\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:462>\n", "text": "to write the state of a component to the browser's local storage\nso that it can be restored the next time the component is\nmounted.\nonErrorCaptured()\nThe lifecycle hook registers a callback that is\nonErrorCaptured()\ncalled when an error happens in one of a component's\ndescendent components. The callback function you specify for this\nhook receives these three arguments:\nThe object\nerror\nThe component instance that triggered the error\nA string indicating the type of error that occurred\nHandling Errors in\nComponents\nThere are plenty of reasons that a child component might throw\nan error: An API might be unavailable, a function or component\nmight receive an unexpected type of data, or the user might do\nsomething with your app that you never anticipated.\nTo demonstrate how to catch events by using ,\nonErrorCaptured()\nI'll show you how to write a function that specifically creates an\nerror \u2014 because errors never happen when you want them to.\nListing 2-6 shows a component that does nothing except throw an\nerror whenever you press a button. Listing 2-7 shows the App\ncomponent that makes use of the component and\nErrorButton\nthat catches the error thrown by .\nErrorButton\nLISTING 2-6: The ErrorButton Component\n<script setup>\nfunction makeError() {\nthrow new Error('oops');\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:463>\n", "text": "}\n</script>\n<template>\n<div>\n<h1>Error on Demand</h1>\n<button @click=\"makeError\">Make Error</button>\n</div>\n</template>\nLISTING 2-7: Handling an Error\n<script setup>\nimport { onErrorCaptured, ref } from 'vue';\nimport ErrorButton from './components/ErrorButton.vue';\nconst error = ref('');\nonErrorCaptured((e) => {\nerror.value = e.message;\n});\nfunction resetError() {\nerror.value = '';\n}\n</script>\n<template>\n<div v-if=\"error\">\nThere's been an error: {{ error }} <button @click=\"resetError\">OK</button>\n</div>\n<ErrorButton/>\n</template>\nIf multiple components in a Vue app's component hierarchy define\nerror handlers, it's possible for an error to be handled multiple\ntimes. For example, if the great-grandchild of a component\ncontaining an hook throws an error, that error\nonErrorCaptured()\n\"bubbles up\" to the grandchild component and then to the child\ncomponent before it's handled. Once an error is handled, you can\ntell Vue to stop propagating the error further up the hierarchy by\nreturning a value of false from your hook.\nerrorCaptured()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:464>\n", "text": "Chapter 3\nMaking Vue Templates\nIN THIS CHAPTER\nCreating HTML templates\nPassing props\nIncluding JavaScript in templates\nAdding functionality with directives\nChoosing what to render\nRendering with loops\nFilling in the blanks with slots\nAdding component style\n\u201cSimplicity is prerequisite for reliability.\u201d\n\u2014EDSGER DIJKSTRA\nJSX templates are written using HTML syntax. When Vue code is\ncompiled, the HTML templates are converted into optimized\nJavaScript code. It's also possible to use JSX instead of HTML for\nyour templates, or even to bypass writing templates altogether by\nwriting Vue render functions directly. However, simply writing\nHTML is the recommended way to bind component logic with\npresentation, and it results in the most optimized JavaScript code.\nIn this chapter, I show you how to write Vue templates, and I\ndescribe the various ways that template code can integrate with\nreactive data.\nWriting HTML Templates\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:465>\n", "text": "To write a Vue component's template, you can just write valid\nHTML inside the top-level block, as shown in Listing 3-\n<template>\n1.\nLISTING 3-1: A Simple Component with a\nPure HTML Template\n<template>\n<div>\n<h1>Congratulations!</h1>\n<h3>\nYou've successfully created a project with\n<a target=\"_blank\" href=\"https://vitejs.dev/\">Vite</a> +\n<a target=\"_blank\" href=\"https://vuejs.org/\">Vue 3</a>.\n</h3>\n</div>\n</template>\nWhen saved in a file with a extension, the code in Listing 3-1\n.vue\nis a perfectly valid Vue component. It contains no reactivity or\nlocal styles at this point, but when it's rendered, it produces in the\nbrowser the output shown in Figure 3-1 (with a little help from\nthe default global styles included when you run create-vue).\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:466>\n", "text": "FIGURE 3-1: A static Vue component.\nInstances of Vue components are created by using them as\nelements in other components. Listing 3-2 shows how to import\nand use an instance of the component defined by the code in\nListing 3-1.\nLISTING 3-2: Importing and Using a\nComponent\n<script setup>\nimport Listing0301 from './components/Listing0301.vue';\n</script>\n<template>\n<Listing0301/>\n</template>\nBecause each element represents an instance of a Vue single-file\ncomponent, you can reuse elements as many times as you need\nto, and each instance maintains its own stateful data. Creating\nmultiple instances of a static component is only slightly useful,\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:467>\n", "text": "however. Where things start to get interesting is when a\ncomponent instance's output can be customized based on data\npassed to it and on its internal state.\nUsing JavaScript in Templates\nYou can use any JavaScript expression inside a template by using\ndouble curly braces.\nUsing double curly braces is also known as mustache syntax, after\nthe mustache.js template language. The name stems from the\nresemblance between a curly brace and a fancy mustache turned\non its side, as shown in Figure 3-2.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:468>\n", "text": "Unknown author / Wikimedia Commons / Public domain\nFIGURE 3-2: How mustache syntax got its name.\nA JavaScript expression is any unit of code that returns a value.\nFunction calls and variable names are examples of expressions.\nFunction declarations and variable assignments are not\nexpressions.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:469>\n", "text": "JavaScript expressions are covered in Chapter 4 of Book 1.\nEach set of double curly braces can include one expression. A\nJavaScript expression in double curly braces in a Vue template is\ncalled a binding expression. Listing 3-3 demonstrates the use of\nseveral binding expressions in a template.\nLISTING 3-3: Demonstrating JavaScript\nExpressions in a Template\n<script setup>\nimport { reactive } from 'vue';\nconst state = reactive({\nsectionTitle: 'Using JavaScript in Templates',\nauthorName: 'Chris Minnick',\n});\n</script>\n<template>\n<h1>{{ state.sectionTitle }}</h1>\n<h3>By {{ state.authorName }}</h3>\n</template>\nCalling functions\nFunctions defined in the block can be invoked using\n<script>\nbinding expressions. However, you should remember that any\nfunction called in a binding expression is called each time the\ntemplate updates. For this reason, functions called from binding\nexpressions shouldn't change data or have other side effects.\nJavaScript in templates is\nrestricted\nVue templates run in a sandbox, which means that, unlike code\nwritten in the block, binding expressions don't have\n<script>\naccess to all the JavaScript globals. Certain commonly used\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:470>\n", "text": "globals, such as and , are available. If you try to access\nMath Date\nother JavaScript globals, such as the method, from within\nalert()\na , you get an error, as shown in Figure 3-3.\n<template>\nFIGURE 3-3: Templates don't have access to all JavaScript globals.\nUsing globals in templates\nIf you need to have a global variable in Vue that is available to all\nyour application's components, you can set it in the\nobject of the Vue instance's object, like\nglobalProperties config\nthis:\nvue.config.globalProperties.timeFormat = '12hr';\nIntroducing Directives\nDirectives are special attributes that are prefixed with and that\nv-\nadd functionality to templates. For example, to set the HTML\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:471>\n", "text": "content of an element, you can add the directive to an\nv-html\nelement, like this:\n<p v-html=\"this is a paragraph\"></p>\nBuilt-in directives\nVue includes some built-in directives for common tasks, including\nbinding template data to JavaScript variables and creating loops,\nconditional statements, and event listeners. These are the built-in\ndirectives:\nv-text\nv-html\nv-show\nv-if\nv-else\nv-else-if\nv-for\nv-on\nv-bind\nv-model\nv-slot\nv-pre\nv-once\nv-memo\nv-cloak\nI cover many of these directives in detail in the following sections.\nIn most cases, Vue's directives are convenient ways to accomplish\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:472>\n", "text": "tasks that could also be done using JavaScript in your or\n<script>\nusing expressions in your . For example, the ,\n<template> v-if v-\n, and directives allow you to create conditional\nelse v-else-if\ncode in your template to render elements conditionally, like this:\n<div v-if=\"loggedIn\">You are currently logged in.</div>\n<div v-else>Please log in to continue</div>\nThe preceding example could also be written using a conditional\noperator, like this:\n{{ loggedIn?'You are currently logged in.'\n:'Please log in to continue.' }}\nOther directives accomplish tasks that would be difficult or\nimpossible to code using JavaScript in the . For\n<template>\nexample, the directive caches template code. It takes as\nv-memo\nits argument an array containing dependency values. If all the\ndependencies have the same values as the last render, it skips\nrerendering the element it's applied to. For example:\n<WeatherChart v-memo=\"[localWeatherData]\">\n\u2026\n</WeatherChart>\nIn the preceding example, the template skips rerendering the\ncomponent if the values in the\nWeatherChart localWeatherData\nvariable haven't changed since the last rendering.\nDirective shorthand names\nThe most often used directives have shorthand names that can be\nused in place of the full name. For example, the directive\nv- v-on\ncan also be written using the shorthand, like this:\n@\n<button @click = \"submitForm\">Send Data</button>\nPassing arguments to directives\nSome directives take an argument that modifies their\nfunctionality. To pass an argument to a directive, use a colon ( )\n:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:473>\n", "text": "followed by the name of the argument. For example, the\nv-on\ndirective creates an event listener on an element. The argument\npassed to the directive specifies the type of event to listen\nv-on\nfor, like this:\n<button v-on:click=\"handleClick\">Submit Form</button>\nDynamic arguments\nYou can also pass dynamic arguments to directives. A dynamic\nargument is one whose value comes from a property or an\nexpression defined elsewhere in the component. To create a\ndynamic argument, use a colon followed by square braces\n( )containing the property or expression that should set the\n[]\nargument value.\nFor example, you might want a directive to be able to listen\nv-on\nfor different types of events. In this case, you can specify the\nevent type as a dynamic argument, like this:\n<button v-on:[eventType]=\"handleEvent\">Do The Thing</button>\nDirective modifiers\nSome directives can also be customized using postfixes called\nmodifiers. For example, to specify that an event handler should\ncall , you can use the modifier with the\npreventDefault() .prevent\ndirective, like this:\nv-on\n<form v-on:submit.prevent=\"handleFormSubmit\">\nThe modifiers that can be used with event handler directives are\ncovered in Chapter 5 of Book 4. Modifiers for data binding\ndirectives are covered in Chapter 4 of Book 4.\nCustom directives\nIn addition to Vue's built-in directives, you can create custom\ndirectives. A custom directive is defined using an object\ncontaining one of more of the lifecycle hooks. The lifecycle hooks\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:474>\n", "text": "in a custom directive receive the element the directive is bound\nto.\nBy using custom directives, you can create reusable logic that\nrequires DOM access to an HTML element. For example, Listing 3-\n4 shows how to create a custom directive that causes an\nv-play\naudio track to start playing automatically when it's mounted.\nLISTING 3-4: Defining a Directive\nv-play\n<script setup>\nconst vPlay = {\nmounted: (el) => {\nel.play();\n},\n};\n</script>\n<template>\n<audio controls v-play>\n<source\nsrc=\"https://www.example.com/song.mp3\"\ntype=\"audio/mpeg\"\n/>\nYour browser does not support the audio element.\n</audio>\n</template>\nAlthough is a valid method to call on an HTML\nplay()\nor element, automatically calling when a\naudio video play()\npage loads is a bad practice. In fact, it's such a bad idea that\naudio that automatically plays without the user interacting\nwith the browser is blocked by web browsers by default.\nTo write a custom directive in a block, create an\n<script setup>\nobject with a name starting with followed by a capitalized word.\nv\nVue converts that object into a directive you can bind to an\nelement using syntax.\nv-\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:475>\n", "text": "If the syntax for creating directives is a bit too\n<script setup>\nautomagic (meaning, it's so easy it seems like magic) for you (it is\nfor me, personally), you can create your custom directive in a\ncomponent that uses a function by defining it as part of a\nsetup()\nobject, as shown in Listing 3-5.\ndirectives\nLISTING 3-5: Defining Custom Directives\nin the Object\ndirectives\n<script>\nimport { ref } from 'vue';\nexport default {\nsetup() {\nconst text = ref('');\nreturn {\ntext,\n};\n},\ndirectives: {\nfocus: {\nmounted(el) {\nel.focus();\n},\n},\nchars: {\nupdated(el) {\nconsole.log(el.value.length);\n},\n},\n},\n};\n</script>\n<template>\n<div>\n<p>\nStart typing and open the console to see how many characters you've\ntyped!\n</p>\n<textarea v-focus v-chars v-model=\"text\"></textarea>\n</div>\n</template>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:476>\n", "text": "Conditional Rendering\nConditionally rendering elements or component instances in Vue\ntemplates can be done by using JavaScript expressions in the\ntemplate or by using directives.\nConditional rendering with\nJavaScript\nChapter 2 of Book 3 covers conditional rendering in React. The\nsame techniques that can be used with React can be used with\nVue. For example, to evaluate a condition and render various\ncomponents based on the result of the condition, you can use the\nconditional (ternary) operator or the logical AND operator ( ).\n&&\nYou can also write functions in the block and invoke\n<script>\nthem in the template to determine the output of the component.\nConditional rendering using\ndirectives\nVue features several directives that simplify conditional rendering:\nv-show\nv-if\nv-else\nv-else-if\nUsing v-show\nThe directive shows or hides an element or a component\nv-show\nbased on whether the expression passed to it is or . For\ntrue false\nexample, in the following template code, the paragraph\ncontaining an error message displays only if the error variable is\ntruthy:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:477>\n", "text": "<p v-show=\"error\">There has been an error.</p>\nTruthy and falsy refer to whether a value is or\ntrue false\nwhen converted to a Boolean. Because a variable that's\nundefined is falsy, the preceding line will only display when\nhas a value. Truthy and falsy are covered in Book 1,\nerror\nChapter 3.\nThe directive works by setting the CSS\nv-show display\nproperty on the element to . Setting on\nnone display:'none'\nan element doesn't remove the element from the DOM \u2014 it\njust makes it invisible. This is important to know because an\nelement with set to still takes up space in the\ndisplay none\nlayout of the web page.\nUsing v-if, v-else, and v-else-if\nThe , , and directives work the same as\nv-if v-else v-else-if\nJavaScript , , and statements. Follow these rules\nif else else if\nfor using these directives:\nand take any expression as their value, and the\nv-if v-else-if\nelement they're passed to renders only if the expression is\ntruthy.\ndoesn\u2019t take a value. It must be used with the next\nv-else\nelement after an element with a or directive.\nv-if v-else-if\nYou can use as many elements with directives as\nv-else-if\nyou need after an element with a directive.\nv-if\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:478>\n", "text": "Listing 3-6 shows an example of using , , and\nv-if v-else-if v-\nto do conditional rendering.\nelse\nLISTING 3-6: Using , , and\nv-if v-else-if v-\nelse\n<script setup>\nfunction getTime() {\nlet d = new Date();\nreturn new Date(d).getHours();\n}\n</script>\n<template>\n{{ getTime() }}\n<div v-if=\"getTime() < 12\">Good Morning</div>\n<div v-else-if=\"getTime() === 17\">Happy Hour!</div>\n<div v-else-if=\"getTime() < 19\">Good Afternoon</div>\n<div v-else-if=\"getTime() < 7\">Good Evening</div>\n<div v-else>Good Night</div>\n</template>\nRendering Lists\nVue's directive can be used to render an element or a\nv-for\ntemplate block multiple times. The directive takes as its\nv-for\nvalue any one of the following types of values:\na number\nan array\nan object\na custom iterable\nThe syntax of a loop resembles that of a JavaScript\nv-for for of\nloop. However, it has some special capabilities that make it more\nthan just a replacement for a loop.\nThe basic syntax of the directive looks like this:\nv-for\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:479>\n", "text": "v-for=\"item in items\"\nThe value to the right of is the value or expression you want to\nin\nloop over. The variable on the left is the alias to use for each\nitem.\nUsing v-for with numbers and\nstrings\nWhen you pass a number to a directive, it causes the\nv-for\nelement or template to be rendered that many times and causes\nthe current number to be available using the expression you\nspecify on the left of . Listing 3-7 shows a component that\nin\ncounts to 100 using .\nv-for\nLISTING 3-7: Counting with\nv-for\n<template>\n<h1>Let's count to 100!</h1>\n<div v-for=\"i in 100\">{{ i }}</div>\n</template>\nThe beginning of the output from Listing 3-7 is shown in Figure 3-\n4.\nPassing a string to a directive causes the element or\nv-for\ntemplate to be repeated once for every character in the string.\nUsing v-for with objects\nWhen used with objects, repeats the element or template\nv-for\nonce for each property of the object. Keep in mind a couple of\nimportant considerations for using with objects:\nv-for\nlists the values of each property, not the property\nv-for\nnames.\nconsiders only the object's own properties, not those of\nv-for\nany object it inherits from.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:480>\n", "text": "FIGURE 3-4: Counting to 100 with Vue.\nListing 3-8 demonstrates both of these points by creating an\nobject as a child of another object and passing the child object to\na loop.\nv-for\nLISTING 3-8: Using with an Object\nv-for\n<script setup>\nconst myParentObject = { fruit: 'apple', color: 'red' };\nconst myChildObject = Object.create(myParentObject);\nmyChildObject.vegetable = 'asparagus';\n</script>\n<template>\n<div v-for=\"prop in myChildObject\">{{ prop }}</div>\n</template>\nThe output of Listing 3-8 is shown in Figure 3-5.\nWhen is used with objects, you can also specify an alias for\nv-for\nthe property names by passing a second alias on the left side of\n:\nin\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:481>\n", "text": "<div v-for=\"(value, name) in object\"></div>\nTo get the property names, values, and an index, you can pass\nthree aliases, as shown in Listing 3-9.\nFIGURE 3-5: The result of using a child object in a v-for loop.\nLISTING 3-9: Passing Three Aliases and an\nObject to\nv-for\n<script setup>\nconst myObject = { fruit: 'apple', color: 'red' };\n</script>\n<template>\n<div v-for=\"(value, name, index) in myObject\">\n{{ name }}: {{ value }}: {{ index }}\n</div>\n</template>\nThe value of the alias is the number of the iteration of the\nindex\nloop, starting with 0.\nv-for\nUsing v-for with arrays\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:482>\n", "text": "Looping over arrays with returns each value in the array, as\nv-for\nshown in Listing 3-10.\nLISTING 3-10: Looping Over an Array\n<script setup>\nconst items = [\n{\nname: 'apple',\nprice: 1.0,\n},\n{\nname: 'asparagus',\nprice: 1.99,\n},\n];\n</script>\n<template>\n<div v-for=\"item in items\">\n{{ item.name }}: {{ item.price }}\n</div>\n</template>\nSpecifying a key\nIt's recommended, though not required, that you specify a unique\nkey for each item in a list created with . The key must be a\nv-for\nprimitive value, such as a string or a number.\nTo provide a key, bind the attribute to the element using the\nkey\ndirective or the directive shorthand syntax, , as\nv-bind v-bind :\nshown here:\n<div v-for=\"listItem in list\" :key=\"listItem.id\">\n<li>{{ listItem.description }}</li>\n</div>\nComposing with Slots\nMost HTML elements can have children. For example, the Internet\nwould be a much less interesting place if were an empty\n<p>\nelement:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:483>\n", "text": "<p/>\n<p/>\n<p/>\nFortunately, when HTML was designed, Tim Berners-Lee\nanticipated that what would turn out to be the important part of\nmany elements would be their content \u2014 rather than just the\nelement. In fact, many HTML elements don't do much at all\nexcept render their children and provide a hint about what\ncontent they should contain. For example, HTML has several\ndifferent container elements, including , ,\n<div> <header>\n, , and so on. If you were to write the\n<article> <footer> <div>\nelement as a React component, it might look something like this:\nfunction div(props){\nreturn props.children;\n}\nIn other words, it just renders whatever you place between\n<div>\nand .\n</div>\nVue elements can also have content, but for that content to be\nrendered, you need to tell it where to render. This is the purpose\nof the element in Vue. To write a component that outputs\n<slot>\nonly its children, use the <slot> element in the template, as\nshown here:\n<template>\n<slot></slot>\n</template>\nRendering children in Vue without doing anything to them is\npointless, however \u2014 we have HTML for that. Listing 3-11 shows\na Vue component named that creates a fancy\n<FancyBorder>\nborder around any child elements you pass to it.\nLISTING 3-11: A Component with a\n<slot>\n<template>\n<div\nstyle=\"\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:484>\n", "text": "width: 300px;\nborder-radius: 19% 81% 30% 70% / 29% 17% 83% 71%;\nbackground-image: linear-gradient(to bottom right, red, yellow);\ncolor: white;\n\"\n>\n<slot></slot>\n</div>\n</template>\nTo use the component, import it into another\n<FancyBorder>\ncomponent and then wrap it around other elements or content, as\nshown in this example:\n<script setup>\nimport FancyBorder from './FancyBorder.vue';\n</script>\n<template>\n<FancyBorder>\nIn publishing and graphic design, Lorem ipsum is a\nplaceholder text commonly used to demonstrate the\nvisual form of a document or a typeface without\nrelying on meaningful content. Lorem ipsum may be\nused as a placeholder before final copy is available.\nIt is also used to temporarily replace text\nin a process called greeking, which allows designers\nto consider the form of a webpage or publication,\nwithout the meaning of the text influencing the\ndesign.\n</FancyBorder>\n</template>\nFigure 3-6 shows what the preceding component looks like when\nrendered in a browser.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:485>\n", "text": "FIGURE 3-6: Using the FancyBorder component.\nSpecifying fallback content\nAny content you write between the opening tag and the\n<slot>\nclosing tag is used as default content for the slot. For\n</slot>\nexample, the component in Listing 3-12 displays a message if the\ncomponent is used without children.\nLISTING 3-12: Specifying Fallback Content\nfor a Slot\n<template>\n<h1>\n<slot>No content was provided.</slot>\n</h1>\n</template>\nNaming slots\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:486>\n", "text": "Components can have multiple slots. To allow parent components\nto target content to a particular slot, you can use a for\n<template>\neach slot and pass the name of the slot using the\nv-slot\nattribute. Listing 3-13 shows how to create named slots, and\nListing 3-14 shows how to target content to named slots.\nLISTING 3-13: Naming Slots\n<template>\n<h1>\n<slot name=\"title\">No title provided</slot>\n</h1>\n<div>\n<slot name=\"body\">No body provided</slot>\n</div>\n</template>\nLISTING 3-14: Targeting Named Slots\n<script setup>\nimport BlogPostTemplate from './BlogPostTemplate.vue';\n</script>\n<template>\n<BlogPostTemplate>\n<template v-slot:title>10 Tips for Keeping Your Pencils\nSharpened</template>\n<template v-slot:body>\n<p>\nDo you have pencils that get dull after you use them? This problem is\nmore common than you might think.\n</p>\n</template>\n</BlogPostTemplate>\n</template>\nAdding Style to Components\nVue components can be styled using a block. Inside the\n<style>\nblock, you can write standard CSS code, CSS modules,\n<style>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:487>\n", "text": "CSS that's scoped only to the current component, and CSS with\nvalues that are linked to the component state.\nGlobal CSS\nBy default, the CSS you write in the block is global. It\n<style>\napplies to the entire application the same way as if you added the\nCSS to a style sheet included in the HTML document.\nEven if you add global styles in a deeply nested component, those\nstyles still apply to every other component. If a parent component\nand a subcomponent contain conflicting styles, the parent\ncomponent's style overrides those of the child.\nListing 3-15 shows two components that define global styles for\nthe element. Figure 3-7 shows what the rendered\n<h1>\ncomponents will look like.\nFIGURE 3-7: Parents always win.\nLISTING 3-15: Creating Conflicting Styles\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:488>\n", "text": "// App.vue\n<script setup>\nimport ChildComponent from './components/ChildComponent.vue';\n</script>\n<template>\n<h1>First-level headers should have borders.</h1>\n<ChildComponent/>\n<h1>I win.</h1>\n</template>\n<style>\nh1 {\nborder: 1px solid black;\nmargin: 10px;\npadding: 4px;\n}\n</style>\n// ChildComponent.vue\n<template>\n<h1>No they shouldn't!</h1>\n</template>\n<style>\nh1 {\nborder: none;\n}\n</style>\nScoped CSS\nYou can create CSS that's scoped only to the component in which\nit's defined by adding the attribute to a block.\nscoped <style>\nListing 3-16 shows the child component from Listing 3-15 but with\na scoped block.\n<style>\nLISTING 3-16: Using Scoped CSS\n<template>\n<h1>No they shouldn't!</h1>\n</template>\n<style scoped>\nh1 {\nborder: none;\n}\n</style>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:489>\n", "text": "Scoped style blocks override conflicting globals, as shown in\nFigure 3-8.\nFIGURE 3-8: Scoped styles override globals.\nMultiple style blocks\nIf you want to define both global and scoped styles in the same\ncomponent, you can define multiple blocks. For example,\n<style>\nin Listing 3-17 the component creates some styles that\nApp.vue\nshould apply to the entire application as well as some styles for\nuse only in the component.\nApp\nLISTING 3-17: Using Both Global and\nScoped Styles\n<script setup>\nimport ChildComponent from './components/ChildComponent.vue';\n</script>\n<template>\n<div id=\"#app\">\n<h1>Welcome to my App</h1>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:490>\n", "text": "<ChildComponent/>\n</div>\n</template>\n<style>\nh1 {\nborder: 1px solid black;\nmargin: 10px;\npadding: 4px;\n}\na,\n.green {\ntext-decoration: none;\ncolor: hsla(160, 100%, 37%, 1);\ntransition: 0.4s;\n}\n</style>\n<style scoped>\n#app {\nmax-width: 1280px;\nmargin: 0 auto;\npadding: 2rem;\nfont-weight: normal;\n}\n</style>\nCSS modules\nAdding the attribute to the block creates a style\nmodule <style>\nmodule from the block and exposes the CSS classes in the block\nas an object with the key . You can then bind the\n$style $style\nobject to attributes of elements in the template, as shown\nclass\nin Listing 3-18.\nLISTING 3-18: Creating and Using a CSS\nModule\n<script setup>\nconst items = [\n{\nname: 'apple',\nprice: 1.0,\n},\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:491>\n", "text": "{\nname: 'asparagus',\nprice: 1.99,\n},\n];\n</script>\n<template>\n<div v-for=\"item in items\">\n<span :class=\"$style.item\">{{ item.name }}</span>\n: <span :class=\"$style.price\">{{ item.price }}</span>\n</div>\n</template>\n<style module>\n.item {\nfont-weight: bold;\n}\n.price {\nfont-style: italic;\n}\n</style>\nv-bind in CSS\nThough the style code in the block can use the same\n<style>\nsyntax as CSS, it's actually compiled by Vue. Because of this, it's\npossible to use some dynamic code in the block. For\n<style>\nexample, the function can be used in blocks to\nv-bind() <style>\nbind CSS rules to data in the same way that the directive\nv-bind\nbinds attributes to data.\nListing 3-19 shows how can be used to dynamically\nv-bind()\nchange styles in the block.\n<style>\nIn this listing, I use the function to create reactive\nref()\nvariables. The function works the same way as ,\nref() reactive()\nwhich I cover in Book 4, Chapter 1. The difference between\nref()\nand is that can only create reactive\nreactive() reactive()\nobjects, while can create any type of reactive variable. I\nref()\ncover in detail in Book 4, Chapter 4.\nref()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:492>\n", "text": "LISTING 3-19: Controlling Styles\nProgrammatically\n<script setup>\nimport { ref } from 'vue';\nconst rainbowColors = ref([\n'red',\n'orange',\n'yellow',\n'green',\n'blue',\n'indigo',\n'violet',\n]);\nconst backgroundColor = ref('');\n</script>\n<template>\n<input\ntype=\"radio\"\n:id=\"color\"\nv-for=\"color in rainbowColors\"\n:value=\"color\"\nv-model=\"backgroundColor\"\n/>\n<div class=\"swatch\"></div>\n<h1>My favorite color is {{ backgroundColor }}</h1>\n</template>\n<style scoped>\n.swatch {\nwidth: 100px;\nheight: 100px;\nmargin: 10px;\nborder-radius: 50%;\nborder: 1px solid black;\nbackground-color: v-bind(backgroundColor);\n}\n</style>\nIn the preceding example, a row of radio buttons is created and\nbound to the reactive variable. Selecting various\nbackgroundColor\nradio buttons changes the value of to different\nbackgroundColor\ncolors from the array. The style uses the\nrainbowColors .swatch\nvalue of to set the background color of a on\nbackgroundColor div\nthe page.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:493>\n", "text": "The output of Listing 3-19 is shown in Figure 3-9.\nFIGURE 3-9: Changing styles based on reactive data.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:494>\n", "text": "Chapter 4\nUsing Data and Reactivity\nIN THIS CHAPTER\nPassing and using props\nBinding attributes\nDefining and working with reactive data\nMaking primitive data types reactive with ref()\nUsing computed properties\nWatching for changes\n\u201cWe're entering a new world in which data may be more\nimportant than software.\u201d\n\u2014TIM O'REILLY\nPassing data between components and using reactive state are\nthe two ways that the display of a component can change. As in\nReact, every rerendering of a Vue app's components starts with a\nchange to state data. Vue tracks reactive state variables and\ntriggers an update of the component containing the reactive data,\nwhich may cause new props to be passed to child components\nand thus modify how they render.\nPassing and Using Props\nWhen you write a custom Vue component and import it into\nanother component, the name you used to import the component\nbecomes available in the parent component as an element. You\ncan pass data to a component instance by using attributes, and\nthese attributes become available in the component instance\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:495>\n", "text": "If you've read Book 3, you should recognize this use of attributes\nto pass data to subcomponents. From the perspective of the\nparent component, passing props works the same in React and\nVue.\nAll the props passed to a component instance are passed as an\nobject. Although you can pass as many props to a component\ninstance as you like, and you can give them any valid attribute\nname, Vue requires that each prop received by a component must\nbe specifically defined inside the child component.\nThe way to define a prop depends on whether you're using the\nfull function or the shortcut attribute.\nsetup() setup\nDefining props with <script\nsetup>\nIf you use , any props you want to use in a\n<script setup>\ncomponent must be passed as an array to the\ndefineProps()\nfunction. This function is only available inside and\n<script setup>\ndoesn't need to be explicitly imported.\nListing 4-1 shows how to use to receive props and\ndefineProps()\nhow to use those props in a template.\nLISTING 4-1: Defining Using\nprops\ndefineProps()\n<script setup>\nconst props = defineProps(['firstName', 'lastName']);\n</script>\n<template>\n<div>\n<h1>Congratulations {{ props.firstName }} {{ props.lastName }}!</h1>\n<h3>\nYou've successfully created a project with\n<a target=\"_blank\" href=\"https://vitejs.dev/\">Vite</a> +\n<a target=\"_blank\" href=\"https://vuejs.org/\">Vue 3</a>.\n</h3>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:496>\n", "text": "</div>\n</template>\nNotice that the names of the props in the array passed to\nare strings. You don't need to assign received\ndefineProps()\nprops to a local object. If you simply invoke in\ndefineProps()\n, the props passed to the instance are available in\n<script setup>\nthe component using just their names, as shown in Listing 4-2.\nLISTING 4-2: Defining props Without\nAssigning them to an Object\n<script setup>\ndefineProps(['firstName', 'lastName']);\n</script>\n<template>\n<div>\n<h1>Congratulations {{ firstName }} {{ lastName }}!</h1>\n<h3>\nYou've successfully created a project with\n<a target=\"_blank\" href=\"https://vitejs.dev/\">Vite</a> +\n<a target=\"_blank\" href=\"https://vuejs.org/\">Vue 3</a>.\n</h3>\n</div>\n</template>\nDefining props with setup()\nWhen you use the function, you must use the\nsetup() props\noption to specify the props the component will receive. You can\nthen pass the object to the function. Listing 4-3\nprops setup()\nshows how to define props with the function.\nsetup()\nLISTING 4-3: Defining and Using with\nprops\nsetup()\n<script>\nexport default {\nprops: ['firstName', 'lastName'],\nsetup(props) {\nconsole.log(props.firstName);\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:497>\n", "text": "console.log(props.lastName);\n},\n};\n</script>\n<template>\n<div>\n<h1>Congratulations {{ firstName }} {{ lastName }}!</h1>\n<h3>\nYou've successfully created a project with\n<a target=\"_blank\" href=\"https://vitejs.dev/\">Vite</a> +\n<a target=\"_blank\" href=\"https://vuejs.org/\">Vue 3</a>.\n</h3>\n</div>\n</template>\nWhen you define props using the option, the props become\nprops\navailable using just their names in the template (rather than as\nproperties of the object). Because the object is\nprops props\npassed to using the name , you have to reference\nsetup() props\nprops using dot notation inside the function, as shown in\nsetup()\nthe statements in Listing 4-3.\nconsole.log()\nBinding Data to Templates\nIn the preceding section, I tell you that the way to pass data from\na parent component to a child component is by using attributes.\nFor example, if you want to make a prop called\nmessageText\navailable in a component called , you can use the\nMessage\nfollowing element inside a :\n<template>\n<Message messageText=\"Hello there.\"/>\nThis example works fine if the value of will always be\nmessageText\n\"Hello there.\" If the value of an attribute will change, you can\ndefine your attribute value in the block and use the\n<script> v-\ndirective to bind your attribute to a value or an expression,\nbind\nas shown in Listing 4-4.\nLISTING 4-4: Binding an Attribute to Data\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:498>\n", "text": "<script setup>\nfunction superHeroDescriptionGenerator(name, superlative, type) {\nreturn `${name}, the ${superlative} ${type}`;\n}\n</script>\n<template>\n<MythGenerator\nv-bind:mainCharacter=\"\nsuperHeroDescriptionGenerator('Superman', 'Greatest', 'Hero')\n\"\n/>\n</template>\nThe shorthand version of is just a colon ( , as shown in\nv-bind :)\nListing 4-5.\nLISTING 4-5: Using the Shorthand Version\nof\nv-bind\n<script setup>\nconst props = defineProps(['postalCode']);\n</script>\n<template>\n<StoreLocator :postalCode=\"postalCode\"/>\n</template>\nThe directive can be used to pass any type of data to child\nv-bind\ncomponents. Even though the value of a bound attribute is in\nquotes, the directive causes the contents of the value to\nv-bind\nbe interpreted as JavaScript.\nFor example, here's how to pass a number to a child component:\n<Product :numInStock=\"9\"/>\nHere's how to pass an object:\n<Product :details=\"{name:'sunflower',description:'giant\nflower',price:'2.99'}\"/>\nand here's how to pass an array:\n<Product :relatedProductIds=\"[2,16,21]\"/>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:499>\n", "text": "Passing a Boolean is somewhat of a special case because it's\npossible to pass a Boolean value just by including the\ntrue\nattribute without a name, as in the following example:\n<WeatherInOregon is-raining/>\nIf you want to pass a Boolean value as a prop, however,\nfalse\nyou need to bind the attribute, like this:\n<WeatherInOregon :is-sunny=\"false\"/>\nInitializing and Changing\nReactive Data\nTo create reactive variables in Vue, you can use the\nreactive()\nfunction or the function. Both functions serve the same\nref()\npurpose: They create variables that are tracked by Vue and that\ntrigger component updates. In some cases, you can choose either\nfunction and it will work fine, and you can mix the two functions\nin the same app. However, there are some differences between\nthe two that determine how and where you use them.\nThe function creates a reactive object or array. When\nreactive()\nusing , it's common to create an object named\nreactive() state\nthat holds any reactive properties for your component. To create\na reactive object that can be used in a template, import\ninto your component and then call it from within the\nreactive()\nfunction, as shown in Listing 4-6.\nsetup()\nLISTING 4-6: Creating a Reactive State\nObject\n<script>\nimport { reactive } from 'vue';\nexport default {\nsetup() {\nconst state = reactive({ cupsOfCoffee: 0 });\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:500>\n", "text": "return {\nstate,\n};\n},\n};\n</script>\nIf you use , the and\n<script setup> export default return\nstatements are handled by Vue and you can just call\nreactive()\nand assign the result to a constant or variable, as shown in Listing\n4-7.\nLISTING 4-7: Creating the Reactive State\nwith\n<script setup>\n<script setup>\nimport { reactive } from 'vue';\nconst state = reactive({ cupsOfCoffee: 0 });\n</script>\nWhether you use the full function or , the\nsetup() <script setup>\nresulting state object can be referenced in and in\n<template>\n, as shown in Listing 4-8.\n<script>\nLISTING 4-8: Using a Reactive State\nObject\n<script setup>\nimport { reactive } from 'vue';\nconst state = reactive({ cupsOfCoffee: 0 });\nfunction drinkCoffee() {\nstate.cupsOfCoffee++;\n}\n</script>\n<template>\n<h1>Coffee Tracker</h1>\n<button @click=\"drinkCoffee\">Drink Coffee</button>\n<p>You've had {{ state.cupsOfCoffee }} cups of coffee.</p>\n</template>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:501>\n", "text": "Rendering the component from Listing 4-8 as part of a Vue app\ncreates the useful reactive user interface shown in Figure 4-1.\nreactive() creates a Proxy object\nWhen you call , it creates an object in your Vue\nreactive()\napplication that you have no direct access to. The object that's\nreturned from is actually a object.\nreactive() Proxy\nFIGURE 4-1: I'm trying to cut down.\nJavaScript's object allows you to create an object that can\nProxy\nbe used in place of the original object. Creating a proxy object is\nwhat allows Vue to track the properties of the object to trigger\nupdates.\nBy default, Vue tracks each property of a reactive state object,\nincluding objects that are nested inside other properties. When\nany operation changes one of these properties, the component is\nupdated. This tracking of the nested properties is called deep\nreactivity.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:502>\n", "text": "Limitations of reactive()\nThe first limitation of the reactive state created using\nreactive()\nis that it can be used only to create objects and arrays.\nThe second limitation is that copies of state objects\nreactive()\nlose their reactivity.\nBecause the object returned by is a proxy, copying,\nreactive()\ndestructuring, or passing a reactive state object to a function\ncauses the new variables to lose the connection to the reactive\nstate. For example, in the following block, a reactive\n<script>\nstate object is created and then destructured. The resulting\nvariables contain only the values from the state object, and they\naren't reactive themselves:\n<script setup>\nimport { reactive } from 'vue';\nconst state = reactive({cupsOfCoffee: 0, glassesOfWater:0});\nlet {cupsOfCoffee, glassesOfWater} = state;\ncupsOfCoffee++;\n</script>\nIn this code snippet, changes to the variable\ncupsOfCoffee\nextracted from the state object don't affect the reactive state.\nIntroducing ref()\nThe function is designed to address the limitations of\nref()\n. The function serves the same basic purpose as\nreactive() ref()\n\u2014 it creates reactive variables. However, unlike\nreactive()\n, a can hold any value type.\nreactive() ref\nThe function works by wrapping the value you pass to it\nref()\nwith an object (called a ref object) that has a property. To\nvalue\nuse the value of a ref object in a component's block, you\n<script>\nneed to use the property, as shown in Listing 4-9.\nvalue\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:503>\n", "text": "LISTING 4-9: Creating and Accessing\nref\nObjects\n<script setup>\nimport { ref } from 'vue';\nconst cupsOfCoffee = ref(0);\nfunction drinkCoffee() {\ncupsOfCoffee.value++;\n}\n</script>\nIn the , ref objects are \"unwrapped\" by Vue, which\n<template>\nmakes them available without having to specify the\n.value\nproperty. Listing 4-10 shows the Coffee Tracker app from Listing\n4-8 rewritten using .\nref()\nLISTING 4-10: Using Inside a\nrefs\nTemplate\n<script setup>\nimport { ref } from 'vue';\nconst cupsOfCoffee = ref(0);\nfunction drinkCoffee() {\ncupsOfCoffee.value++;\n}\n</script>\n<template>\n<h1>Coffee Tracker</h1>\n<button @click=\"drinkCoffee\">Drink Coffee</button>\n<p>You've had {{ cupsOfCoffee }} cups of coffee.</p>\n</template>\nHere are a few things to keep in mind about refs:\nObjects in refs are deeply reactive: When used for\nholding an object, the function converts its prop\nref() value\nto a deeply reactive state variable using . As with\nreactive()\nproxy objects created using just , the properties of\nreactive()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:504>\n", "text": "nested objects are tracked by Vue and they trigger component\nupdates.\nref() creates references: The ref object created by\nref()\ncan be passed to functions and can be destructured and\ncopied without losing its reactivity.\nExperimenting with Reactivity\nTransform\nAlthough it's only a minor inconvenience to have to use to\n.value\nget the value of a ref object, forgetting is the cause of\n.value\nmany bugs in Vue component code. To further simplify the use of\nreactive data, Vue 3 has a feature it calls Reactivity Transform,\nwhich can automatically destructure ref objects so that you don't\nneed to access them with .\n.value\nAs of this writing, Reactivity Transform is an experimental\nfeature and is disabled by default. Because it's still\nexperimental, the exact syntax for using Reactivity Transform\nmay change in the future.\nTo enable Reactivity Transform when using vue-create, modify the\nfile named at the root of your project to set\nvite.config.js\nto inside the object, as\nreactivityTransform true pluginsconfig\nshown in Listing 4-11.\nLISTING 4-11: Enabling Reactivity\nTransform\nexport default defineConfig({\nplugins: [vue({ reactivityTransform: true })],\nresolve: {\nalias: {\n'@': fileURLToPath(new URL('./src', import.meta.url)),\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:505>\n", "text": "},\n},\n});\nEnabling Reactivity Transform enables several compile-time\nmacros that you can use in place of any built-in Vue function that\nreturns a . These macros have the same names as built-in\nref()\nVue functions, but they're prefaced with .\n$\nFor example, to create a ref object using Reactivity Transform,\nuse the macro, like this:\n$ref()\nconst cupsOfCoffee = $ref(0);\nWith this task complete, you can make use of\ncupsOfCoffee\nwithout , as shown in Listing 4-12.\n.value\nLISTING 4-12: Using Reactivity Transform\n<script setup>\nconst cupsOfCoffee = $ref(0);\nfunction drinkCoffee() {\ncupsOfCoffee++;\n}\n</script>\n<template>\n<h1>Coffee Tracker</h1>\n<button @click=\"drinkCoffee\">Drink Coffee</button>\n<p>You've had {{ cupsOfCoffee }} cups of coffee.</p>\n</template>\nComputing Properties\nAlthough it's possible to write logic involving reactive variables\ninside the template, this rapidly leads to problems. These are the\ntwo considerations for using logic in your templates:\nCode in your template runs every time the component is\nupdated.\nCode in your template isn't reusable and can quickly become\ndifficult to maintain.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:506>\n", "text": "To solve both of these problems, Vue has a function called\nthat returns a computed property. A computed\ncomputed()\nproperty functions like a normal method inside the script block \u2014\nand it tracks reactive variables used inside it and updates only\nwhen one of its dependencies changes.\nIn contrast, if you invoke a method from within your template, it\nruns on every update of the component.\nA common use for computed properties is to perform complex\ncalculations on data that may not change every time a component\nis updated. For example, in Listing 4-13, clicking a button causes\na list of up to 100 repositories to be fetched from GitHub. When\nthe list finishes downloading, a computed property is used to\ncalculate the number of repositories and the total number of stars\nin those repositories.\nLISTING 4-13: Using a Computed Property\n<script setup>\nimport { ref, computed } from 'vue';\nconst repos = ref([]);\nconst loading = ref(false);\nconst error = ref(null);\nfunction fetchRepos() {\nloading.value = true;\nerror.value = null;\nfetch('https://api.github.com/users/vuejs/repos?per_page=100')\n.then((response) => {\nreturn response.json();\n})\n.then((data) => {\nrepos.value = data;\nloading.value = false;\n})\n.catch((e) => {\nerror.value = e;\nloading.value = false;\n});\n}\nconst repoStats = computed(() => {\nreturn {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:507>\n", "text": "repoCount: repos.value.length,\nstargazers: repos.value.reduce((total, repo) => {\nreturn total + repo.stargazers_count;\n}, 0),\n};\n});\n</script>\n<template>\n<div>\n<h1>Vue.js Repositories</h1>\n<button @click=\"fetchRepos\">\n{{ loading ? 'Loading\u2026' : 'Fetch Repos' }}\n</button>\n<p v-if=\"error\">\n{{ error.message }}\n</p>\n<p>\nShowing {{ repoStats.repoCount }} repositories with a total of\n{{ repoStats.stargazers }} stars.\n</p>\n<ul>\n<li v-for=\"repo in repos\" :key=\"repo.name\">\n<a :href=\"repo.html_url\">{{ repo.name }}</a>\n<p>{{ repo.description }}</p>\n</li>\n</ul>\n</div>\n</template>\nFigure 4-2 shows the result of running this component in a Vue\napp.\nTo try out this script with your own GitHub repo (or\nanyone else's), replace the username in the URL argument to\nthe function with a different GitHub user's username.\nfetch()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:508>\n", "text": "FIGURE 4-2: Vue has a lot of stars.\nReacting to State Changes\nwith Watch()\nComputed properties are useful for computing values using pure\nfunctions. However, it's sometimes necessary to perform functions\ninvolving side effects in response to reactive data changes. Vue\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:509>\n", "text": "provides the function to invoke a callback whenever a\nwatch()\nspecified reactive value changes.\nA pure function is one that doesn't change anything\noutside of itself and that always returns the same value when\ngiven the same input.\nA side effect is any operation that isn't directly related to\nthe return value of a function; for example, invoking an\nasynchronous operation or modifying the DOM.\nThe function takes a value to watch and a callback\nwatch()\nfunction as arguments. Listing 4-14 shows a component that\nwatches for changes to a ref called that's controlled by\nsearchTerm\nan element. When the search term changes, the watcher\ninput\ninvokes a call to GitHub's API to search for a repository containing\nthe search term.\nLISTING 4-14: Watching a Value to Trigger\na Side Effect\n<script setup>\nimport { ref, watch } from 'vue';\nconst searchTerm = ref('');\nconst searchResults = ref([]);\nwatch(searchTerm, async (newTerm) => {\nif (newTerm.length > 2) {\nconst response = await fetch(\n`https://api.github.com/search/repositories?q=${newTerm}`\n);\nconst data = await response.json();\nsearchResults.value = data.items;\n}\n});\n</script>\n<template>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:510>\n", "text": "<div>\n<input type=\"text\" v-model=\"searchTerm\"/>\n<ul>\n<li v-for=\"result in searchResults\" :key=\"result.id\">\n<a :href=\"result.html_url\" target=\"_blank\">{{ result.full_name }}</a>\n</li>\n</ul>\n</div>\n</template>\nFigure 4-3 shows the output from Listing 4-14.\nFIGURE 4-3: A dynamic search box, created using a watcher function.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:511>\n", "text": "Chapter 5\nResponding to Events\nIN THIS CHAPTER\nSetting event listeners\nEmitting events\nHandling events\nUsing 2-way binding\nBindings Forms\n\u201cThere are many events in the womb of time, which will be\ndelivered.\u201d\n\u2014WILLIAM SHAKESPEARE\nEvents are what trigger changes to reactive data in Vue. Events\ncan be fired by user input, by things that happen inside the\nbrowser, and in response to things happening inside a Vue\ninstance. In this chapter, I show you how to listen for and handle\nevents in Vue and how to bind form inputs to reactive data, and I\ndescribe how Vue's 2-way data binding works.\nSetting Listeners with v-on\nEvent listeners in Vue components are created using the\nv-on\ndirective. You can use in two different ways: using inline\nv-on\nhandlers or using method handlers.\nInline handlers\nInline handlers resemble HTML's built-in event attributes, except\nthat rather than start with (as in , , or ),\non onclick onhover onload\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:512>\n", "text": "they start with or the shorthand for the directive, .\nv-on v-on @\nThe value of an inline handler can be a JavaScript statement or a\nfunction call. For example, Listing 5-1 shows a element\n<button>\nthat changes the value of a reactive variable when you click it.\nLISTING 5-1: Using an Inline Event\nHandler\n<script setup>\nimport { ref } from 'vue';\nconst userInput = ref('');\n</script>\n<template>\n<div>\n<textarea v-model=\"userInput\"/>\n<p>{{ userInput }}</p>\n<button @click=\"userInput = userInput.toUpperCase()\">Shout It</button>\n</div>\n</template>\nThe result of running this component, typing something into the\ninput, and clicking the button is shown in Figure 5-1.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:513>\n", "text": "FIGURE 5-1: Handling events inline.\nA couple of interesting things are going on in Listing 5-1. The first\nis that I'm using a directive I haven't shown you yet, ,\nv-model\nthough I describe it later in this chapter. The directive\nv-model\ncreates a 2-way link between the reactive variable named\nand the element. The directive makes\nuserInput <input> v-model\nthe text you type into the element automatically update\n<input>\nthe reactive value.\nThe second interesting thing is that the directive takes a\nv-on\nstatement as its value and this statement contains a call to a\nfunction. Because the value of is a string (as you can tell by\nv-on\nthe fact that it's enclosed in quotes), the statement doesn't get\nexecuted when the component mounts. Rather, in an inline event\nhandler (as in an HTML event attribute), the string value of the\nevent handler attribute gets executed as JavaScript when you\nclick the element.\n<button>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:514>\n", "text": "If you've read Books 1, 2, and 3, you should recognize\nthat this ability to pass a statement or a function call (as\nopposed to a function definition) to an event listener doesn't\nwork in pure JavaScript or in React.\nMethod handlers\nMethod handlers more closely resemble the way that the native\nJavaScript method or React's event listener\naddEventListener()\nattributes work. The difference in Vue is that you still pass a\nstring to the directive, but the value of the string is a\nv-on\nfunction definition, as opposed to the function invocation that's\nused in Vue's inline handlers.\nTo use a method handler, you can define an inline function using\narrow syntax, or you can define a method in the block.\n<script>\nListing 5-2 shows how to use a method handler.\nLISTING 5-2: Using a Method Handler\n<script setup>\nimport { ref } from 'vue';\nconst userInput = ref('');\nfunction shoutText() {\nalert(userInput.value.toUpperCase());\n}\n</script>\n<template>\n<div>\n<textarea v-model=\"userInput\"/>\n<p>{{ userInput }}</p>\n<button @click=\"shoutText\">Shout It</button>\n</div>\n</template>\nThe result of mounting an instance of the component in Listing 5-\n2 is shown in Figure 5-2.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:515>\n", "text": "FIGURE 5-2: Handling events with a method handler.\nBecause method handlers call methods defined outside the\nblock, they have access to all the browser's globals,\n<template>\nrather than just to the subset that Vue makes available inside the\nblock. For example, Listing 5-2 is able to call the\n<template>\nfunction. Figure 5-3 shows what happens if you\nwindow.alert()\ntry to call from the inline event handler shown in\nwindow.alert()\nListing 5-1.\nChoosing between method and\ninline handlers\nWhich should you use \u2014 a method handler or an inline handler?\nIn general, inline event handlers should be used for only very\nsimple statements. You might also choose to use an inline event\nhandler to call a function defined in the block and pass it\n<script>\narguments. For example, the following event handler works in\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:516>\n", "text": "Vue (provided that the function exists and that the\npostData()\narguments being passed to it exist, of course):\n<button @click=\"postData(itemId,price,quantity)\">\nCheckout\n</button>\nFIGURE 5-3: Access to globals is restricted in inline event handlers.\nInline event handlers also allow you to pass any arbitrary data\ndirectly to a handler function. For example:\n<button @click=\"postData('You clicked the button!')\">\nClick\n</button>\nMethod handlers work more like normal JavaScript. For that\nreason, I generally prefer them, to avoid confusion. As with\nand React's event attributes, method event\naddEventListener()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:517>\n", "text": "handlers automatically receive an object, which can be used\nevent\nto get information about the event and the element the event was\ntriggered on, as shown in Listing 5-3.\nLISTING 5-3: Method Handlers Receive an\nEvent Object\n<script setup>\nfunction submitData(event) {\nevent.preventDefault();\nconsole.log(event.target.firstName.value);\n}\n</script>\n<template>\n<div>\n<form @submit=\"submitData\">\n<input id=\"firstName\"/>\n<input id=\"lastName\"/>\n<input type=\"submit\" value=\"Submit form\"/>\n</form>\n</div>\n</template>\nTo pass arbitrary data to a method handler, you can wrap function\ncalls or statements in an arrow function, as shown in Listing 5-4.\nLISTING 5-4: Wrapping Statements and\nFunction Calls in an Arrow Function\n<script setup>\nfunction submitData(event, thankYouMessage) {\nevent.preventDefault();\nconsole.log(`${thankYouMessage} ${event.target.firstName.value}`);\n}\n</script>\n<template>\n<div>\n<form @submit=\"(event) => submitData(event, 'Thanks')\">\n<input id=\"firstName\"/>\n<input id=\"lastName\"/>\n<input type=\"submit\" value=\"Submit form\"/>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:518>\n", "text": "</form>\n</div>\n</template>\nUsing Event Modifiers\nEvent modifiers are functions or properties of the event that can\nbe accessed by using a period after the event name in . For\nv-on\nexample, though it's perfectly fine to call\nevent.preventDefault()\ninside an event handler method (as shown in the preceding\nlisting), you can achieve the same result by using the\n.prevent\nmodifier with :\nv-on\n<form @submit.prevent:click = 'submitData'>\nIn addition to , several other event modifiers can be used\n.prevent\nto modify how the event is handled, as listed here:\nprevents the event from propagating to surrounding\n.stop\nelements.\ntriggers the event only if the is the\n.self event.target\nelement that the listener is set on (and not a child).\ncauses events that happen on a child element to be\n.capture\nhandled by parents first before being handled by the child.\nThis is the opposite of the default \"bubbling\" behavior of\nevents.\ncauses the event to be triggered only once, at most.\n.once\nimproves the performance of default behaviors by\n.passive\ncausing the default behavior of the element to happen\nimmediately rather than wait for the event handler to\ncomplete. Setting the passive option can be used to improve\nthe performance of events involving touch screens.\nUsing key modifiers\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:519>\n", "text": "Vue's key modifiers modify keyboard events ( or ) to\nkeyup keydown\nspecify the key or combination of keys that the event listener\nshould listen for. Key modifiers can be specified by attaching the\nmodifier to an event using a period. Any valid key name can be\nused as a key modifier by converting to kebab-case the name of\nthe event that the key produces. For example, to detect the Caps\nLock key, you can use the modifier, like this:\ncaps-lock\n<input @keyup.caps-lock=\"showCapsLockWarning\"/>\nYou can find the complete list of key events on Mozilla Developer\nNetwork at\nhttps://developer.mozilla.org/en-\n.\nUS/docs/Web/API/KeyboardEvent\nVue also provides several aliases for frequently used keys:\n.enter\n.tab\n(captures the Delete and Backspace keys)\n.delete\n.esc\n.space\n.up\n.down\n.left\n.right\nTo specify key combinations, you can chain together key\nmodifiers. Listing 5-5 shows a element with an event\n<textarea>\nlistener that detects whether the user presses Ctrl+Q.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:520>\n", "text": "You can also detect key combinations that involve the \u2318\nkey (on macOS) or the Windows key (on Windows) by using\nthe modifier.\n.meta\nLISTING 5-5: Detecting Keyboard\nCombinations\n<script setup>\nfunction quitEditing() {\nalert(`Are you sure you want to quit editing?`);\n}\n</script>\n<template>\n<div>\n<textarea @keyup.ctrl.q=\"quitEditing\"/>\n</div>\n</template>\nKEYUP OR KEYDOWN?\nThe keyup and keydown events both detect key presses, but their main\ndifference becomes obvious (as you may have guessed, by their names) when\nthey detect the event. Deciding which one to use depends on whether you\nwant an event handler to repeat whenever a user holds down a key. The\nkeydown event fires multiple times when a key is held down. Because keyup\nonly detects a key pressed becoming unpressed, it doesn't respond to a key\nthat's held down until the key is released.\nDetecting exact combinations\nIf you run the component shown in Listing 5-5 and try pressing\nadditional keys along with Ctrl+Q (for example, Ctrl+Shift+Q),\nyou find that it still triggers the event handler. If you want to\ndetect only the exact combination of keys, you can use the\n.exact\nmodifier, as shown here:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:521>\n", "text": "<textarea @keyup.ctrl.q.exact=\"quitEditing\"/>\nThe modifier can be used with other types of events as\n.exact\nwell. For example if you want to listen for a click event but not a\nCtrl+click event, you can use the directive.\n@click.exact\nBinding Forms to Events and\nData\nBy binding the attribute and adding an event listener to a\nvalue\nform input element, it's possible to create a unidirectional bind\nbetween the form input and the component's reactive data. For\nexample, the text input shown in Listing 5-6 receives an initial\nvalue from the ref named . An event listener set on\nfavoriteFood\nthe element listens for input events and calls an event\n<input>\nhandler that updates the value of the ref.\nfavoriteFood\nLISTING 5-6: Updating Data with 1-Way\nBinding\n<script setup>\nimport { ref } from 'vue';\nconst favoriteFood = ref('pizza');\nfunction updateFavoriteFood(event) {\nfavoriteFood.value = event.target.value;\n}\n</script>\n<template>\n<div>\n<input type=\"text\" :value=\"favoriteFood\" @input=\"updateFavoriteFood\"/>\n<p>My favorite food is {{ favoriteFood }}</p>\n</div>\n</template>\nThe code shown in Listing 5-6 works fine. However, for simply\ncreating a bind between a form input and reactive data, Vue\nprovides a simpler method: the directive.\nv-model\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:522>\n", "text": "Making two-way bindings with v-\nmodel\nThe directive creates a 2-way bind between a form input\nv-model\nand reactive data. Behind the scenes, uses an attribute\nv-model\nbinding from the reactive data to the input and an event listener\nthat detects events and updates the reactive data. However,\ninput\ninstead of you having to manually write the event handler, the\nv-\ndirective does it for you.\nmodel\nListing 5-7 shows how to use a directive to simplify the\nv-model\ncode from Listing 5-6.\nLISTING 5-7: Using\nv-model\n<script setup>\nimport { ref } from 'vue';\nconst favoriteFood = ref('pizza');\n</script>\n<template>\n<div>\n<input type=\"text\" v-model=\"favoriteFood\"/>\n<p>My favorite food is {{ favoriteFood }}</p>\n</div>\n</template>\nThe directive is the same as using a directive and\nv-model v-bind\na directive. Rewritten without , the element\nv-on v-model <input>\nin Listing 5-7 would look like this:\n<input\ntype=\"text\"\n:value=\"favoriteFood\"\n@input=\"(event) => (favoriteFood = event.target.value)\"\n/>\nUsing v-model with various input\ntypes\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:523>\n", "text": "The directive automatically manipulates the correct\nv-model\nproperty of an input, depending on its type. For example, when\nused with text inputs (created using or\n<input type=\"text\">\n), listens for events and updates the\n<textarea> v-model input\nproperty. When used with check boxes or radio buttons\nvalue\n(created using or\n<input type=\"checkbox\"> <input\n, listens for events and updates the\ntype=\"radio\">) v-model change\nproperty. When used with elements,\nchecked <select> v-model\nlistens for events and updates the property.\nchange value\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:524>\n", "text": "Book 5\nSvelte\nContents at a Glance\nChapter 1: Getting Started with Svelte\nWhat Makes Svelte Different?\nBuilding Your Scaffolding\nGetting the Svelte for VS Code Extension\nExploring a Svelte App\nPlaying with Svelte\nChapter 2: Building with Components\nWriting Lean Components\nIdentifying What's in a Component\nAdding Style to a Component\nChapter 3: Designing Templates\nElements Are the Building Blocks\nDocumenting Svelte with Comments\nChoosing a Path\nCreating Loops\nWriting Text Expressions\nComposing with Slots\nChapter 4: Using Directives\nListening for Events with on:\nCreating Two-Way Bindings with :bind\nUsing Transition Animations\nChapter 5: Using the Component Lifecycle\nThe Svelte Lifecycle\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:525>\n", "text": "Fetching Data in Svelte\nChapter 6: Advanced Svelte Reactivity\nConstructing and Stocking the Store\nGetting and Setting Context\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:526>\n", "text": "Chapter 1\nGetting Started with Svelte\nIN THIS CHAPTER\nGetting the skinny on Svelte\nScaffolding an app\nExploring the structure of a Svelte app\n\"\u2026 all work and no play makes Jack a dull boy. Skinny, but dull.\u201d\n\u2014LL COOL J\nSvelte is a front-end JavaScript compiler. In this chapter, I tell you\nwhat that statement means, how to create your first application\nwith Svelte, how to get a handle on what makes Svelte tick, and\nhow to see where it's similar to and different from other front-end\nlibraries and frameworks.\nWhat Makes Svelte Different?\nLike ReactJS and Vue, Svelte can be used to create component-\nbased JavaScript web applications. Svelte is newer than ReactJS\nor Vue.js and has a smaller developer base than either. Because\nit's smaller and simpler to learn and use (and perhaps even\nfaster), it has gained a lot of fans.\nThe first thing to know is that Svelte doesn't use a virtual DOM.\nInstead, Svelte compiles your code into optimized JavaScript that\nmakes updates to the DOM imperatively.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:527>\n", "text": "The difference between declarative code and imperative\ncode is discussed in Chapter 1 of Book 3.\nSvelte is a compiler. In the end, of course, every JavaScript\nframework is just an abstraction for pure JavaScript and calls to\nthe native DOM methods. The difference between how Svelte\nruns in the browser and how React and Vue run is that Svelte's\ncompiled code isn't abstracted at runtime. Instead, it's just pure\nJavaScript.\nOne result of Svelte's lack of a virtual DOM is that the initial\nloading time of a Svelte app may be shorter than React or Vue.js\nbecause there's no library interpreting the deployed code. Another\nresult is that Svelte may be faster because it has no intermediary\nstep between your code and the DOM, whereas React and Vue.js\nboth feature a virtual DOM.\nFigure 1-1 shows the difference between how Svelte manipulates\nthe DOM and how React's Virtual DOM works.\n\u00a9 John Wiley & Sons, Inc.\nFIGURE 1-1: Svelte-versus-React rendering.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:528>\n", "text": "Building Your Scaffolding\nEnough talk \u2014 let's build something! The easiest way to get\nstarted with Svelte is to use a prebuilt toolchain and an\napplication template. As with other front-end frameworks, we call\nthis combination scaffolding because it gives you a frame on\nwhich to build your app.\nAlthough you have several different ways to scaffold a Svelte app,\nthe current most popular toolchain for developing Svelte apps is\nVite.\nIf you've read Book 3 and Book 4, you may recognize Vite\nas the same tool you used for scaffolding React and Vue\napps.\nFollow these steps to scaffold your first Svelte app:\n1. Create a new project in VS Code, or just an empty\nfolder in your existing project.\n2. Open VS Code's integrated terminal.\nOpening and using VS Code's integrated terminal is\ncovered in Chapter 1 of Book 1.\n3. Type the following command into the terminal:\nnpm create vite@latest my-svelte-app -- --template svelte\n4. Change the working directory to your new Svelte app:\ncd my-svelte-app\n5. Install the dependencies for your app:\nnpm install\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:529>\n", "text": "6. Start the development server:\nnpm run dev\nOnce you start the development server, go back to your browser\nand open https://localhost:5173. You see the default starter app,\nwhich looks something like Figure 1-2. Click the button a couple\nof times to make sure it's working, and you're ready to go!\nFIGURE 1-2: The Vite + Svelte starter app.\nGetting the Svelte for VS Code\nExtension\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:530>\n", "text": "Back in VS Code, look at the files and folders contained in the\ndefault Svelte template. If you've read Books 3 and 4, many of\nthese will be familiar to you. As with other frameworks that have\ntheir own special syntax and file extensions, the next thing to do\nis to install a VS Code extension to tell VS Code how to display\nthe code and to enable tool tips.\nFollow these steps to install the Svelte for VS Code extension:\n1. Expand the folder in your Svelte project.\nsrc\nYou see Svelte's root component, which is named .\nApp.svelte\n2. Open for editing.\nApp.svelte\nVS Code suggests that you install the recommended extension\nfor files.\n.svelte\n3. Click the button to show the recommended plugin, and\nyou'll see information about the Svelte for VS Code\nextension, as shown in Figure 1-3.\n4. Click Install to get the plugin.\nAfter the plugin installs, you may see an additional dialog box,\nasking whether you want to enable a plugin for TypeScript\nsupport. There's no harm in enabling this plugin, but it's not\nrequired at this time.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:531>\n", "text": "FIGURE 1-3: Svelte for VS Code adds Svelte support to VS Code.\nWith Svelte for VS Code installed, you can return to viewing\nand see that syntax highlighting has now been\nApp.svelte\nenabled.\nExploring a Svelte App\nThe first step in figuring out how Svelte works is to open the\nfile into which your app will be rendered. The default\nindex.html\nfile for the Vite template is shown in Listing 1-1.\nindex.html\nLISTING 1-1: An index.html File for a\nSvelte App\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Vite + Svelte</title>\n</head>\n<body>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:532>\n", "text": "<div id=\"app\"></div>\n<script type=\"module\" src=\"/src/main.js\"></script>\n</body>\n</html>\nThe HTML file in Listing 1-1 contains all the parts you would\nexpect from a single-page app's single page. It has a\n<div>\nelement with an of where the Svelte app is loaded, and it\nid app\nhas a tag that loads a JavaScript file.\n<script>\nLet's move on to . This is the JavaScript file that triggers\nmain.js\nthe loading of everything else. The code for is shown in\nmain.js\nListing 1-2.\nLISTING 1-2: The main.js File for a Svelte\nApp\nimport './app.css'\nimport App from './App.svelte'\nconst app = new App({\ntarget: document.getElementById('app')\n})\nexport default app\nThe file loads the app's root component, , and\nmain.js App.svelte\ncreates an instance of it, passing in a configuration object. The\nconfiguration object in Listing 1-2 contains only a single property:\n. The property configures where the component will\ntarget target\nbe loaded into the HTML document.\nThe next step in figuring out how Svelte works, as you may have\nguessed by now, is to look at . Listing 1-3 shows the\nApp.svelte\ndefault file created by the Vite template.\nApp.svelte\nLISTING 1-3: The Root Component\n<script>\nimport svelteLogo from './assets/svelte.svg'\nimport Counter from './lib/Counter.svelte'\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:533>\n", "text": "</script>\n<main>\n<div>\n<a href=\"https://vitejs.dev\" target=\"_blank\">\n<img src=\"/vite.svg\" class=\"logo\" alt=\"Vite Logo\"/>\n</a>\n<a href=\"https://svelte.dev\" target=\"_blank\">\n<img src={svelteLogo} class=\"logo svelte\" alt=\"Svelte Logo\"/>\n</a>\n</div>\n<h1>Vite + Svelte</h1>\n<div class=\"card\">\n<Counter/>\n</div>\n<p>\nCheck out <a href=\"https://github.com/sveltejs/kit#readme\"\ntarget=\"_blank\">SvelteKit</a>, the official Svelte app framework powered by\nVite!\n</p>\n<p class=\"read-the-docs\">\nClick on the Vite and Svelte logos to learn more\n</p>\n</main>\n<style>\n.logo {\nheight: 6em;\npadding: 1.5em;\nwill-change: filter;\n}\n.logo:hover {\nfilter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.svelte:hover {\nfilter: drop-shadow(0 0 2em #ff3e00aa);\n}\n.read-the-docs {\ncolor: #888;\n}\n</style>\nThe component shown in Listing 1-3 is a static component: It\ncontains no reactive data. However, it does tell you quite a bit\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:534>\n", "text": "about the structure of a Svelte component.\nAt first glance, the structure of a Svelte component looks like that\nof a Vue component. It has a block containing your\n<script>\ncomponent's imports and logic, an HTML template, and a\n<style>\nblock.\nIf you look more closely, you see that the block imports\n<script>\na component named and that an instance of the\nCounter Counter\ncomponent is created and used in the HTML with a\n<Counter>\nelement. As someone coming to Svelte for the first time, but\nhaving had experience with other JavaScript single-file app\nlibraries and components, you've probably guessed by now that\nthe component contains all the complex logic and calls to\nCounter\nSvelte reactivity methods that make it possible to increment a\nnumber when a button is clicked. So, take a look now at .\nCounter\nThe Vite Svelte template keeps custom components in a\nfolder named (short for library) by default. This is only a\nlib\nconvention. If you feel more comfortable with creating a\nfolder called for your components, that's fine, too.\ncomponents\nListing 1-4 shows the component.\nCounter\nLISTING 1-4: Counter.svelte\n<script>\nlet count = 0;\nconst increment = () => {\ncount += 1;\n};\n</script>\n<button on:click={increment}>\ncount is {count}\n</button>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:535>\n", "text": "The component in Listing 1-4 is simple enough, and it should give\nyou some more clues about how Svelte works:\nVariables you declare at the top level in the block are\n<script>\nautomatically reactive.\nYou can use JavaScript code inside the template code by\nsurrounding it with curly braces.\nEvent listeners are created by using followed by the event.\non:\nEvent handlers are passed as JavaScript code to the event\nlistener attributes.\nYou're well on your way to learning Svelte. Next, go a little deeper\nand try making some changes to the default Svelte template app.\nPlaying with Svelte\nRather than launch directly into telling you all the syntax and\nrules of using Svelte, in this section I tell you how to start building\nsomething (sort of) useful with Svelte and see what new things\nyou learn about it as you go along.\nThe app I show you how to build is a simple microblogging app \u2014\nsomething like Twitter, except with fewer users. You won't\nconnect your app to the web (yet), so your Twitter imitator will\nhave exactly one user. After meeting with the marketing team,\nyou decide to call the app Soliloquy.\nIn case you're not well-versed in English Renaissance\ndrama, a soliloquy takes place when you speak out loud to\nyourself. Hamlet's \"To be or not to be\" speech is perhaps the\nmost well-known dramatical soliloquy, followed by hundreds\nof Disney princess songs.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:536>\n", "text": "Building the basic look-and-feel\nWith what you already know about Svelte, combined with some\nJavaScript knowhow from Book 1, you can get an extremely basic\nversion of this app up and running.\nYou start with the root component, . Open in VS\nApp App.svelte\nCode and follow these steps:\n1. Delete the imports of the component and the\nCounter\nlogo from the block, but leave the starting and\n<script>\nending tags.\n<script>\n2. Leave the element, but delete everything inside\n<main>\nit.\nSvelte doesn't require a element, but it's a handy\n<main>\ncontainer for the rest of the template code.\n3. Delete the styles in the block, but leave the\n<style>\nstarting and ending tags.\n<style>\n4. Create an element and give your app a title, and\n<h1>\nthen put an element under it with a description of\n<h2>\nthe app:\n<h1>Soliloquy</h1>\n<h2>Social media without the sharing</h2>\n5. Create an input element below the headers and give it\na label:\n<label>Talk to yourself: <input type=\"text\"></label>\n6. Make a button next to the input that you'll use for\nsubmitting your posts:\n<button>Post It!</button>\nMake sure your development server is running, or start it by\nentering npm run dev in the terminal. When you open your\nbrowser, you should see something like Figure 1-4.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:537>\n", "text": "FIGURE 1-4: The start of your unsocial media app.\nMaking reactive data\nA logical next step in creating the microblogging app would be to\nmake a couple of test posts and display them below the input. To\ndo that, you declare a variable in the script and display its values\nin a , as described in these steps:\n<div>\n1. Inside the , declare an array and initialize it\n<script>\nwith a couple of elements:\n<script>\nlet posts = ['first post!','note to self','test'];\n</script>\n2. Create a element below the .\n<div> <button>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:538>\n", "text": "At this point, I could tell you how to make loops in Svelte, but\nit might be interesting to just see what happens if you try\nrendering the posts array directly, like this:\n<div>{posts}</div>\nFigure 1-5 shows the result.\nFIGURE 1-5: Rendering an array in a Svelte template.\nClearly, rendering a comma-separated list isn't what you want.\nWith a little bit of JavaScript, you could take this list and turn it\ninto three HTML elements, but there's an easier way.\nIn Svelte, you can loop over the elements in an array or object by\nusing an block. An block starts with the tag and\neach each <#each>\nends with the tag. In the starting tag, you can specify the\n</each>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:539>\n", "text": "object or array to loop over and the alias to use inside the block.\nSo, to loop over the array, you can write the following\nposts\nblock:\n{#each posts as post}\n<div>{post}</div>\n{/each}\nWith this block written, your App component should now match\nListing 1-5, and it should look like Figure 1-6 in the browser.\nLISTING 1-5: Rendering a List of Posts\n<script>\nlet posts = ['first post!','note to self','test'];\n</script>\n<main>\n<h1>Soliloquy</h1>\n<h2>Social media without the sharing</h2>\n<label>Talk to yourself: <input type=\"text\"></label>\n<button>Post it!</button>\n<div>\n{#each posts as post}\n<div>{post}</div>\n{/each}\n</div>\n</main>\n<style>\n</style>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:540>\n", "text": "FIGURE 1-6: Rendering a list of posts.\nHandling the event\nThe last thing to do in this first iteration of your microblogging\napp is to make clicking the button add an element to the array. To\ndo that, you first need get the new post from the text input when\nthe button is clicked. Follow these steps to make that happen:\n1. Add a new variable to the beginning of the\n<script>\nblock called :\nnewPost\nlet newPost = '';\n2. Bind the value of the element to the\n<input> newPost\nvariable by using Svelte's attribute:\nbind\n<input bind:value={newPost} type=\"text\"/>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:541>\n", "text": "3. Finally, add the attribute to the\non:click <button>\nelement and tell it to call a function we'll call\naddPost()\nwhen it's clicked (note that there's no need to\nspecifically pass to the function):\nnewPost\n<button on:click={addPost}>Post it!</button>\n4. Clear out the dummy elements from the posts array so\nthat you can start with a blank slate:\nlet posts = [];\nWith that chunk written, the last step is to to write the\naddPost()\nfunction.\nSvelte's reactivity isn't \"deep,\" like Vue's \u2014 if you simply push a\nnew element onto an existing array, it doesn't update the DOM.\nSo you need to update the posts array by replacing it with a new\narray. The following function will do the trick:\nfunction addPost(){\nposts = [\u2026posts,newPost];\n}\nAnd, that's all there is to it. Open the app in your browser and\nstart posting. You should see that each post you add gets added\nto the bottom of the list, as shown in Figure 1-7. You\u2019ll want to\ndeal with some styling and positioning issues, and you certainly\nneed to add functionality, but this is a pretty good start!\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:542>\n", "text": "FIGURE 1-7: The first iteration of Soliloquy: social media without the social\naspect.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:543>\n", "text": "Chapter 2\nBuilding with Components\nIN THIS CHAPTER\nMaking new components\nExploring the parts of a component\nAdding style\n\u201c\u2018Think simple,' as my old master used to say \u2014 meaning reduce\nthe whole of its parts into the simplest terms, getting back to first\nprinciples.\u201d\n\u2014FRANK LLOYD WRIGHT\nOne of the goals of Svelte is to require developers to write less\ncode, and the structure of Svelte components reflects this aim. In\nthis chapter, you'll learn how to write Svelte components, how to\nadd style to components, and how to combine components.\nWriting Lean Components\nProgrammers call the code you must write to make the code you\nwant to write work boilerplate or plumbing. Compared to React\nand Vue, Svelte components require very little plumbing. For\nexample, consider the following React class component:\nimport { Component } from 'react';\nclass ReactCounter extends Component {\nconstructor(props) {\nsuper(props);\nthis.state = { count: 0 };\n}\nrender() {\nreturn (\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:544>\n", "text": "<div>\n<p>Count: {this.state.count}</p>\n<button onClick={() => this.setState({ count: this.state.count + 1\n})}>\nIncrement\n</button>\n</div>\n);\n}\n}\nexport default ReactCounter;\nThis example of the simplest possible React Counter app written\nusing a class component contains 438 characters. Using a\nfunction component can dramatically reduce the character count,\nas in the following snippet:\nimport {useState} from 'react';\nconst ReactFunctionCounter = () => {\nconst [count, setCount] = useState(0);\nreturn (\n<div>\n<p>Count: {count}</p>\n<button onClick={() => setCount(count + 1)}>Increment</button>\n</div>\n);\n}\nexport default ReactFunctionCounter;\nThe function component cuts the character count to 272. But\nthere's still code in there that you have to write that can be\nconsidered boilerplate. Let's see how to write this same\ncomponent using Svelte, as shown in Listing 2-1.\nLISTING 2-1: A Simple Counter Component\nWritten in Svelte\n<script>\nlet count = 0;\nfunction increment() {\ncount += 1;\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:545>\n", "text": "</script>\n<p>Count: {count}</p>\n<button on:click={increment}>Increment</button>\nThe Svelte Counter weighs in at only 153 characters. If fewer\nlines of code means fewer opportunities for bugs to creep into\nyour code, Svelte is clearly the winner in helping you write better\ncode by having to write less of it.\nIdentifying What's in a\nComponent\nA Svelte component can be as simple as just some HTML code.\nFor example, the following line, when saved with a\n.svelte\nextension and used in a Svelte app, is a perfectly valid\ncomponent:\n<p>hola, bonjour, guten tag, salve, n\u0131\u02c7n ha\u02c7o, asalaam alaikum, konnichiwa,\nhello world!</p>\nThe template portion of a Svelte component is written at the top\nlevel of a file, and it can be any number of HTML\n.svelte\nelements, or even just plain text.\nOf course, a static component isn't all that interesting. To make\ncomponents that do something, you need to write some\nJavaScript.\nScripting in Svelte components\nMost of the JavaScript in a Svelte component is written in a\nelement. Generally, this element is placed at\n<script> <script>\nthe beginning of the file, before the template code.\nCode that you write in the block is mostly just plain\n<script>\nJavaScript. This code gets compiled by Svelte before you build\nyour app or run it in development mode. Because Svelte is a\ncompiler, it can add functionality and change the default behavior\nof the code you write to make writing code simpler. Svelte's\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:546>\n", "text": "block adds a few additional rules to JavaScript to enable\n<script>\nreactivity:\nThe keyword creates a prop.\nexport\nAssignments trigger reactivity.\nThe command makes a statement reactive.\n$:\nThe following sections examine each of these rules in detail.\nExporting and using props\nA prop of a component works like a parameter of a function.\nProps in Svelte are the data that an instance of a component can\nreceive when it's used by another component.\nDefining props\nTo create a prop, export a variable, function, constant, or class\nfrom a component. For example, Listing 2-2 shows a component\nthat defines a prop and uses the value passed to it.\nLISTING 2-2: Defining a Prop\n<script>\nexport let musicStyle = undefined;\n</script>\n<p>Here is some {musicStyle}.</p>\nThe value you assign to a prop when you define it is the default\nvalue. If a consumer of this class doesn't pass a prop, the default\nvalue will be used. If you don't specify a default value, the prop\nwill automatically have a value of and Svelte will output\nundefined\na warning message in the console. To get rid of this warning\nmessage, you can just initialize the exported prop with a value of\n.\nundefined\nPassing props\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:547>\n", "text": "Props in Svelte are passed using attributes. Listing 2-3 shows a\ncomponent that imports the component from Listing 2-2 and\ncreates three instances of it, passing a different value for the prop\neach time.\nLISTING 2-3: Passing a Prop\n<script>\nimport MusicPlayer from './MusicPlayer.svelte';\n</script>\n<MusicPlayer musicStyle=\"rock\"/>\n<MusicPlayer musicStyle=\"jazz\"/>\n<MusicPlayer musicStyle=\"hip hop\"/>\nYou can pass any type of data to a component using props. When\nyou pass a string, enclose it in quotes (single, double, or\nbackticks). To pass another type of data or the result of an\nexpression, enclose it in curly braces.\nListing 2-4 shows a component that exports several props, and\nListing 2-5 shows a component that uses it.\nLISTING 2-4: Defining Multiple Props\n<script>\nexport let blogTitle = \"Your title goes here.\";\nexport let blogBody = \"Your post goes here.\";\nexport let published = false;\n</script>\n<article>\n{#if published}\n<h1>{blogTitle}</h1>\n<p>{blogBody}</p>\n{:else }\n<h1>This post is not yet live</h1>\n{/if}\n</article>\nLISTING 2-5: Passing Multiple Props\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:548>\n", "text": "<script>\nimport BlogPost from './BlogPost.svelte';\n</script>\n<BlogPost\nblogTitle = \"Sandwiches are Great\"\nblogBody = \"I just had the best sandwich.\"\npublished = {true}/>\nFigure 2-1 shows the preceding components rendered in a\nbrowser.\nFIGURE 2-1: Rendering a component with props.\nTriggering reactivity with\nassignments\nA block runs only once during the life of a component\n<script>\ninstance \u2014 when it's mounted. During its run, it creates reactive\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:549>\n", "text": "variables and statements, adds event listeners, and binds events\nand data to the component instance.\nAfter the initial mounting and rendering of the component\ninstance, events may cause functions to run that change values.\nAny assignment operation that modifies a variable declared in the\ncomponent triggers rerendering.\nYou can think of the assignment operators (discussed in Chapter\n4 of Book 1) as the magic key to reactivity in Svelte.\nThe assignment operators are plus the combination\n=\nassignment operators, including , , , , and .\n+= -= *= /= %=\nRecognizing that array methods\ndon't trigger updates\nOne interesting effect of the fact that the assignment operators\ntrigger reactivity is that array methods that change an array\nwithout using the assignment operators (such as and\npop()\n) don't trigger rerendering.\npush()\nListing 2-6 demonstrates a version of the social media app you\ncreate in Chapter 1 of Book 5 that uses the method\npush()\ninstead of the assignment operator to add new posts to the posts\narray.\nLISTING 2-6: Using Array Methods Doesn't\nTrigger Rerendering\n<script>\nlet posts = [];\nlet newPost = '';\nfunction addPost(){\n//posts = [\u2026posts,newPost];\nposts.push(newPost);\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:550>\n", "text": "console.log(posts);\n}\n</script>\n<main>\n<h1>Soliloquy</h1>\n<h2>Social media without the sharing</h2>\n<label>Talk to yourself: <input bind:value={newPost} type=\"text\"></label>\n<button on:click={addPost}>Post it!</button>\n<div>\n{#each posts as post}\n<div>{post}</div>\n{/each}\n</div>\n</main>\nFigure 2-2 shows the result of running the component in Listing\n2-6 and adding a new post. Notice that the new post is added to\nthe array (as you can see in the console log message), but the\nweb browser isn't updated.\nIf you need to use an array method without using an assignment\noperator, you can trick Svelte into updating by following the use\nof the method with an assignment of the array to itself, as shown\nin Listing 2-7.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:551>\n", "text": "FIGURE 2-2: Array methods don't trigger reactivity.\nLISTING 2-7: Assign Arrays to Themselves\nto Trigger Reactivity\n<script>\nlet posts = [];\nlet newPost = '';\nfunction addPost(){\n//posts = [\u2026posts,newPost];\nposts.push(newPost);\nconsole.log(posts);\nposts = posts;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:552>\n", "text": "}\n</script>\n<main>\n<h1>Soliloquy</h1>\n<h2>Social media without the sharing</h2>\n<label>Talk to yourself: <input bind:value={newPost} type=\"text\"></label>\n<button on:click={addPost}>Post it!</button>\n<div>\n{#each posts as post}\n<div>{post}</div>\n{/each}\n</div>\n</main>\nCreating reactive statements\nBecause the block runs only once, any statements that\n<script>\naren't part of an event handler function will be run only once.\nSometimes, however, it's useful to have a reactive statement that\nupdates when the variables it uses change.\nTo create a reactive statement in Svelte, preface the statement\nwith a dollar sign followed by a colon ($:). For example, the\nfollowing statement updates whenever the value of\nnewPost\nchanges:\n$:let charactersRemaining = 34 - newPost.length;\nListing 2-8 shows how to use this reactive statement to calculate\nand display the number of additional characters the user can type\ninto an input field.\nLISTING 2-8: Using a Reactive Statement\n<script>\nlet posts = [];\nlet newPost = '';\nlet charactersLeft;\nlet charactersLeftStyle;\nlet error = '';\n$:charactersLeft = 34 - newPost.length;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:553>\n", "text": "$:if (charactersLeft < 0) {\ncharactersLeftStyle = 'color: red';\n} else {\ncharactersLeftStyle = 'color: black';\n}\nfunction addPost(){\nif (charactersLeft < 0){\nerror = 'You have exceeded the maximum number of characters.'\n} else {\nposts = [\u2026posts, newPost];\nnewPost = '';\n}\n}\n</script>\n<main>\n<h1>Soliloquy</h1>\n<h2>Social media without the sharing</h2>\n<label>Talk to yourself:\n<input bind:value={newPost} type=\"text\">\n</label>\n<span style={charactersLeftStyle}>\n{charactersLeft}\n</span>\n<p>{error}</p>\n<button on:click={addPost}>Post it!</button>\n<div>\n{#each posts as post}\n<div>{post}</div>\n{/each}\n</div>\n</main>\nFigure 2-3 shows our app in action now. The color of the word\ncount changes to red when the maximum character count is\nexceeded, and a message displays below the input whenever the\nuser attempts to submit a message that exceeds the maximum\ncount.\nUsing <script> data and functions\nFunctions and variables created in the tag are\n<script>\nautomatically available to use outside of the block. To\n<script>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:554>\n", "text": "use JavaScript defined in the block in the rest of your\n<script>\ncomponent, surround variable names or expressions with single\ncurly braces.\nFIGURE 2-3: Using a reactive statement to display an error message.\nAdding Style to a Component\nThe third section of a Svelte component is the style block. To add\nstyles to your component's output, create a element at\n<style>\nthe top level of the component and write CSS rules in it. Just as\nthe block adds some additional functionality to ordinary\n<script>\nJavaScript, the block in a component has some special\n<style>\npowers that are enabled when the component is compiled.\nThe styles you write in the block are applied only to the\n<style>\ntemplate code in that component. If you want to create a global\nstyle, you can do so by using the modifier. For example,\n:global\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:555>\n", "text": "to specify that the error class should be red for every component,\nyou can use the following style:\n<style>\n:global(.error) {\ncolor: red;\n}\n</style>\nThe global modifier can also be applied to just part of a CSS\nselector. For example, to specify that every element with the error\nclass that's used inside a defined by the current element\n<div>\nshould be red, you can use the following style:\n<style>\ndiv :global(.error) {\ncolor: red;\n}\n</style>\nWith this rule defined, you can extract the error component from\nthe microblogging app into a separate component and control its\nstyle from the component. This same error class can also be\nApp\nused within the component to style the character counter. The\nApp\ncode for Soliloquy is shown in Listing 2-9.\nLISTING 2-9: Creating a Global Style\nWithin a Scoped Style\n<script>\nimport ErrorMessage from './lib/ErrorMessage.svelte';\nlet posts = [];\nlet newPost = '';\nlet charactersLeft;\nlet charactersLeftClass;\nlet error = '';\n$: charactersLeft = 34 - newPost.length;\n$: if (charactersLeft < 0) {\ncharactersLeftClass = 'error';\n} else {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:556>\n", "text": "charactersLeftClass = '';\nerror = '';\n}\nfunction addPost() {\nif (charactersLeft < 0) {\nerror = 'You have exceeded the maximum number of characters.';\n} else {\nposts = [\u2026posts, newPost];\nnewPost = '';\n}\n}\n</script>\n<main>\n<h1>Soliloquy</h1>\n<h2>Social media without the sharing</h2>\n<div>\n<label>Talk to yourself:\n<input bind:value={newPost} type=\"text\"/>\n</label>\n<span class={charactersLeftClass}>\n{charactersLeft}\n</span>\n</div>\n<div><ErrorMessage message={error} /></div>\n<button on:click={addPost}>Post it!</button>\n<div>\n{#each posts as post}\n<div>{post}</div>\n{/each}\n</div>\n</main>\n<style>\ndiv :global(.error) {\ncolor: red;\n}\n</style>\nOur app is starting to look pretty good. Figure 2-4 shows the\nlatest version of Soliloquy.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:557>\n", "text": "FIGURE 2-4: The Soliloquy app, with character counting and an error message.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:558>\n", "text": "Chapter 3\nDesigning Templates\nIN THIS CHAPTER\nUsing elements\nCommenting your template\nRendering conditionally\nLooping\nUsing text expressions\nInserting into slots\n\u201cLanguage exerts hidden power, like the moon on the tides.\u201d\n\u2014RITA MAE BROWN\nAt first glance, Svelte template code is just HTML. When you\ninvestigate it further, however, Svelte provides a wealth of\nadditional features and functions you can use. In this chapter,\nyou'll learn the syntax and commands that help to create dynamic\nuser interfaces in Svelte.\nElements Are the Building\nBlocks\nAs in React and Vue, Svelte templates are made up of built-in and\ncustom elements that create instances of components.\nUsing the built-in elements\nThe built-in components match all of HTML's elements, and the\nattributes that are available for built-in components also match\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:559>\n", "text": "HTML's. If you know how to write valid HTML5 code, you can\nwrite a static Svelte template.\nNo adjustments necessary\nWhen Svelte compiles your components, it generates JavaScript\ncode from your HTML, but there's nothing you need to do\ndifferently when you write your code because of this. You can\neven use HTML syntax that contains words that are reserved in\nJavaScript. For example, to specify an HTML attribute, you\nclass\ncan just use a attribute in your Svelte component's\nclass\ntemplate.\nSome attributes don't require quotes\nAs in HTML, you can leave the quotes off attribute values if they\ndon't contain spaces or any of the following characters:\n\" ' ` = <\n. This may seem strange at first, and if you're uncomfortable not\n>\nenclosing attribute values in quotes, there's no benefit to leaving\nthem out except that you save yourself a little typing.\nUsing custom elements\nA file defines one component. When compiled by Svelte,\n.svelte\neach component is exported using a default export. You can\nimport components into other components and then create\ninstances of them by using the name in the import statement as\nthe name of an element.\nBy convention, Svelte components are named using\nUpperCamelCase, and they should be imported using the same\nname as the file they're saved in. Listing 3-1 shows how\n.svelte\nto import a component and create instances of it.\nLISTING 3-1: Using a Custom Element\n<script>\nimport CatPicture from './lib/CatPicture.svelte';\n</script>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:560>\n", "text": "<h1>Here are some cat pictures</h1>\n<table class=\"cat-pictures-table\">\n<tr>\n<td><CatPicture/></td>\n<td><CatPicture/></td>\n<td><CatPicture/></td>\n</tr>\n<tr>\n<td><CatPicture/></td>\n<td><CatPicture/></td>\n<td><CatPicture/></td>\n</tr>\n</table>\nDocumenting Svelte with\nComments\nTo write code comments in your template, you can use HTML\ncomments, as shown in Listing 3-2. Inside your block,\n<script>\nuse JavaScript comments. Inside the block, use CSS\n<style>\ncomments (which are the same as JavaScript block comments).\nLISTING 3-2: Commenting Your Template\n<script>\nimport ErrorMessage from './lib/ErrorMessage.svelte';\nlet posts = []; // array of posts\nlet newPost = ''; // new post text\nlet charactersLeft; // number of characters left\nlet charactersLeftClass; // class for characters left\nlet error = ''; // error message\n// reactive statement to calculate remaining characters\n$: charactersLeft = 34 - newPost.length;\n// reactive statement to set the class for the remaining characters\n$: if (charactersLeft < 0) {\ncharactersLeftClass = 'error';\n} else {\ncharactersLeftClass = ''; // clear the class\nerror = ''; // clear the error\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:561>\n", "text": "/* event handler for the form */\nfunction addPost() {\nif (charactersLeft < 0) {\nerror = 'You have exceeded the maximum number of characters.';\n} else {\nposts = [\u2026posts, newPost];\nnewPost = '';\n}\n}\n</script>\n<main>\n<h1>Soliloquy</h1>\n<h2>Anti-social media</h2>\n<!-- note: do we need a better tagline? -->\n<div>\n<label>Talk to yourself:\n<input bind:value={newPost} type=\"text\"/>\n</label>\n<!-- display characters remaining -->\n<span class={charactersLeftClass}>\n{charactersLeft}\n</span>\n</div>\n<!-- display error message -->\n<div><ErrorMessage message={error}/></div>\n<button on:click={addPost}>Post it!</button>\n<!-- display posts-->\n<div>\n{#each posts as post}\n<div>{post}</div>\n{/each}\n</div>\n</main>\n<style>\n/* Style error messages nested in this component's divs */\ndiv :global(.error) {\ncolor: red;\n}\n</style>\nChoosing a Path\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:562>\n", "text": "Svelte's , , and blocks can be used to\n{#if} {:else} {:else if}\nconditionally render template code. To use conditional blocks,\nstart with inside curly braces, followed by a condition and end\n#if\nthe conditional block with . Inside a conditional block, you\n{/if}\ncan have as many conditions as you need (or none, of\n{:else if}\ncourse) and zero or one blocks.\n{:else}\nListing 3-3 shows how to use the value of a variable to determine\nwhich elements to render.\nLISTING 3-3: Conditionally Rendering\nElements\n<script>\nlet frameworks = ['React','Vue','Svelte'];\nlet frameworkChoice = '';\n</script>\n<label for=\"framework\">Choose a framework:</label>\n<select id=\"framework\" bind:value={frameworkChoice}>\n<option value=\"\">--Please choose an option--</option>\n{#each frameworks as framework}\n<option>{framework}</option>\n{/each}\n</select>\n{#if frameworkChoice==='Svelte'}\n<p>That's a fine choice.</p>\n{:else if frameworkChoice==='React'}\n<p>That's a splendid choice.</p>\n{:else if frameworkChoice==='Vue'}\n<p>That's a great choice.</p>\n{:else}\n<p>Please choose a framework.</p>\n{/if}\nInside expressions (including expressions that set attribute\nvalues), you can use JavaScript's ternary operator or the logical\n&&\noperator to set values conditionally, as shown in Listing 3-4.\nLISTING 3-4: Conditional Rendering Inside\nin Expressions\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:563>\n", "text": "<script>\nlet themes = ['light', 'dark'];\nlet themeChoice = '';\n</script>\n<div class={themeChoice === 'dark' ? 'dark-mode' : ''}>\n<label for=\"theme\">Choose a theme:</label>\n<select id=\"theme\" bind:value={themeChoice}>\n<option value=\"\">--Please choose an option--</option>\n{#each themes as theme}\n<option>{theme}</option>\n{/each}\n</select>\n</div>\n<style>\ndiv.dark-mode {\nbackground-color: black;\ncolor: white;\n}\n</style>\nCreating Loops\nTo create loops in Svelte templates, use blocks. The\n{#each}\nblock starts with followed by an expression,\n{#each} #each\nfollowed by the keyword, followed by an alias for each item in\nas\nthe loop.\nYou can loop over arrays or any iterable \u2014 including objects that\nhave a length property and strings. Listings 3-3 and Listing 3-4\nboth show examples of using to loop over an array to\n{#each}\ncreate a list of options for a element. Listing 3-5 shows\n<select>\nhow to loop over an array of objects to create a list of links.\nLISTING 3-5: Making a List from an Array\nof Objects\n<script>\nlet frameworks = [\n{\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:564>\n", "text": "name: 'React',\ndescription: 'A JavaScript library for building user interfaces.',\nurl: 'https://reactjs.org/',\n},\n{\nname: 'Vue',\ndescription: 'The Progressive JavaScript Framework.',\nurl: 'https://vuejs.org/',\n},\n{\nname: 'Svelte',\ndescription: 'Cybernetically enhanced web apps.',\nurl: 'https://svelte.dev/',\n},\n];\n</script>\n<h1>My ever-growing resume</h1>\n<h2>JavaScript frameworks I know</h2>\n{#each frameworks as framework}\n<div>\n<h3><a href={framework.url}>{framework.name}</a></h3>\n<p>{framework.description}</p>\n</div>\n{/each}\nIf the array (or array-like structure) you're using will change, you\nshould include a unique key attribute so that Svelte can use this\nkey to apply changes to items correctly. The key expression is\nwritten in parentheses after the item alias and must be unique for\neach item in the list.\nListing 3-6 updates the component from Listing 3-5 to use a key.\nLISTING 3-6: Passing a Key Attribute\n<script>\nlet frameworks = [\n{\nid: 1,\nname: 'React',\ndescription: 'A JavaScript library for building user interfaces.',\nurl: 'https://reactjs.org/',\n},\n{\nid: 2,\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:565>\n", "text": "name: 'Vue',\ndescription: 'The Progressive JavaScript Framework.',\nurl: 'https://vuejs.org/',\n},\n{\nid: 3,\nname: 'Svelte',\ndescription: 'Cybernetically enhanced web apps.',\nurl: 'https://svelte.dev/',\n},\n];\n</script>\n<h1>My ever-growing resume</h1>\n<h2>JavaScript frameworks I know</h2>\n{#each frameworks as framework (framework.id)}\n<div>\n<h3><a href={framework.url}>{framework.name}</a></h3>\n<p>{framework.description}</p>\n</div>\n{/each}\nWriting Text Expressions\nCurly braces in the template part of a component create a text\nexpression. You can use any valid JavaScript expression inside\nthese curly braces and the result will be rendered as text. This\nalso means that any HTML that's returned by a text expression\nwill have its < and > characters escaped (along with other special\ncharacters), which may not be the effect you intend. For example,\nListing 3-7 shows a text expression that evaluates to a string\ncontaining HTML.\nLISTING 3-7: Text Expressions Escape\nHTML\n<script>\nlet error = true;\n</script>\n<div>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:566>\n", "text": "{error?\"<b>An error has occurred</b>\":''}\n</div>\nFigure 3-1 shows the result of rendering the component in Listing\n3-7.\nTo render HTML that appears inside text, you can use , as\n@html\nshown in Listing 3-8.\nFIGURE 3-1: HTML in text will be escaped.\nLISTING 3-8: Using @html to Render HTML\nin Text Expressions\n<script>\nlet error = true;\n</script>\n{#if error}\n{@html \"<b>An error has occurred.</b>\"}\n{/if}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:567>\n", "text": "Of course, Listing 3-8 can more easily be written without\nthe text expression. Using is sometimes necessary\n@html\nwhen content coming from outside, such as an input\nelement, may contain HTML that should be rendered.\nBe careful when using to inject HTML into a text\n@html\nexpression. If you don't properly clean up the code before\nrendering it, you could expose your app to a cross-site\nscripting hack (also known as XSS).\nComposing with Slots\nUntil now, all the Svelte custom components I've described have\nbeen empty elements that are configured using attributes. To\ncreate custom components that can have children, you need to\ntell the component where to render the children. In React, you\nuse to render the children of a component. In\nprops.children\nVue, you use . Slots in Svelte are modeled after slots in\n<slot>\nVue.js.\nListing 3-9 shows how to write a component that renders its\nchildren.\nLISTING 3-9: Using a Slot to Render\nChildren\n<!-- PageTitle.svelte -->\n<h1>\n<slot>\nIf you see this text, no content was provided.\n</slot>\n</h1>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:568>\n", "text": "To use a slot, write a custom element containing a slot using\nbeginning and ending tags, and use elements and content\nbetween them, as shown in Listing 3-10.\nLISTING 3-10: Passing Content to a Slot\n<script>\nimport PageTitle from './lib/PageTitle.svelte';\n</script>\n<PageTitle>How to Use Slots in Svelte</PageTitle>\nTo write a component containing multiple slots, you can give slots\nnames using the attribute of . To specify that content\nname <slot>\nshould be rendered in a named slot, wrap the content in an\nelement and give the wrapper element a slot attribute, as shown\nin Listing 3-11.\nLISTING 3-11: Targeting Content to a\nNamed Slot\n<script>\nimport BlogPost from './lib/BlogPost.svelte';\n</script>\n<BlogPost>\n<div slot=\"header\">This is the Header</div>\nHere's the body of the blog post\n<div slot=\"footer\">Copyright, All rights reserved, etc.</div>\n</BlogPost>\nListing 3-12 shows the component that's used by Listing\nBlogPost\n3-11.\nLISTING 3-12: Defining Named Slots\n<article>\n<slot name=\"header\">This will be the header text.</slot>\n<slot/>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:569>\n", "text": "<slot name=\"footer\">Copyright info here.</slot>\n</article>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:570>\n", "text": "Chapter 4\nUsing Directives\nIN THIS CHAPTER\nListening for and handling events\nForwarding events\nBinding attributes\nCreating transitions\n\u201cDreaming or awake, we perceive only events that have meaning\nto us.\u201d\n\u2014JANE ROBERTS\nDirectives are special attributes that are used by Svelte to bind\ndata, bind events, animate elements, and more. In this chapter,\nyou'll learn about directives and how to use them to make things\nhappen in your component.\nListening for Events with on:\nThe directive can be used with elements to listen for DOM\non:\nevents and to assign JavaScript functions to handle those events.\nThe basic syntax of the directive is\non:\non:eventname={handler}\nThe event name is the name of any DOM event, such as ,\nclick\n, or . The handler is the name of a function or an\nchange submit\narrow function.\nBasic event handling\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:571>\n", "text": "Any function defined at the top level of your block can\n<script>\nbe accessed using . Listing 4-1 shows an example of listening\n:on\nfor the semicolon key and displaying a message when it's\npressed.\nLISTING 4-1: Listening for a Key Event\n<script>\nfunction alertMe() {\nalert(\n\"Do not use semicolons. All they do is show you've been to college. -\nKurt Vonnegut\"\n);\n}\n</script>\n<textarea\non:keypress={(e) => {\nif (e.key === ';') {\nalertMe();\n}\n}}\n/>\nAttaching modifiers to event\nlisteners\nSvelte has several modifiers that can be passed to the\non:\ndirective to modify how the event is handled. To attach modifiers\nto event listeners, use a vertical bar ( ) after the name of the\n|\nevent. These are the available modifiers:\n: Calls before running\npreventDefault event.preventDefault()\nthe event handler\n: Calls to prevent\nstopPropagation event.stopPropagation()\nthe event from bubbling up to the parent element\n: Improves scrolling on touch devices; usually\npassive\nunnecessary because Svelte adds it for you when needed\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:572>\n", "text": ": Sets to to prevent Svelte from\nnonpassive passive false\nsetting it to\ntrue\n: Fires the event handler during event capture (as it\ncapture\npropagates down from the parent element)\n: Removes the event handler after the first time it runs\nonce\n: Triggers the event handler only if the value\nself event.target\nis the element the directive is set on\non:\n: Handles the event only if it's triggered by user action\ntrusted\nYou can use multiple modifiers by chaining them together with .\n|\nFor example, to listen for a submit event, prevent the default\naction, and run the event handler only when the event is a result\nof a user action, you can use the following <form> element and\ndirective:\non:\n<form on:submit|preventDefault|trusted = {handleSubmit}>\n// your form goes here\n</form>\nForwarding events\nSometimes it's useful to be able to handle events that happen in a\nchild element inside the parent element. To do this, you must\nforward the event from the child. To forward an event, use the\ndirective with just an event and no handler function.\n:on\nListing 4-2 shows a component containing a element\n<button>\nthat forwards its click events.\nLISTING 4-2: Forwarding Events\n// MyButton.svelte\n<script>\nexport let value = 0;\n</script>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:573>\n", "text": "<button on:click {value}>Click Me</button>\nIn the parent of a component with a forwarded event, you pass\nan event handler to be used to respond to the forwarded event,\nas shown in Listing 4-3.\nLISTING 4-3: Handling a Forwarded Event\n<script setup>\nimport MyButton from './MyButton.svelte';\nlet message = '';\nlet buttonArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nfunction handleClick(e) {\nmessage = `You clicked the ${e.target.value} button`;\n}\n</script>\n{#each buttonArray as button}\n<MyButton value={button} on:click={handleClick}/>\n{/each}\n<p>{message}</p>\nHandling multiple events\nTo handle multiple events on the same element, or to have the\nsame event be handled by different event handlers, add\nadditional directives. For example, to validate and log the\non:\nvalue of an as it changes, you could use the following\n<input>\nline:\n<input on:change = {validateInput} on:change =\n{(e)=>console.log(e.target.value)} >\nCreating Two-Way Bindings\nwith :bind\nThe directive creates a two-way bind between an attribute\n:bind\nand reactive data. Two-way bindings are most often used with\nform elements (such as , , and ).\n<input> <textarea> <select>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:574>\n", "text": "When you use a directive, it automatically creates the event\n:bind\nlistener and the event handler function needed to update data.\nListing 4-4 shows how to bind a text input field to data.\nLISTING 4-4: Binding an Input to Data\n<script>\nlet message = '';\n</script>\n<input bind:value={message}/>\n<p>{message}</p>\nAs you type into the input in the component from Listing 4-4, the\nmessage variable is updated and the paragraph below the\n<input>\ndisplays what you've typed.\nRecognizing that number inputs\ncreate numbers\nNormally in a web browser, every input element creates a string.\nEven the value of a number input will still be a string when you\nuse it, and you must specifically convert it to the number data\ntype to be able to do numeric operations with it.\nSvelte is smarter than the DOM, though, and if you specify that\nan input is either a number input or a numeric slider (created\nusing ), Svelte automatically converts it to a number\ntype=\"range\"\nfor you and updates the bound state data with the number.\nBinding select inputs\nTo bind a element, bind its attribute. If the\n<select> value\nelements between and have\n<option> <select> </select> value\nattributes, the selected option's value will be used to update the\nreactive variable. If the elements have no value\n<option>\nattributes, the content (the text between the start and end tags)\nof the will be used as the value. It's common to use\n<option>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:575>\n", "text": "with to create a list of options from an array and bind\n:bind #each\nit to reactive data, as shown in Listing 4-5.\nLISTING 4-5: Binding a Select Input\n<script>\nlet funActivities = ['swimming', 'hiking', 'skiing', 'biking', 'camping'];\nlet favoriteActivity = 'nothing';\n</script>\n<label for=\"funActivities\">Choose your favorite activity:</label>\n<select id=\"funActivities\" bind:value={favoriteActivity}>\n{#each funActivities as activity}\n<option value={activity}>{activity}</option>\n{/each}\n</select>\n<p>Your favorite activity is {favoriteActivity}.</p>\nUsing Transition Animations\nWhen elements are added and removed from the DOM, there's\nnormally very little fanfare. The element pops into existence, or it\njust disappears. Though quite utilitarian, this is rarely how things\nappear and disappear in real life, and so it creates a less-than-\nsatisfying user experience.\nCreating your first transition\nBy using the transition directive, you can cause animations to\nhappen that transition elements into the browser and out of it.\nFollow these steps to create and see a transition:\n1. Make a new file named in the\nTransitionTest.svelte lib\ndirectory inside a Svelte project.\n2. Enter the following code into your new component:\n<script>\nimport { fade } from 'svelte/transition';\nlet visible = true;\n</script>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:576>\n", "text": "<button on:click={() => (visible = !visible)}> Toggle </button>\n{#if visible}\n<div transition:fade>\n<h1>Transition Test</h1>\n<p>This is a test of the transition directive.</p>\n</div>\n{/if}\n3. Import the component into .\nTransitionTest App.svelte\n4. Use a element in .\n<TransitionTest /> App.svelte\n5. Start up the development server ( ) and go to\nnpm run dev\nyour browser to start the fun!\nIn your browser, you see a screen like the one shown in Figure 4-\n1, with a button followed by the text that the transition is applied\nto.\nFIGURE 4-1: Testing the transition directive.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:577>\n", "text": "Try clicking the button several times. You see that the content\nfades out the first time you click and then fades back in when you\nclick again. You could do this all day, but you have other\ntransitions to try out. In addition to the Fade transition, Svelte\ncontains the following transitions:\nBlur\nFly\nDraw\nSlide\nScale\nCrossfade\nThere's no way for me to demonstrate any of these transitions in\na printed book, so I trust that if you're curious about them, you\ncan try them out yourself. All you need to do to test out various\ntransitions is to import the transition you want to use and change\nthe value after the transition directive.\nPassing arguments to transitions\nSvelte's built-in transitions can take several parameters. To pass\nvalues to these transitions, specify a value for the transition and\npass an object literal that sets the values. For example, to specify\nhow long the transition lasts (in milliseconds), you can set the\nduration parameter, like this:\n<div transition:fade={{duration:2000}}>\nTo set the duration and the length of time the transition waits\nbefore it starts, you can use duration and delay, like this:\n<div transition:fade={{duration:2000,delay:1000}}>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:578>\n", "text": "If you want to learn how to use each of the transitions,\nthe best way is to go directly to the source. Look in\nand you'll see a file named\nnode_modules/svelte/transition\n. Open this file and you'll see each of the transition\nindex.ts\nfunctions, what arguments they can take, and how they do\ntheir thing.\nCreating unidirectional transitions\nTo create transitions that happen only when an element enters or\nleaves the screen, you can use the and directives. With\n:in :out\nand , you can specify only one transition, or you can have\n:in :out\ndifferent transitions for entering and leaving. For example, Listing\n4-6 uses a fade animation when the element leaves and the scale\ntransition when the element enters.\nLISTING 4-6: Using Different Transitions\nfor Entering and Leaving\n<script>\nimport { fade, scale } from 'svelte/transition';\nlet visible = true;\n</script>\n<button on:click={() => (visible = !visible)}>Toggle</button>\n{#if visible}\n<div out:fade in:scale>\n<h1>Transition Test</h1>\n<p>This is a test of the in and out directives.</p>\n</div>\n{/if}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:579>\n", "text": "Chapter 5\nUsing the Component\nLifecycle\nIN THIS CHAPTER\nListening for Svelte\u2019s lifecycle events (or just listening\nfor lifecycle events)\nOverriding Svelte\u2019s lifecycle methods\nMaking HTTP Requests with fetch()\nRunning asynchronous code\n\u201cNature is a machine. The family is a machine. The life cycle is\nlike a machine.\u201d\n\u2014RAY DALIO\nIn this chapter, I get into some of the more advanced features of\nSvelte, including using component lifecycle methods and running\nasynchronous code from within Svelte components.\nThe Svelte Lifecycle\nSvelte's lifecycle starts with mounting and ends with destroying.\nMounting\nAs with the other frameworks I've described, mounting starts with\nthe creation of an instance of the component and is complete\nwhen the component is active in the DOM. Mounting happens\nonly once in the lifecycle of a component instance.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:580>\n", "text": "Svelte provides a method called that you can use to call\nonMount()\na function when a component instance mounts. The\nonMount()\nfunction takes a callback function as its argument, and this\ncallback is run as soon as the component instance has finished\nmounting.\nIf a function is returned from , it's called when the\nonMount()\ncomponent is unmounted. This function can be used to clean up\nafter any event listeners or timers that were set when\nonMount()\nran.\nListing 5-1 shows an example of using to start a clock\nonMount()\nand returning a function from to stop the timer when\nonMount()\nthe component instance is destroyed.\nLISTING 5-1: Starting a Timer on mount\n<script>\nimport { onMount } from 'svelte';\nonMount(() => {\nlet timer = setInterval(() => {\nlet now = new Date();\nlet hours = now.getHours();\nlet minutes = now.getMinutes();\nlet seconds = now.getSeconds();\nlet ampm = hours >= 12 ? 'PM' : 'AM';\nhours = hours % 12;\nhours = hours ? hours : 12;\nhours = hours < 10 ? '0' + hours : hours;\nminutes = minutes < 10 ? '0' + minutes : minutes;\nseconds = seconds < 10 ? '0' + seconds : seconds;\nlet time = hours + ':' + minutes + ':' + seconds + ' ' + ampm;\ndocument.getElementById('time').innerHTML = time;\n}, 1000);\nreturn () => {\nclearInterval(timer);\n};\n});\n</script>\n<div id=\"time\"/>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:581>\n", "text": "The lifecycle method is a good place to handle\nonMount()\nasynchronous network requests for the initial data for your\ncomponent. Making asynchronous requests is covered later in this\nchapter.\nUsing beforeUpdate() and\nafterUpdate()\nThe lifecycle method runs immediately before a\nbeforeUpdate()\ncomponent updates due to a state change. The\nafterUpdate()\nmethod runs immediately after a component updates. Listing 5-2\nshows how to use and to log\nbeforeUpdate() afterUpdate()\nmessages to the console before and after state updates.\nLISTING 5-2: Logging Before and After\nUpdates\n<script>\nimport { beforeUpdate, afterUpdate } from 'svelte';\nlet count = 0;\nbeforeUpdate(() => {\nconsole.log(`Preparing to update\u2026`);\n});\nafterUpdate(() => {\nconsole.log(`the count is now ${count}`);\n});\n</script>\n<button on:click={() => count++}>Increment</button>\nUsing onDestroy()\nThe method runs whenever a component is about to\nonDestroy()\nbe removed from the DOM. It's typically used like React's\nmethod to clean up event listeners,\ncomponentWillUnmount()\ntimers, and subscriptions before the component goes away.\nGetting ticks\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:582>\n", "text": "The Svelte method is an asynchronous method that\ntick()\nreturns a Promise object. You can call to make sure that a\ntick()\nstate update finishes before the next line of the function runs.\nFor example, in Listing 5-3 the button increments the count. The\ncomponent also defines a reactive statement that calculates the\nsquare of the current count and then logs it.\nLISTING 5-3: Logging and Displaying the\nSquare of a Number\n<script>\nlet count = 0;\nlet square = 0;\n$: square = count * count;\nfunction increment() {\ncount += 1;\nconsole.log(square);\n}\n</script>\n<button on:click={increment}>Increment</button>\n<p>The square of {count} is {square}</p>\nBecause reactive statements are asynchronous, however, the\nvalue logged to the console is the previous value of . The\nsquare\nvalue that gets rendered in the browser is the correct one.\nFigure 5-1 shows the result, where the value of is behind\nsquare\nthe value that's rendered in the DOM.\nTo solve this problem, we can use to tell Svelte to wait for\ntick()\nthe reactive statement to finish before moving on to the next line,\nas shown in Listing 5-4.\nLISTING 5-4: Using tick() to Wait for the\nState Change to Be Applied\n<script>\nimport { tick } from 'svelte';\nlet count = 0;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:583>\n", "text": "$: square = count * count;\nfunction increment() {\ncount += 1;\ntick().then(() => {\nconsole.log('square is now', square);\n});\n}\n</script>\n<button on:click={increment}>Increment</button>\n<p>The square of {count} is {square}</p>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:584>\n", "text": "FIGURE 5-1: The console.log() method receives the old value.\nWith the addition of the value of in the console and\ntick() square\nthe value of in the browser match, as shown in Figure 5-2.\nsquare\nFIGURE 5-2: The values in the console and in the DOM match now.\nFetching Data in Svelte\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:585>\n", "text": "One way to perform asynchronous network requests with Svelte is\nto write async functions or promises in the method as\nonMount()\nyou would in React or Vue. The result can then be used to update\na stateful variable and update the DOM.\nListing 5-5 shows a component that fetches the latest price of a\nstock when it mounts and displays the price, change, and change\npercent.\nLISTING 5-5: Getting Data on Mount\n<script>\nimport { onMount } from 'svelte';\nconst API_KEY = 'YOUR_API_KEY'; //get your own at finnhub.io\nconst stockTicker = 'AAPL';\nconst endpoint = `https://finnhub.io/api/v1/quote?\nsymbol=${stockTicker}&token=${API_KEY}`;\nlet stockPrice = 0;\nlet stockPriceChange = 0;\nlet stockPriceChangePercent = 0;\nlet stockPriceChangeDirection = 'up';\nlet stockPriceChangeDirectionClass = 'stock-price-up';\nonMount(async function () {\nconst response = await fetch(endpoint);\nconst data = await response.json();\nstockPrice = data.c;\nstockPriceChange = data.d;\nstockPriceChangePercent = data.dp;\nif (stockPriceChange < 0) {\nstockPriceChangeDirection = 'down';\nstockPriceChangeDirectionClass = 'stock-price-down';\n}\n});\n</script>\n<h1>Current {stockTicker} Price</h1>\n<p class={stockPriceChangeDirectionClass}>\n{stockPrice} ({stockPriceChange}\n{stockPriceChangePercent}%)\n</p>\n<style>\n.stock-price-up {\ncolor: green;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:586>\n", "text": "}\n.stock-price-down {\ncolor: red;\n}\n</style>\nFigure 5-3 shows the result of running this component.\nIf you want to try out the component, you\nStockTicker\nneed to get a free API key from and replace the\nfinhub.io\nvalue of the constant with your own key.\nAPI_KEY\nRefreshing data\nOne problem with the component from Listing 5-5 is\nStockTicker\nthat, once it mounts, it never updates. One way to fix this\nproblem would be to place a message on the page telling the user\nto refresh the browser to see the latest price \u2014 but that's a lame\nsolution.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:587>\n", "text": "FIGURE 5-3: Mounting the StockTicker component.\nA better way would be to have a button on the page that the user\ncan press to refresh the price. This strategy would be easy\nenough to code, but it still requires the user to actually do\nsomething, and it might result in users wildly clicking the button\nand overwhelming your API with requests.\nA third option is to have a timer that automatically refreshes the\ndata every so often. To do this, we extract the stock price fetching\nlogic from the method into a separate function and\nonMount()\nthen have start a timer that will call the new function\nonMount()\nevery minute. Listing 5-6 shows the new function and\nonMount()\nthe function after this change is\ngetLatestStockPrice()\nimplemented.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:588>\n", "text": "LISTING 5-6: Automatically Refreshing the\nStock Price\nonMount(() => {\nconst timer = setInterval(() => getLatestStockPrice(), 60000);\nreturn () => {\nclearInterval(timer);\n};\n});\nasync function getLatestStockPrice() {\nconst response = await fetch(endpoint);\nconst data = await response.json();\nstockPrice = data.c;\nstockPriceChange = data.d;\nstockPriceChangePercent = data.dp;\nif (stockPriceChange < 0) {\nstockPriceChangeDirection = 'down';\nstockPriceChangeDirectionClass = 'stock-price-down';\n} else {\nstockPriceChangeDirection = 'up';\nstockPriceChangeDirectionClass = 'stock-price-up';\n}\n}\nNotice that the method returns a function that\nonMount()\ncalls . Remember that if returns a\nclearInterval() onMount()\nfunction, it's called when the component unmounts. This is\nnecessary because the method is a global\nsetInterval()\nfunction that will continue running after the component\nunmounts. Without clearing the timer, you could end up with\nthe continuing to fetch data even after the\nStockTicker\ncomponent has unmounted. As you know, this is called a\nmemory leak.\nAwaiting asynchronous requests\nAnytime you perform an asynchronous request, there's a chance\nit won't work as expected. Because of this, and because\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:589>\n", "text": "asynchronous requests may take some time before they resolve,\nit's important to keep the user informed.\nIn Svelte, you can use an block in your template to wait\n#await\nfor a Promise to resolve and display an error message if the\nPromise is rejected. Here's the syntax of an block:\nawait\n{#await promise}\n<p>loading\u2026</p>\n{:then result}\n<p>The result is {result}</p>\n{:catch error}\n<p>There has been an error: {error.message}</p>\n{/await}\nListing 5-7 shows a simplified and improved version of the\ncomponent that uses to display the status,\nStockTicker #await\nresult, and errors that are returned by a Promise.\nLISTING 5-7: Using #await\n<script>\nimport { onMount } from 'svelte';\nconst API_KEY = 'YOUR-KEY'; //get your own at finnhub.io\nconst stockTicker = 'AAPL';\nconst endpoint = `https://finnhub.io/api/v1/quote?\nsymbol=${stockTicker}&token=${API_KEY}`;\nonMount(() => {\nconst timer = setInterval(() => {\nconsole.log('updating stock price');\ngetLatestStockPrice();\n}, 10000);\nreturn () => {\nclearInterval(timer);\n};\n});\nasync function getLatestStockPrice() {\nconst response = await fetch(endpoint);\nif (response.ok) {\nconst data = await response.json();\nreturn {\nstockPrice: data.c,\nstockPriceChange: data.d,\nstockPriceChangePercent: data.dp,\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:590>\n", "text": "};\n} else {\nthrow new Error('Something went wrong');\n}\n}\n</script>\n<h1>Current {stockTicker} Price</h1>\n{#await getLatestStockPrice()}\n<p>loading\u2026</p>\n{:then data}\n<p class={data.stockPriceChange >0 ? 'stock-price-up' : 'stock-price-\ndown'}>\n{data.stockPrice} ({data.stockPriceChange}\n{data.stockPriceChangePercent}%)\n</p>\n{:catch error}\n<p>{error.message}</p>\n{/await}\n<style>\n.stock-price-up {\ncolor: green;\n}\n.stock-price-down {\ncolor: red;\n}\n</style>\nTo see the error message, set the API_KEY to an invalid value.\nThe Promise is rejected, and the component displays the text of\nthe error, as shown in Figure 5-4.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:591>\n", "text": "FIGURE 5-4: Displaying an error message when a Promise is rejected.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:592>\n", "text": "Chapter 6\nAdvanced Svelte Reactivity\nIN THIS CHAPTER\nUsing stores\nCreating context\nCreating reactive context\n\u201cContext is worth 80 IQ points.\u201d\n\u2014ALAN KAY\nPassing data down through props or firing events in child\ncomponents to change data in parent components is a\nfundamental pattern in any component-based framework.\nHowever, not all data needs to be \u2014 or should be \u2014 in the\ncomponent hierarchy. In this chapter, you'll learn how to provide\ndata to multiple components by using Svelte stores and Svelte\ncontext.\nConstructing and Stocking the\nStore\nA store in Svelte is an object with a method that\nsubscribe()\nallows components to be notified when the store's value changes.\nA store can be writable, meaning that its value can be both read\nand changed from outside the store, or readable, meaning that its\nvalue can be changed only from within.\nCreating a writable store\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:593>\n", "text": "Since they don't produce any output to the DOM, stores can be\ncreated in normal JavaScript modules. To create a writable store,\nimport the method from and then assign\nwritable() svelte/store\nthe result of calling to a variable or constant and\nwritable()\nexport it.\nThe method takes one required argument, which will\nwritable()\nbe used as the initial value of the store:\nstore = writable(value);\nListing 6-1 shows an example of creating a basic writable store.\nLISTING 6-1: Creating a Writable Store\nimport { writable } from 'svelte/store';\nexport const count = writable(0);\nOnce you have a store, you can import it into any component to\nmake use of, and update, its data. A writable store has three\nmethods:\ncreates a link between the store and the\nsubscribe()\ncomponent's data.\nsets the value of the store.\nset()\nsets the value of the store based on the current\nupdate()\nvalue.\nCreating a readable store\nA readable store is created in the same way that you create a\nwriteable store. The difference is that a readable store has only a\nmethod. Listing 6-2 shows how to create a readable\nsubscribe()\nstore.\nLISTING 6-2: Creating a Readable Store\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:594>\n", "text": "import { readable } from 'svelte/store';\nexport const store = readable(0);\nSubscribing to a store\nWhether a store is readable or writable, you can use its\nmethod to provide the latest value of the store to a\nsubscribe()\ncomponent. The method takes a callback as its\nsubscribe()\nparameter, and the latest value of the store is passed to that\ncallback.\nListing 6-3 shows how to subscribe to a store and use its value to\nupdate a local variable in a component.\nLISTING 6-3: Subscribing to a Store\n<script>\nimport { myStore } from './store.js';\nlet store;\nmyStore.subscribe((value) => {\nstore = value;\n});\n</script>\n<h1>The current store value is {store}</h1>\nUnsubscribing from a store\nSubscribing to a store creates a link between your component and\nthe store. This link isn't automatically broken when the\ncomponent is unmounted, so it's important to unsubscribe from\nstores when the component is no longer active in the DOM, to\navoid memory leaks.\nThe function returns an method. To\nsubscribe() unsubscribe()\nproperly from a store, assign the result of calling\nunsubscribe()\nto a local variable and pass that returned function to\nsubscribe()\nthe lifecycle method, as shown in Listing 6-4.\nonDestroy()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:595>\n", "text": "LISTING 6-4: Getting and Using the\nunsubscribe() Function\n<script>\nimport { onDestroy } from 'svelte';\nimport { myStore } from './store.js';\nlet storeValue;\nconst unsubscribe = myStore.subscribe((value) => {\nstoreValue = value;\n});\nonDestroy(unsubscribe);\n</script>\n<h1>The current store value is {storeValue}</h1>\nSetting and updating a store\nYou can change the value of writable stores using the and\nset()\nmethods. The method takes a new value that will\nupdate() set()\noverwrite the current value of the store:\nmyStore.set('new value');\nThe function takes a callback function that receives the\nupdate()\nlatest value of the store and returns the next value for the store.\nmyStore.update((value)=> 'new value' + value);\nListing 6-5 shows a component that uses a store to keep track of\na user's language and theme preferences.\nLISTING 6-5: Using a Store to Provide and\nUpdate Preferences\n<script>\nimport { onDestroy } from 'svelte';\nimport { userprefs } from './stores/userprefs.js';\nlet languagePref;\nlet themePref;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:596>\n", "text": "let unsubscribe = userprefs.subscribe((value) => {\nlanguagePref = value.language;\nthemePref = value.theme;\n});\nonDestroy(() => {\nunsubscribe();\n});\nfunction updatePrefs() {\nuserprefs.set({ language: languagePref, theme: themePref });\n}\n</script>\n<form on:submit|preventDefault={updatePrefs}>\n<label for=\"language\">Language</label>\n<select id=\"language\" bind:value={languagePref}>\n<option value=\"en\">English</option>\n<option value=\"fr\">French</option>\n<option value=\"de\">German</option>\n</select>\n<label for=\"theme\">Theme</label>\n<select id=\"theme\" bind:value={themePref}>\n<option value=\"light\">Light</option>\n<option value=\"dark\">Dark</option>\n</select>\n<button type=\"submit\">Update</button>\n</form>\nCurrent Preferences: {$userprefs.language}\n{$userprefs.theme}\nUsing the reactive shortcut\nSvelte is always looking for ways to reduce the amount of work\nyou need to do, and the reactive store subscription shortcut\ncertainly makes using stores easier. Rather than specifically call\nthe and methods and call the\nsubscribe() unsubscribe() set()\nand methods, you can simply import a store and use its\nupdate()\nlatest value by prefacing the name of the exported store with .\n$\nThe syntax for using store values handles the subscriptions and\n$\nunsubscriptions for you, and it also makes it possible to set the\nvalue of a store just by assigning values to it. Listing 6-6 shows\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:597>\n", "text": "how the component from Listing 6-5 can be rewritten using the\n$\nsyntax.\nLISTING 6-6: Using $ Syntax\n<script>\nimport { userprefs } from './stores/userprefs.js';\nlet languagePref = $userprefs.language;\nlet themePref = $userprefs.theme;\nfunction updatePrefs() {\n$userprefs = { language: languagePref, theme: themePref };\n}\n</script>\n<form on:submit|preventDefault={updatePrefs}>\n<label for=\"language\">Language</label>\n<select id=\"language\" bind:value={languagePref}>\n<option value=\"en\">English</option>\n<option value=\"fr\">French</option>\n<option value=\"de\">German</option>\n</select>\n<label for=\"theme\">Theme</label>\n<select id=\"theme\" bind:value={themePref}>\n<option value=\"light\">Light</option>\n<option value=\"dark\">Dark</option>\n</select>\n<button type=\"submit\">Update</button>\n</form>\nCurrent Preferences: {$userprefs.language}\n{$userprefs.theme}\nFigure 6-1 shows the component from Listing 6-6 running in a\nbrowser.\nStore starting and stopping\nfunctions\nReadable and writable stores can take a second argument, which\nis a function. This function takes the function as an\nstart() set()\nargument and returns a function. The function is\nstop() start()\ncalled when a store gets its first subscriber. The function\nstop()\ngets called when the last subscriber unsubscribes.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:598>\n", "text": "Listing 6-7 shows a store that starts a timer when the store gets\nits first subscriber and clears the timer when all subscribers have\nunsubscribed. Note that because this store only provides a timer\nto its subscribers, it can be written as a readable store.\nFIGURE 6-1: The user preferences component.\nLISTING 6-7: Using start() and stop() with\nStores\nimport { readable } from 'svelte/store';\nexport const timer = readable(null, function start(set) {\nconst interval = setInterval(() => {\nset(new Date().toLocaleTimeString());\n}, 1000);\nreturn function stop() {\nclearInterval(interval);\n};\n});\nWhen a component subscribes to the store in Listing 6-7, it\nupdates itself with the current time every second. Listing 6-8\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:599>\n", "text": "shows a component that uses this store to display a clock.\nLISTING 6-8: Displaying a Readable\nStore's Value\n<script>\nimport { timer } from './stores/timer.js';\n</script>\n<h1>The current time is: {$timer}</h1>\nThe result of running Listing 6-8 in a browser is shown in Figure\n6-2.\nFIGURE 6-2: Displaying a timer using a store.\nGetting and Setting Context\nContext in Svelte is an object containing pairs that you\nkey:value\ncan set in a component. The function for creating and setting\ncontext is . Once you've created a context object,\nsetContext()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:600>\n", "text": "you can get its value from within any of the children of the\ncomponent by using .\ngetContext()\nListing 6-9 shows a component that creates a context, and Listing\n6-10 is a component that makes use of the context.\nLISTING 6-9: Creating Context\n<script>\nimport { setContext } from 'svelte';\nimport ViewPrefs from './ViewPrefs.svelte';\nsetContext('userprefs', { language: 'en', theme: 'light' });\n</script>\n<ViewPrefs/>\nLISTING 6-10: Using getContext()\n// ViewPrefs.svelte\n<script>\nimport { getContext } from 'svelte';\n</script>\n<p>Your current preferences:</p>\n<p>Language: {getContext('userprefs').language}</p>\n<p>Theme: {getContext('userprefs').theme}</p>\nContext is not reactive by default. What this means is that the\nvalues returned by can't be used to update the\ngetContext()\nactual context. If you need to have a reactive context, you can\nget that by passing a store to , as shown in Listing\nsetContext()\n6-11.\nLISTING 6-11: Using Reactive Context\n// userprefs.js\nimport { writable } from 'svelte/store';\nexport const userprefs = writable({ language: 'en', theme: 'light' });\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:601>\n", "text": "// App.svelte\n<script>\nimport { setContext } from 'svelte';\nimport { userprefs } from './stores/userprefs.js';\nimport EditPrefs from './EditPrefs.svelte';\nsetContext('userprefs', userprefs);\n</script>\n<EditPrefs/>\n// EditPrefs.svelte\n<script>\nimport { getContext } from 'svelte';\nimport { userprefs } from './stores/userprefs.js';\nlet { language, theme } = getContext('userprefs');\nfunction updatePrefs() {\n$userprefs = { language, theme };\n}\n</script>\n<form on:submit|preventDefault={updatePrefs}>\n<label for=\"language\">Language</label>\n<select id=\"language\" bind:value={language}>\n<option value=\"en\">English</option>\n<option value=\"es\">Spanish</option>\n<option value=\"fr\">French</option>\n<option value=\"de\">German</option>\n</select>\n<label for=\"theme\">Theme</label>\n<select id=\"theme\" bind:value={theme}>\n<option value=\"light\">Light</option>\n<option value=\"dark\">Dark</option>\n</select>\n<button type=\"submit\">Update</button>\n</form>\nCurrent Preferences: {$userprefs.language}\n{$userprefs.theme}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:602>\n", "text": "Book 6\nSharpening Your Tools\nContents at a Glance\nChapter 1: Building from Scratch\nWhy You Need a Build Tool\nManaging Dependencies with npm\nWriting Your First Files\nWriting a dev Script\nMaking Modules\nChapter 2: Optimizing and Bundling\nAutomating Your Build Script\nConverting to React\nChapter 3: Testing Your JavaScript\nUsing a Linter\nDebugging in Chrome\nUnit Testing\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:603>\n", "text": "Chapter 1\nBuilding from Scratch\nIN THIS CHAPTER\nRecognizing why you need a build tool\nIntroducing npm\nRecognizing the parts of\npackage.json\nInstalling a dev server\nBuilding a script with modules\n\u201cIf you wish to make an apple pie from scratch, you must first\ninvent the universe.\u201d\n\u2014CARL SAGAN\nIf you've worked through Book 3, Book 4, and Book 5, you know\nhow to write JavaScript code using popular JavaScript\nframeworks. Until now, you've been mostly protected from the\ntools that check, compile, and open your applications in a\nbrowser. Rather than spend a lot of time configuring these tools,\nyou've been using a single tool, Vite, that wraps around and\nconfigures everything for you.\nBut, just as anyone who drives a car can benefit from knowing\nwhat goes on under the hood, a whole world of programs and\ntools wait for you \"under the hood\" of modern JavaScript\ndevelopment. Knowing how to tinker with these tools makes you\na better developer.\nIn this chapter, I start from scratch and help you dig into how an\nautomated JavaScript build tool works. By the end of this chapter,\nyou'll have built a complete JavaScript application and you'll have\nstarted building a tool that does many of the same things as Vite.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:604>\n", "text": "Why You Need a Build Tool\nJavaScript development can be done using nothing but a simple\ntext editor and a web browser. Until around 2010, this is how\nnearly all JavaScript development was done.\n\"Back in my day \u2026\"\nSince JavaScript code is compiled by the browser, and since HTML\npages can link to any number of JavaScript files, you can simply\nwrite an HTML page, such as the one in Listing 1-1, that loads all\nthe JavaScript files you need for your application.\nLISTING 1-1: A Sample HTML Page from\nthe Bad Old Days\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n\"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>Listing 1.1</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/css/redmond.css\"/>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/css/style.css\"/>\n<link rel=\"stylesheet\" type=\"text/css\"\nhref=\"/assets/css/jqueryFileTree.css\"/>\n<!--[if gte IE 7]>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/scripts/style.ie.css\"/>\n<![endif]-->\n<script type=\"text/javascript\" src=\"/assets/js/jquery.js\"></script>\n<script type=\"text/javascript\" src=\"/assets/js/jquery-ui.js\"></script>\n<script type=\"text/javascript\" src=\"/assets/js/jqueryFileTree.js\"></script>\n<script type=\"text/javascript\" src=\"/assets/js/jqminmax.js\"></script>\n<script type=\"text/javascript\" src=\"/assets/js/jquery.corner.js\"></script>\n<script type=\"text/javascript\" src=\"/assets/js/jquery.jeditable.js\"></script>\n<script type=\"text/javascript\" src=\"/assets/js/jquery.qtip.js\"></script>\n<script type=\"text/javascript\" src=\"/assets/plugins/tinymce/tiny_mce.js\">\n</script>\n<script type=\"text/javascript\" src=\"/assets/js/latitude.js\"></script>\n</head>\n<body>\n<!-- insert html (and more JavaScript) here -->\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:605>\n", "text": "</body>\n</html>\nAlthough Listing 1-1 is a fairly accurate representation of\nwhat the beginning of an HTML page looked like circa 2008,\nI've saved you from the horror of seeing HTML tags written\nin ALL CAPS, which was still considered a normal thing to do\nat the time. You're welcome.\nThe road to dependency hell\nAs websites grew more complex and JavaScript grew more\ncomplex, the problem with having an abundance of tags\n<script>\nwas that it became difficult to keep track of them all. Some of\nthese dependencies depend on specific versions of other\ndependencies, and upgrading any one of them might break\nothers. Each of these JavaScript files needs to be updated\nperiodically to apply security patches or bug fixes, and every web\npage needs to include all the scripts it needs to do its job.\nEnter package management\nA package manager is a program that helps you install, update,\nand keep track of software packages. The Linux operating system\nemployed package managers long before they were popular for\nweb application development. After Node.js was created in 2009,\nand npm in 2010, the combination of Node.js and npm became a\nnatural choice for managing front-end web development\ndependencies. Node.js is covered in depth in Book 7.\nManaging Dependencies with\nnpm\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:606>\n", "text": "Although npm was originally designed for managing dependencies\nof server-side JavaScript applications, it can be, and frequently is,\nused for client-side JavaScript development as well. With npm,\nyou can install, uninstall, upgrade, and keep track of all the\ndependencies in your application. Npm can also be used for\ncreating and running scripts that automate the running of\npackages.\nInitializing a project\nFollow these steps to set up a new client-side Node.js project:\n1. Make a new folder on your computer named\nautomated-\nand open it in VS Code.\nbuild\nIt doesn't matter where on your computer you create this\nfolder, but make sure that it's not in the same directory or\nsubdirectory of any existing projects. At this point, your new\nproject should be just an empty directory.\nIf you followed my recommendation in Chapter 1 of\nBook 1 about setting up a code folder, that would be a great\nplace to put this new project.\n2. Open the Integrated Terminal in VS Code.\n3. Enter git init into the terminal.\nThis step initializes a new Git repository in the project, and\nthis is how every new project you create from now on should\nstart.\nYou see a message that a new Git repository was created, and\nyou see a new folder named in your project directory.\n.git\nIf you don't see the directory, you can choose Code\u21d2\n.git\nPreferences\u21d2 Settings (on macOS) or File\u21d2 Preferences\u21d2 Settings\n(on Windows) and then choose Text Editor\u21d2 Files. On the Files\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:607>\n", "text": "screen, you see the Exclude setting, where you can remove\n.git\nfrom the list, if it's there.\nIf you still don't see the folder, you need to update the\n.git\nsettings on your computer. Here's how to enable the showing of\nhidden files on Windows 10:\n\u21d2\n1. Click the Start button and then choose Control Panel\nAppearance and Personalization.\n2. Choose Folder Options and then select the View tab.\n3. Under Advanced Settings, select Show Hidden Files,\nFolders, and Drives, and then click OK.\nHere's how to turn on the showing of hidden files on macOS:\n1. In Finder, click on your hard drive under Locations and\nthen open your Macintosh HD folder.\n2. Press Command+Shift+. (period) to show hidden files,\nor to hide them if they're already showing.\nThe next step in setting up the project directory is to initialize the\nproject as a Node package. Follow these steps:\n1. Enter npm init in your terminal to initialize a new Node\nproject.\nYou're asked a series of questions. You can just select all the\ndefault values at this point. After you answer all the questions,\na file is created in your project.\npackage.json\n2. Open for editing. You see a file like the one\npackage.json\nshown in Listing 1-2.\n3. Make a new file named . Inside this file, use\nREADME.md\nMarkdown syntax to give your project a title (such as\nJavaScript Build Tool from JavaScript All-in-One For Dummies\nby Chris Minnick).\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:608>\n", "text": "Markdown is covered in Book 1, Chapter 2.\nLISTING 1-2: A Starting File\npackage.json\n{\n\"name\": \"automated-build-template\",\n\"version\": \"1.0.0\",\n\"description\": \"\",\n\"main\": \"index.js\",\n\"scripts\": {\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n},\n\"author\": \"\",\n\"license\": \"ISC\"\n}\nFinally, you make your initial commit to the Git repository:\n1. Create a new file named at the root of your\n.gitignore\nproject and add the following lines to it:\nnode_modules/\n.vscode\nThe file tells Git not to add the files and directories\n.gitignore\nyou specify to the repository.\n2. Enter git add . into the terminal to stage your project,\nand then enter git commit -m 'initial commit' to commit\nyour changes.\nNow would also be a good time to create a new project on GitHub\nand use git push to upload your local repository.\nUsing Git and GitHub is covered in Book 1, Chapter 2.\nLearning the parts of package.json\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:609>\n", "text": "Look again at the file that was generated by running\npackage.json\n. A file is made up of these three main\nnpm init package.json\nparts:\nProject metadata\nNPM scripts\nProject dependencies\nA Node.js project is called a package.\nMetadata in package.json\nThe metadata includes information about your package, such as\nits name, a description, the author (you), the main file, and a\nlicense. The name, description, and author are all up to you.\nHowever, the name should stick to the rules of naming a Node.js\npackage: lowercase letters and dashes (instead of spaces).\nAdditionally, the package name should be descriptive and unique\nso as not to confuse anyone about what the package is. For\nexample, it's a bad idea to name a Node.js package .\nreact\nThe main file is the main entry point into your program. In\na Node.js project, when a package is imported using just the\npackage's name passed to the function (as in\nrequire()\n), this file is the one that's imported. If the\nrequire('http')\nmain parameter isn't set, it defaults to . In most\nindex.js\nclient-side JavaScript projects, this parameter doesn't do\nanything and you can set it to anything you like or just\nremove it.\nNpm scripts\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:610>\n", "text": "The scripts part of is a JSON object. The names of\npackage.json\nthe properties of the object become names you can use\nscripts\nwith the command (as in , which is used in\nnpm run npm run dev\nVite to start the development server). The values of the\nproperties of the scripts object are shell scripts. By default,\nhas a single script, , and its value returns an\npackage.json test\nerror.\nTry entering npm run test in your terminal now to see what the\ndefault test script does.\nSome common script names can be run without typing . For\nrun\nexample, you can just type npm test to run the test script, and if\nyou have a script named start, you can just type npm start to\nrun it.\nDependencies\nAfter you first run , your project has no dependencies. To\nnpm init\ninstall your first dependency, enter the following command into\nthe terminal:\nnpm install --save-dev http-server\nThis line installs a simple HTTP server that you use to preview the\nstatic HTML and JavaScript application I show you how to build\nshortly. After you install , you see that a new area has\nhttp-server\nbeen added to for . It looks\npackage.json devDependencies\nsomething like this (the version number is probably different in\nyour file):\n\"devDependencies\": {\n\"http-server\": \"^14.1.1\"\n}\nWhen you added to , you instructed to\n--save-dev npm install npm\nput in the object in . If\nhttp-server devDependencies package.json\nyou leave off the or use just , npm creates an\n--save-dev --save\nobject called .\ndependencies\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:611>\n", "text": "What's the difference?\nThe idea behind and is that\ndevDependencies dependencies\nare packages that are used only during\ndevDependencies\ndevelopment. This includes Packages like testing frameworks,\nmodule bundlers, code minifiers, and a development server (like\n). The dependencies block is used for packages that\nhttp-server\nwill be part of the compiled code that you deploy to a server and\nthat need to be downloaded by your end users. This includes\nfront-end JavaScript libraries (like React, Vue, and Svelte) and\nCSS libraries (like Bootstrap or Foundation).\nIn practice, it doesn't matter whether you install packages\nin or for front-end JavaScript.\ndevDependencies dependencies\nIt's just a convention for the sake of organization. The\nmodule bundler packages up everything for deployment the\nsame way. Many people just put everything in ,\ndependencies\nwhereas others prefer to stick to the convention.\nReading semver\nTake a look again at the object in\ndevDependencies package.json\n(or , depending on how you installed ).\ndependencies http-server\nThe value of the property is a string containing three\nhttp-server\nnumbers separated by periods. This is the version number of the\npackage.\nThis 3-digit numbering scheme, called semver versioning,\nprovides three sets of numbers. The first set (reading from left to\nright) is the Major version. This number changes whenever major\nchanges have been made to the API of a package.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:612>\n", "text": "Be careful when upgrading a package from one major\nversion to another, because the difference between the\nprevious version and the new one is highly likely to require\nyou to rewrite at least some of your code.\nThe second set of numbers represents Minor versions. This\nnumber changes whenever functionality has been added, but in a\nbackward-compatible way.\nThe third set of numbers represents Patch changes, which are\nbug fixes that are made in a way that's backward compatible.\nUpgrading from one patch version to another is usually not a\nproblem.\nThe symbol that precedes the semver version number indicates\nthe range of version numbers that will be installed when you run\nto install packages or when you run to\nnpm install npm update\nupdate node packages.\nA caret (^) indicates that the latest minor and patch versions\nshould be applied. If a package is updated from 3.2.1 to 3.3.0, for\nexample, packages with a caret preceding their version numbers\nwould get the new version automatically.\nA tilde (~) indicates that the package receives only new patch\nversions. For example, a package that changes from 2.0.0 to\n2.0.1 would receive the latest version when you run\nnpm install\nor , but it wouldn't receive the 2.1.0 version (unless\nnpm update\nyou manually change the version number in before\npackage.json\nrunning or ).\nnpm install npm update\nUsing the node_modules folder\nAfter you install your first package with , you have a\nnpm install\nfolder in your project. If you open that folder, you\nnode_modules\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:613>\n", "text": "see that it has several subdirectories. These are the dependencies\nof , and the package itself.\nhttp-server http-server\nThe idea of the folder is that it can be re-created at\nnode_modules\nany time by reading the instructions in the file. So\npackage.json\ntry it out: Right-click on in VS Code and choose\nnode_modules\nDelete. After the deletion is complete, enter npm install into the\nterminal. After a moment, is re-created exactly as it\nnode_modules\nwas.\nLocal-versus-global installs\nWhen you're working with Node for client-side projects, you\nnearly always install packages locally. When you install a package\nlocally, it's saved into and is available to only one\nnode_modules\nproject. With all your packages installed locally, you can check it\ninto a repository without the folder, and then\nnode_modules\nanyone else who needs to work on the package can download it\nand run and be up and running with the same\nnpm install\nproject and tools as you.\nUpdating npm\nThe lone exception to the rule that everything should be installed\nlocally is npm itself. Npm is installed globally: It's available to any\nproject on your computer (or in your user account on your\ncomputer).\nWhen you upgrade npm, you do it globally. To upgrade npm with\nnpm, enter the following line into your terminal:\nnpm update -g npm\nThe flag indicates that the package should be updated globally.\n-g\nThe result of running this command is that your computer (or\nuser account, depending on how npm is installed) is upgraded for\nevery project on your computer.\nWriting Your First Files\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:614>\n", "text": "After you have a Node package and a Git repo, the next step is to\nstart writing some code. Follow these steps to start a plain\nJavaScript application (also known as a vanilla JavaScript\napplication):\n1. Make a folder named src at the root of your project.\nIn most client-side projects, all the code you write goes into\nthe folder.\nsrc\n2. Create a new file inside and enter a basic\nindex.html src\nHTML template into it.\nIn VS Code, you can use a shortcut method to write an HTML\ntemplate. On the first line of any file with a extension,\n.html\ntype an exclamation point (!) and then press the Tab key. The\ncode in Listing 1-3 is generated for you.\n3. Create the following elements in the of\n<body>\nindex.html:\n<div id=\"map\">\n<div id=\"ball\">(*)</div>\n</div>\nLISTING 1-3: The Generated HTML Template\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>Document</title>\n</head>\n<body>\n</body>\n</html>\n4. Create a directory inside named js and make a new\nsrc\nfile inside it named index.js.\n5. Enter the code from Listing 1-4 into .\nindex.js\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:615>\n", "text": "You might recognize the script in Listing 1-4 as the\nsame script that appears in Chapter 1 of Book 1. If you have\nread Book 1, you should better understand how this code\nworks by now.\n6. Use the following script tag inside the of your\n<head>\nfile to include :\nindex.html index.js\n<script defer src=\"js/index.js\"></script>\n7. Make a folder named css inside the folder.\nsrc\n8. Make a file named index.css inside the folder.\ncss\n9. Enter the following CSS rule into :\nindex.css\n#ball {\nbackground-color: red;\nborder-radius: 50%;\nwidth: 20px;\nheight: 20px;\nposition: relative;\n}\n10. Link to the CSS file from :\nindex.html\n<link rel=\"stylesheet\" href=\"css/index.css\">\nLISTING 1-4: A JavaScript File\nconst ball = document.getElementById('ball');\ndocument.addEventListener('keydown', handleKeyPress);\nlet position = 0;\nfunction handleKeyPress(e) {\nif (e.code === 'ArrowLeft') {\nposition = position - 10;\n}\nif (e.code === 'ArrowRight') {\nposition = position + 10;\n}\nif (position < 0) {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:616>\n", "text": "position = 0;\n}\nrefresh();\n}\nfunction refresh() {\nball.style.left = position + 'px';\n}\nNow that you have a simple application, you can view it by using\na local web server and browser. In the next section, you'll learn\nhow to write an npm script to start your local development server.\nWriting a dev Script\nFollow these steps to create an npm script to start the http-server\nand open your application in a browser:\n1. Open and insert a comma after the final\npackage.json\nquotation mark of the property's value.\ntest\n2. On the new line, create a property called dev and give\nit a value (in quotes) of \"http-server src\".\n3. Save your file and then enter npm run dev into the\nterminal.\nThe server starts up, just as before.\n4. Add -o after in your dev script.\nhttp-server src\nThe command causes your default web browser to open\n-o\nand go to the server URL when the server starts.\n5. Stop your server (by pressing Ctrl+C) and start it again\n(using npm run dev).\nAt this point, your homegrown JavaScript tooling doesn't do\nanything that you couldn't do just by opening directly\nindex.html\nin a web browser. Let's change that now.\nMaking Modules\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:617>\n", "text": "Although your JavaScript application is simple at this point, it has\nthe potential to become much larger, and now is a good time to\nthink about how to break it into modules. My vision for the\nfunctionality you have so far is that it will eventually become the\ncode that controls the movement and refreshing of the screen in\na simple game. The first step in starting to realize this vision is to\nlay out the components that you think this game will need.\nRefactoring index.js\nAfter a morning of fiddling with this application, I have come up\nwith an idea that's a little more interesting. Modify your index.js\nfile to the code shown in Listing 1-5 to see the reworked and\nmodularized start of the app.\nLISTING 1-5: Breaking index.js into\nModules\nimport { moveBall } from './modules/moveBall.js';\nimport { generateMap } from './modules/generateMap.js';\nconst ball = document.getElementById('ball');\nconst map = document.getElementById('map');\nlet position = { x: 0, y: 0 };\ndocument.addEventListener('keydown',\n(e) => moveBall(e, ball, position));\ngenerateMap(map, 100);\nIn Listing 1-5, the name of the function that moves the ball is\nnow called . If this game is to be any fun, something\nmoveBall()\nmore has to happen than just pressing keys to move a ball\naround \u2014 there will need to be some point to moving the ball\naround the screen. One thought you might have is to make it be a\nmaze game. The generateMap() function is a placeholder for a\nfunction that will generate a random map of obstacles. The\nfunction simply takes a number of obstacles and a DOM element\nand places that many objects into that DOM element.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:618>\n", "text": "The moveBall() function\nThe first module I show you how to write is the\nmoveBall()\nmodule. For now, you'll be creating all your modules in a\nsubfolder of named .\nsrc modules\nAs the app grows larger, you may create more subdirectories, and\nyou'll probably change the name of because it will\nmoveBall.js\neventually contain more functions than just .\nmoveBall()\nOne important concept in programming is the idea of\navoiding premature optimization \u2014 that is, it's more\nimportant to get things working than to build the perfect app\nstructure and write the code 100% perfectly from the start.\nYou always can go back, and you will go back, to fix things\nlater.\nListing 1-6 shows the content of the file.\nmodules/moveBall.js\nLISTING 1-6: The moveBall() Function\nimport { testEdgeCollision } from './testEdgeCollision.js';\nimport { testObstacleCollision } from './testObstacleCollision.js';\nexport function moveBall(e, ball, position) {\nif (e.code === 'ArrowLeft') {\nposition.x -= 10;\n} else if (e.code === 'ArrowRight') {\nposition.x += 10;\n} else if (e.code === 'ArrowUp') {\nposition.y -= 10;\n} else if (e.code === 'ArrowDown') {\nposition.y += 10;\n}\nball.style.left = position.x + 'px';\nball.style.top = position.y + 'px';\ntestEdgeCollision();\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:619>\n", "text": "testObstacleCollision();\n}\nWhen you started writing this function, you wrote the\nfunctionality only for moving the ball around the screen. It would\nbe a good idea to check to see whether the ball is touching any\nobstacles or the edges of the screen after any move \u2014 so the\ncurrent version has two function calls, named\nand . You'll learn\ntestEdgeCollision() testObstacleCollison()\nhow to write those functions in a few minutes, but first you need\nto write the function that generates the obstacles.\nThe generateMap() function\nThe function is called once by . It should\ngenerateMap() index.js\ntake a DOM element and a number as its arguments and then\ncreate the specified number of elements at random locations\ninside the DOM element.\nListing 1-7 shows the generateMap() module, which you should\nsave in a file named in the folder.\ngenerateMap.js modules\nLISTING 1-7: The generateMap() Function\nexport function generateMap(map, numberOfObstacles) {\nfor (let i = 0; i < numberOfObstacles; i++) {\nconst obstacle = document.createElement('div');\nobstacle.classList.add('obstacle');\nobstacle.style.left = Math.floor(Math.random() * 100) + 'vw';\nobstacle.style.top = Math.floor(Math.random() * 100) + 'vh';\nmap.appendChild(obstacle);\nconsole.log(\n`Adding obstacle at ${obstacle.style.left}, ${obstacle.style.top}`\n);\n}\n}\nThis function uses a loop to complete the following actions\nfor\nthe specified number of times:\nCreate an element.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:620>\n", "text": "The method creates an element of a specified\ncreateElement()\ntype in the browser's memory. Created elements aren't\ndisplayed in the browser until you specifically add them to an\nelement in the DOM.\nAdd a with a value of to the element.\nclass obstacle\nThis class is used to style the obstacles with CSS.\nPosition the elements randomly.\nA random number between 0 and 100 is generated to set the\nposition of the element in the browser viewport. The unit\nvh\nused here is a number representing the percentage of the\nviewport. So the code , for\nobstacle.style.left = \"50vh\"\nexample, positions the obstacle element in the horizontal\nmiddle of the viewport.\nAdd the element to the DOM element referenced by\n.\nmap\nThe function adds a new child to the end of the\nappendChild()\nelement it's called on.\nLog the position of the new element.\nAdd this line for testing, just to see what happens.\nAdding style\nAfter you finish coding the generateMap() function, you can now\nadd some styling for the map and the obstacles. The key to being\nable to position elements at specific locations in the viewport is\nsetting the property of the elements to . You\nposition absolute\ncan also use to make the map take up the\nposition:absolute\nentire viewport and to prevent scrolling. Listing 1-8 shows what\nthe file looks like now.\nindex.css\nLISTING 1-8: Adding Styles\n#ball {\nbackground-color: red;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:621>\n", "text": "border-radius: 50%;\nwidth: 20px;\nheight: 20px;\nposition: relative;\n}\n#map {\nposition: absolute;\ntop: 0;\nleft: 0;\nright: 0;\nbottom: 0;\nborder: 1px solid black;\noverflow: hidden;\noverscroll-behavior: none;\n}\n.obstacle {\nbackground-color: black;\nwidth: 20px;\nheight: 20px;\nposition: absolute;\n}\nTesting for collisions\nThe last two modules you'll write to finish the maze game (for\nnow) are the tests for whether the ball is touching the walls of\nthe map or any of the obstacles. Create two new files in the\nfolder for the modules that will handle these jobs:\nmodules\nand .\ntestEdgeCollision.js testObstacleCollision.js\nListing 1-9 shows the module.\ntestEdgeCollision.js\nLISTING 1-9: Testing for Edge Collisions\nexport function testEdgeCollision() {\nconst ballRect = ball.getBoundingClientRect();\nconst mapRect = map.getBoundingClientRect();\nif (\nballRect.left < mapRect.left ||\nballRect.right > mapRect.right ||\nballRect.top < mapRect.top ||\nballRect.bottom > mapRect.bottom\n) {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:622>\n", "text": "console.log('Collision!');\n}\n}\nThe method uses a DOM method named\ntestEdgeCollision()\ngetBoundingClientRect() to create objects containing information\nabout the size of an element and its position relative to the\nviewport. By finding out the position of the ball and the position\nof the map, you can do a series of comparisons, separated by the\nlogical OR operator, to determine whether the ball is outside the\nmap element. If it is, the function just logs a message to the\nconsole.\nThe function works similarly to the\ntestObstacleCollision()\nfunction, but with an added twist: It needs\ntestEdgeCollision()\nto do it once for every obstacle.\nListing 1-10 shows the module.\ntestObstacleCollision()\nLISTING 1-10: Testing for Collisions with\nObstacles\nexport function testObstacleCollision() {\nconst ballRect = ball.getBoundingClientRect();\nconst obstacles = document.getElementsByClassName('obstacle');\nfor (let i = 0; i < obstacles.length; i++) {\nconst obstacleRect = obstacles[i].getBoundingClientRect();\nif (\nballRect.left < obstacleRect.right &&\nballRect.right > obstacleRect.left &&\nballRect.top < obstacleRect.bottom &&\nballRect.bottom > obstacleRect.top\n) {\nconsole.log('Collision!');\n}\n}\n}\nThe DOM method is the key to creating\ngetElementsByClassName()\na collection of all the obstacles. The function then loops over this\ncollection and checks to see whether the ball's position is\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:623>\n", "text": "overlapping the obstacle's position. Again, you simply log a\nmessage if it is.\nTesting it out\nAfter you have implemented the edge and obstacle testing\nfunctions, you're almost ready to test the ball game out. If you\nenter into the console, you see a blank screen in\nnpm run dev\nyour browser. If you open the console, you see this message:\nindex.js:1 Uncaught SyntaxError: Cannot use import statement outside a module\n(at index.js:1:1)\nThe problem here is that a JavaScript file that includes JavaScript\nmodules ( , in this case) isn't currently a module. But,\nindex.js\nonly a JavaScript module can load other JavaScript modules. To\nmake a module, you need to load it as a module. The\nindex.js\nway to do this with a file loaded by an HTML document is to add\nan attribute to the element. Add to the\n<script> type=\"module\"\nelement in . It should now look like this:\n<script> index.html\n<script defer type=\"module\" src=\"js/index.js\"></script>\nStop and restart your development server. You may also need to\nclear your browser's cache. You should see a screen like the one\nshown in Figure 1-1.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:624>\n", "text": "FIGURE 1-1: Version 0.0.1 of the tentatively named Ball Moving Game.\nOpen your browser console, click inside the browser window to\nmake sure it has focus, and then move the ball around by\npressing the arrow keys. If you run the ball into one of the edges\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:625>\n", "text": "of the viewport or into an obstacle, you should see a\nCollision!\nmessage in the console.\nIf you haven't committed your code to your Git repository in a\nwhile, now is a good time to do that.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:626>\n", "text": "Chapter 2\nOptimizing and Bundling\nIN THIS CHAPTER\nCreating an automated build script\nUsing a module bundler\nAdding functionality to your build tool\nMigrating a vanilla JavaScript app to ReactJS\n\u201cIf you optimize everything, you will always be unhappy.\u201d\n\u2014DONALD KNUTH\nWhether you work by yourself or as part of a team of developers,\none of the most important parts of your development\nenvironment is your automated build tool. Building an application\nis the process of optimizing and bundling your code to prepare\nthe application for deployment and use by actual people, which,\nof course, is the end goal of learning about JavaScript\nprogramming.\nIn this chapter, you find out how to put together the tools and\nscripts necessary to go from a development environment to a\nproduction environment.\nAutomating Your Build Script\nThe systems development life cycle (SDLC) is a series of phases\nused by software developers since the 1960s to build applications.\nThese are the phases of the SDLC:\nAnalysis\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:627>\n", "text": "Design\nDevelopment\nTesting\nDeployment\nMaintenance\nBecause this is a book about programming, nearly everything you\nlearn is about the development phase. For development to lead to\ntesting and then to deployment and maintenance, you need to\nperform certain steps. The number of steps required varies\ndepending on the complexity of your code, but at the very least,\nyou need a way to simulate, as closely as possible, how the app\nwill work when it's deployed. Furthermore, this process should be\nas automated and foolproof as possible so that anyone who works\non the app can preview, test, and deploy it easily. A tool that lets\nyou preview, test, and build your app is called an automated build\ntool.\nHere are a few examples of automated build tools:\nCreate React App\nVite\nRome toolchain\nJenkins\nAn automated build toolchain is a collection of several tools that\nperform various operations on your code during the various\nphases of the SDLC. These are some of the types of tools that\nmay be included in an automated build toolchain:\nStatic code analysis\nModule bundler\nTesting framework\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:628>\n", "text": "Development server\nI describe static code analysis and testing in Chapter 3.\nInstalling and using a module\nbundler\nThe component of a JavaScript build toolchain that automates the\nprocess of optimizing and combining the modules in your app for\ndeploying in the development server or for production is called a\nmodule bundler.\nThese are some of the more popular module bundlers now\navailable:\nWebpack\nESbuild\nParcel\nrollup.js\nSnowpack\nThe job of a module bundler is to load your code and convert it to\nstandard JavaScript (in the case of files containing JSX, for\nexample), combine your modules, and do post-processing to\noptimize the resulting bundle of code. A module bundler is used\nduring the development, testing, and deployment phases.\nConfiguring your dev server\nIn Chapter 1 of Book 6, I show you how to create a dev script\nthat simply starts a web server (http-server) and opens your\npage. This strategy works okay for testing your app\nindex.html\nduring development, but it requires you to stop and restart the\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:629>\n", "text": "server and clear your browser cache when you make changes to\nyour application.\nA better way to preview your app during development is to use a\ntool that can do hot reloading, where the environment in which\nyour code is running (the browser, in your case) automatically\nreceives changes and refreshes itself in response to changes you\nmake to your code.\nThe module bundler you'll use in this chapter is Webpack. You'll\nalso install webpack-dev-server, which allows you to get rid of\nhttp-server for your dev script, and webpack-cli, which gives you\nthe ability to run Webpack from the command line.\nAt the time of this writing, Webpack is the most commonly\nused module bundler. However, many people are switching to\nESbuild because it's faster (as a result of being written in the\nGo language). However, ESbuild doesn't yet have many of\nthe same features or plugins as Webpack, and it's likely to\nchange more by the time you read this chapter. If you want\nto try out ESbuild, head over to its website at\n. ESbuild and Webpack work\nhttps://esbuild.github.io\nsimilarly for basic module bundling, and you should fairly\neasily be able to switch out Webpack for ESbuild in the\nfollowing instructions.\nTo use Webpack without having to do a lot of configuration, you\nneed to do a little rearranging of your project. Follow these steps:\n1. Move and the folder out of the folder\nindex.js modules js\nin (so that is at the root of ).\nsrc index.js src\n2. Delete the (now empty) folder.\njs\n3. Create a folder named at the root of the project\npublic\nand drag your folder and your file into it.\ncss index.html\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:630>\n", "text": "Check your folder and file structure carefully at this point. It\nshould match the structure shown in Figure 2-1.\n4. Change the script tag in so that it imports\nindex.html\n, which will be the name of the compiled\nmain.js\nJavaScript file.\nAlso, because you're bundling the JavaScript, it's no longer\nnecessary to use :\ntype=\"module\"\n<script defer src=\"main.js\"></script>\nFIGURE 2-1: The reorganized project structure.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:631>\n", "text": "With the rearranging of the project's files complete, follow these\nsteps to install Webpack and rewrite your script. In\nnpm run dev\nthe process, you also create a build script:\n1. Enter the following command to install Webpack, the\nwebpack command-line interface, and webpack-dev-\nserver in your project from Chapter 1:\nnpm install webpack webpack-cli webpack-dev-server --save-dev\nIs typing npm install too much work? If so, you can\nreplace the install command with just i, as in\nnpm i webpack\nwebpack-cli webpack-dev-server --save-dev.\n2. Because you're replacing http-server with Webpack,\nuninstall http-server:\nnpm uninstall http-server\n3. Rewrite your dev script in :\npackage.json\n\"dev\": \"webpack serve --mode development --open\"\nThis script bundles your JavaScript modules and serves the\nresulting application (using the file in ).\nindex.html public\n4. Try it out!\nnpm run dev\nIf Webpack is successful, it starts up your app at\nlocalhost:8080\nand automatically opens your default browser. Plus, you now have\nhot reloading. Follow these steps to see hot reloading in action:\n1. Make sure your dev server is running.\n2. Make a change to any of the files in your or\nsrc public\ndirectory.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:632>\n", "text": "For example, edit to make the obstacles larger and\nindex.css\nchange their color:\n.obstacle {\nbackground-color: forestgreen;\nwidth: 30px;\nheight: 30px;\nposition: absolute;\n}\n3. Return to your browser.\nThe app is reloaded and the change is shown, as shown in\nFigure 2-2.\nFIGURE 2-2: That's some hot reloading you have there!\nBuilding it up\nDeployment is the phase of the software development in which\nthe source code is compiled and prepared for use. During this\nphase, your JavaScript files are bundled and optimized and\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:633>\n", "text": "written to a build directory as static files that can be published to\na web server.\nBuilding a complex JavaScript application used to be a much more\nmanual process, or one that involved the writing of custom scripts\nin a task runner application. Examples of tasks runners are Gulp\nand Grunt.\nToday, build scripts are generally written as simple npm scripts\nthat pass command-line arguments to module bundlers like\nWebpack or ESbuild. Configuration files are still sometimes\nrequired, but creating builds has become, thankfully, much\nsimpler.\nFollow these steps to set up a build script:\n1. Open the file I show you how to create in\n.gitignore\nChapter 1, and add to it the directory that\ndist\nWebpack will create:\ndist/\nBecause will contain compiled code (which can be re-\ndist\ncreated at any time by running ), there's no\nnpm run build\nneed to check it into your repository.\n2. Add the most basic build script possible to the\nscripts\nobject in :\npackage.json\n\"build\":\"webpack --mode production\"\n3. Save and try out your build script by\npackage.json\nentering the following line into the terminal:\nnpm run build\nAfter you run the build script, you see a new directory in your\nproject: . If you look in this directory, you see a single file:\ndist\n. If you open this file, you see that it contains a bundled\nmain.js\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:634>\n", "text": "and minified version of all the JavaScript from the application, as\nshown in Figure 2-3.\nFIGURE 2-3: Bundled and minified JavaScript code.\nLook closely at and you'll recognize parts of your source\nmain.js\ncode in there. Notice that any comments from the source code\nhave been removed, the variable names have all been replaced\nwith single characters, and every unnecessary space or line break\nhas been removed. The result is a much smaller file than the\noriginal files, which means that the download time for your app\nwill be shorter.\nLooking at a bundled JavaScript file is a helpful reminder\nof how important line breaks, indentation, variable names,\nand comments are for software developers.\nNever think of minification as a security measure. Bundled\nand minified files may be difficult to read, but they still\ncontain ordinary code that anyone can read. The rule about\nnever putting any sensitive data in your JavaScript code\nalways applies for code that will run in a browser.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:635>\n", "text": "Copying static assets\nBundled JavaScript isn't a complete web application \u2014 you still\nneed to copy over the HTML file and CSS files to make it work.\nYou could do this task manually, by just copying these files from\nthe public directory to the directory, but that would be a\ndist\nmanual step. What you want is a completely automated build.\nFollow these steps to include the HTML and CSS in your build:\n1. Add a new npm script to your , named\npackage.json\n\"postbuild\".\nNpm runs any script named with followed by the name of\npre\nanother script before the named script, and it runs any script\nstarting with after the named script.\npost\n2. Modify the script to copy the directory and\npostbuild css\nto after Webpack does its thing.\nindex.html dist\nBecause npm scripts are just command-line scripts, you can\nuse a standard Unix or Windows shell program to do this.\nHere's an example of what the Unix version of the script\nshould be:\n\"postbuild\":\"cp public/index.html dist/index.html && cp -R\npublic/css dist/css\"\nAnd here's a command for doing the same thing in Windows:\n\"postbuild\":\"copy public\\\\index.html dist\\\\index.html & xcopy\n/si public\\\\css dist\\\\css\"\nIf you need to change or compile your CSS\nindex.html\nin some way during the build, this simple method of copying\nassets won't work. For that, you need to install and use a\nWebpack plugin. For this application, however, simpler is\nbetter.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:636>\n", "text": "3. Enter .\nnpm run build\nAfter a moment, you see that your directory now has an\ndist\nfile, a directory, and the bundled JavaScript\nindex.html css\nfile.\n4. Open in a web browser to see your\ndist/index.html\napplication, compiled and running!\nCleaning up\nAfter you have an automated build script that compiles your code\nand moves it into the folder, you need to do one more\ndist\nimportant thing before you move on. Right now, your automated\nbuild script overwrites the files in the directory every time it\ndist\nruns. But can you be sure that the files in the folder are from\ndist\nthe latest running of the build script? It's possible for things to go\nwrong during a build operation. If you're not paying close\nattention, you might assume that the build was successful just\nbecause the files from your last successful build are still in .\n/dist\nTo prevent this kind of confusion, each build you do must start\nwith erasing the previous build. Follow these steps to create an\nnpm script to clean up before each build:\n1. Make a new npm script named .\nprebuild\n2. In the script, use the command line tool\nprebuild rm\nwith to delete the directory and all the files in\n-rf dist\nit.\nThe Unix script (for Linux, macOS, or the Linux Bash\nshell on Windows) to delete the dist directory should\nlook like this:\n\"prebuild\":\"rm -rf dist\"\nThe that appears after tells the command to remove\n-r rm rm\nfiles recursively: The directory and all files in it will be deleted.\nThe that follows is short for force. It performs the removal\nf r\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:637>\n", "text": "even if there's an error, such as when the directory doesn't\nexist.\nThe Windows shell version of the script to delete the\ndist\ndirectory should look like this:\n\"prebuild\":\"if exist dist (rmdir /sF dist)\"\n3. Test out the prebuild script by running it by itself:\nnpm run prebuild\n4. Verify that the directory has been deleted.\ndist\nIf it hasn't, check your scripts for typos. Your scripts object in\nshould now match Listing 2-1 if you're using a\npackage.json\nLinux shell or Listing 2-2 if you're using a Windows shell.\nLISTING 2-1: The scripts Object with a\nComplete Build Script (Linux or macOS)\n\"scripts\": {\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n\"dev\": \"webpack serve --mode development --open\",\n\"prebuild\": \"rm -rf dist\",\n\"build\": \"webpack --mode production\",\n\"postbuild\": \"cp public/index.html dist/index.html && cp -R public/css\ndist/css\"\n},\nLISTING 2-2: The scripts Object with a\nComplete Build Script (Windows)\n\"scripts\": {\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n\"dev\": \"webpack serve --mode development --open\",\n\"prebuild\": \"if exist dist (rmdir /s /Q dist)\",\n\"build\": \"webpack --mode production\",\n\"postbuild\": \"copy public\\\\index.html dist\\\\index.html & xcopy /si\npublic\\\\css dist\\\\css\"\n},\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:638>\n", "text": "Try running your build script now. If , the directory,\nindex.html css\nand are in the folder, move on. If not, check your\nmain.js dist\nnpm scripts and closely for typos.\nindex.html\nConverting to React\nAt the end of your bundling-and-building process of a vanilla\nJavaScript application, you wind up with a bundled and minified\nversion of the same JavaScript code you had when you started.\nNow that every browser a person is likely to use supports\nJavaScript modules, the program works the same before and after\nyou bundle it. The benefits, of course, are that the bundled\nversion downloads faster and perhaps runs faster.\nWhen you make use of front-end libraries like React, Vue, and\nSvelte, however, bundling is more than just an optimization \u2014 it's\na necessity. When your JavaScript code contains JSX or other\ntemplate code, it's the bundling process that converts this\ntemplate code into JavaScript that can run in a browser.\nTo understand how bundling works with front-end libraries\ncontaining template code, let's convert the game you wrote in\nChapter 1 to React and modify your automated build.\nConfiguring Webpack for React\n1. Make a copy of the vanilla JavaScript project you've\nbeen working on since the beginning of Chapter 1, or\ncreate a new Git branch to use in this step list.\nIf you haven't read and followed along with the steps\nin this chapter and in Book 6, Chapter 1, you can download\nthe complete source code for the vanilla JavaScript version of\nthe Ball Moving Game from this book's website.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:639>\n", "text": "2. Install Babel, the Babel loader for Webpack, and the\nBabel presets for React and JavaScript:\nnpm i @babel/core @babel/preset-env @babel/preset-react babel-\nloader --save-dev\nBabel is the package that compiles JSX code to JavaScript.\n3. Create a file named in the root of your\nwebpack.config.js\nproject.\nThis is the Webpack config file, which tells Webpack to use\nBabel to process files ending with or .\n.js .jsx\n4. Add the code from Listing 2-3 to .\nwebpack.config.js\n5. Make a file named at the root of your project.\n.babelrc\nThis is the configuration file for Babel.\n6. Add the code from Listing 2-4 to .\n.babelrc\n7. Install React and ReactDOM:\nnpm i react react-dom\n8. Run your development server to make sure it still\nworks with your vanilla JavaScript application:\nnpm run dev\nLISTING 2-3: Configuring Webpack to Use\nbabel-loader\nconst config = {\nmodule: {\nrules: [\n{\ntest: /\\.(js|jsx)$/i,\nloader: 'babel-loader',\n},\n],\n},\n};\nmodule.exports = () => {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:640>\n", "text": "return config;\n};\nLISTING 2-4: Configuring the Babel\nPresets\n{\n\"presets\": [\n[\"@babel/preset-env\"],\n[\"@babel/preset-react\"]\n]\n}\nThat's all there is to it for a basic configuration of your toolchain\nto run and build React code. If everything still works, move on to\nthe next section, where I show you how to start converting the\ngame to React.\nConverting the UI to React\n1. Update to render a root React component, as\nindex.js\nshown in Listing 2-5. Notice that you're rendering the\nroot component into the element that already\nmap\nexists in .\nindex.html\n2. Create a new file for the App component, named\n. Inside it, define the , , and\nApp.js App Map Ball\ncomponents, as shown in Listing 2-6.\nYou could define and in separate files, but because\nBall Map\nthey're used only by at this point, you should keep things\nApp\nsimple and define them in the same file. Notice that and\nMap\naren't exported, because they won't be used outside of\nBall\n.\nApp\n3. Start your dev server, if it's not already running.\nYou should now have the border around the edge of the\nbrowser window and a ball in the upper-left corner, as shown\nin Figure 2-4.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:641>\n", "text": "LISTING 2-5: Rendering the root\ncomponent\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nconst root = ReactDOM.createRoot(\ndocument.getElementById('map')\n);\nroot.render(<App/>);\nFIGURE 2-4: The first pieces are in place!\nLISTING 2-6: Creating App.js\nimport React from 'react';\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:642>\n", "text": "function App() {\nreturn (\n<Map>\n<Ball/>\n</Map>\n);\n}\nfunction Map({ children }) {\nreturn children;\n}\nfunction Ball() {\nreturn <div id=\"ball\"/>;\n}\nexport default App;\nFrom here, things get a bit more complex because you need to\nimplement the obstacles. To make that happen, make a new\ncomponent inside named , as shown in Listing 2-\nApp.js Obstacle\n7.\nLISTING 2-7: The Obstacle Component\nfunction Obstacle({ obstaclePosition }) {\nreturn <div className=\"obstacle\" style={obstaclePosition}></div>;\n}\nThis is it for the component. It just takes a\nObstacle position\nobject as a prop and uses the values from that to position an\nindividual obstacle. The component will generate one instance\nApp\nof this component for each obstacle in the window.\nCreating the map requires a number of obstacles and a randomly\ngenerated array of positions. Follow these steps to generate the\nmap:\n1. Although you may decide to make the number of\nobstacles changeable in the future, let's keep it simple\nfor now and just define it as a constant in the\nApp\ncomponent:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:643>\n", "text": "function App() {\nconst numberOfObstacles = 100;\n// rest of the App component here\n}\n2. Pass to the component:\nnumberOfObstacles Map\n<Map numberOfObstacles={numberOfObstacles}>\n<Ball/>\n</Map>\n3. Deconstruct from the props object in\nnumberOfObstacles\nthe component:\nMaps\nfunction Map({children,numberOfObstacles}){\n4. Import and at the beginning of\nuseState useEffect\n(in the same import you used for importing\nApp.js\nReact):\nimport React, {useState,useEffect} from 'react';\nTechnically, this step isn't necessary. Since you imported the\nentire React library, you could just call and\nuseState useEffect\nwith and , but no one\nReact.useState() React.useEffect()\ndoes this.\n5. Define a state variable in the component for the\nMap\narray of elements:\nObstacle\nconst [obstacles, setObstacles] = useState([]);\n6. To make the map only be generated one time, when\nthe component mounts, use in to populate\nuseEffect Map\nthe array. Do this using a function named\nobstacles\nthat's defined outside of :\ngenerateMap() useEffect()\nuseEffect(() => {\nconst map = generateMap(numberOfObstacles);\nsetObstacles(map);\n}, []);\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:644>\n", "text": "7. Create the array of obstacle positions in the\nMap\ncomponent by making a new array with the correct\nnumber of elements and populate it with random\npositions:\nconst obstaclePositions = Array(numberOfObstacles)\n.fill()\n.map(() => {\nconst x = Math.floor(Math.random() * 100) + 'vw';\nconst y = Math.floor(Math.random() * 100) + 'vh';\nreturn { left: x, top: y };\n}\n);\n8. After you define the constant, write\nobstaclePositions\nthe function that will be used in the\ngenerateMap()\nfunction:\nuseEffect\nconst generateMap = (numberOfObstacles) => {\nconst obstacles = [];\nfor (let i = 0; i < numberOfObstacles; i++) {\nobstacles[i] = (\n<Obstacle obstaclePosition={obstaclePositions[i]} key=\n{i}/>\n);\n}\nreturn obstacles;\n};\n9. In the component's statement, render the\nMap return\narray and wrap both obstacles and children\nobstacles\nwith a shorthand element ( ):\nReact.Fragment < >\nreturn (\n< >\n{obstacles}\n{children}\n</>\n);\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:645>\n", "text": "If you did everything correctly, you should see the map generated\nwhen you run the app now, as shown in Figure 2-5.\nFIGURE 2-5: The map.\nListing 2-8 shows what the file should look like now.\nApp.js\nLISTING 2-8: App.js with the Map\nRendering\nimport React, { useState, useEffect } from 'react';\nfunction App() {\nconst numberOfObstacles = 100;\nreturn (\n<Map numberOfObstacles={numberOfObstacles}>\n<Ball/>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:646>\n", "text": "</Map>\n);\n}\nfunction Map({ children, numberOfObstacles }) {\nconst [obstacles, setObstacles] = useState([]);\nuseEffect(() => {\nconst map = generateMap(numberOfObstacles);\nsetObstacles(map);\n}, []);\nconst obstaclePositions = Array(numberOfObstacles)\n.fill()\n.map(() => {\nconst x = Math.floor(Math.random() * 100) + 'vw';\nconst y = Math.floor(Math.random() * 100) + 'vh';\nreturn { left: x, top: y };\n});\nconst generateMap = (numberOfObstacles) => {\nconst obstacles = [];\nfor (let i = 0; i < numberOfObstacles; i++) {\nobstacles[i] = (\n<Obstacle obstaclePosition={obstaclePositions[i]} key={i}/>\n);\n}\nreturn obstacles;\n};\nreturn (\n<>\n{obstacles}\n{children}\n</>\n);\n}\nfunction Ball() {\nreturn <div id=\"ball\"></div>;\n}\nfunction Obstacle({ obstaclePosition }) {\nreturn <div className=\"obstacle\" style={obstaclePosition}></div>;\n}\nexport default App;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:647>\n", "text": "The next piece to implement is the functionality for moving the\nball. Follow these steps to set it up:\n1. Create a stateful variable in the component to hold\nApp\nthe current position of the ball and set the initial state\nto the upper-left corner of the screen:\nconst [position, setPosition] = useState({x:0,y:0});\n2. Pass to the component as a prop:\nposition Ball\n<Ball position={position}/>\n3. In the component, deconstruct from the\nBall position\nprops and add a attribute to the that should\nstyle <div>\nuse to set the and style properties:\nposition left top\nfunction Ball({ position }) {\nreturn (\n<div\nid=\"ball\"\nstyle={{\nleft: position.x + 'vh',\ntop: position.y + 'vh',\n}}\n></div>\n);\n}\n4. Write the function in the component:\nmoveBall() App\nconst moveBall = (e) => {\nswitch (e.key) {\ncase 'ArrowUp':\nsetPosition((prev) => {\nreturn { x: prev.x, y: prev.y - 1 };\n});\nbreak;\ncase 'ArrowDown':\nsetPosition((prev) => {\nreturn { x: prev.x, y: prev.y + 1 };\n});\nbreak;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:648>\n", "text": "case 'ArrowLeft':\nsetPosition((prev) => {\nreturn { x: prev.x - 1, y: prev.y };\n});\nbreak;\ncase 'ArrowRight':\nsetPosition((prev) => {\nreturn { x: prev.x + 1, y: prev.y };\n});\nbreak;\n}\n};\n5. Set an event listener inside to listen for\nApp keydown\nevents on the document object and call the\nmoveBall()\nfunction when they happen.\nThis should be called inside , because you want it to\nuseEffect\nhappen only once, and you return a function from 's\nuseEffect\ncallback to remove the event listener when the component\nApp\nis unmounted.\nuseEffect(() => {\ndocument.addEventListener('keydown', moveBall);\nreturn () => {\ndocument.removeEventListener('keydown', moveBall);\n};\n}, []);\nTest it out! You should now be able to press the arrow keys to\nmove the ball around the screen. The last thing to do to convert\nthis app to React is to enable the collision detection.\nDetecting collisions\nIn this section, I show you how to implement edge detection and\ncollision detection for the game and make a few improvements\nover the vanilla JavaScript version.\nYou can make a function that checks for collisions each time the\nposition of the ball changes by using the hook and\nuseEffect\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:649>\n", "text": "specifying the variable as its dependency. Follow these\nposition\nsteps:\n1. In the component, pass the function\nApp setPosition()\nto the component.\nBall\n<Ball position={position} setPosition={setPosition}/>\n2. In the component, add to the\nBall setPosition\nparameters list.\nfunction Ball({ position, setPosition }) {\n3. Copy the code from Listing 2-9 into the\nBall\ncomponent.\nLISTING 2-9: Detecting Collisions\nuseEffect(() => {\nconst ball = document.getElementById('ball');\nconst ballPosition = ball.getBoundingClientRect();\nconst obstacles = document.getElementsByClassName('obstacle');\nfor (let i = 0; i < obstacles.length; i++) {\nconst obstaclePosition = obstacles[i].getBoundingClientRect();\nif (\nballPosition.x < obstaclePosition.x + obstaclePosition.width &&\nballPosition.x + ballPosition.width > obstaclePosition.x &&\nballPosition.y < obstaclePosition.y + obstaclePosition.height &&\nballPosition.y + ballPosition.height > obstaclePosition.y\n) {\nalert('Game Over');\nsetPosition({ x: 0, y: 0 });\n}\n}\n}, [position]);\nThe code in Listing 2-9 works pretty much the same as the code\nfrom the vanilla JavaScript version. However, this version of the\nobstacle detection code makes colliding with an obstacle more\nconsequential. Now, instead of the program just logging a\nmessage to the console, it displays a alert and returns\nGame Over\nthe ball to the home position.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:650>\n", "text": "Next, you implement the edge detection and make some\nimprovements there, too:\n1. Create a new function inside the component called\nBall\nwith the code from Listing 2-10.\ndetectEdgeCollision()\nThis function checks the ball's position and compares it with\nthe width and height of the window. If the ball is outside the\nwindow's bounds, it is returned to its previous position. The\neffect is that the ball looks like it's bouncing off the edges\nwhen you try to move offscreen.\n2. Call the function from within the\ndetectEdgeCollision()\nsame hook that checks for obstacle collisions.\nuseEffect\nYou can just put this call at the beginning of the\ncallback function passed to :\nuseEffect()\ndetectEdgeCollision();\nLISTING 2-10: The detectEdgeCollision\nFunction\nfunction detectEdgeCollision() {\nconst ball = document.getElementById('ball');\nconst ballPosition = ball.getBoundingClientRect();\nif (ballPosition.x < 0) {\nsetPosition((prev) => {\nreturn { x: prev.x + 1, y: prev.y };\n});\n}\nif (ballPosition.x + ballPosition.width > window.innerWidth) {\nsetPosition((prev) => {\nreturn { x: prev.x - 1, y: prev.y };\n});\n}\nif (ballPosition.y < 0) {\nsetPosition((prev) => {\nreturn { x: prev.x, y: prev.y + 1 };\n});\n}\nif (ballPosition.y + ballPosition.height > window.innerHeight) {\nsetPosition((prev) => {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:651>\n", "text": "return { x: prev.x, y: prev.y - 1 };\n});\n}\n}\nWith all that done, the conversion of the program is complete.\nYou can, of course, make many more improvements to this\nprogram. These are some of my ideas for future improvements:\nMake the obstacles move around randomly.\nPut another object on the screen that will be the \"goal.\"\nUse CSS animation to move the ball smoothly.\nMake the game keep score.\nIf you want to play around with the code some more, it's\ncompletely free for you to do with it as you like. You can find both\nthe vanilla JavaScript version and the React version of this\nprogram in the code download for this book, or in my GitHub repo\nat . If you end\nhttps://github.com/chrisminnick/javascriptaio\nup building something with this code or improving it, send me a\nmessage on Twitter ( ) or Mastodon\n@chrisminnick\n( ) and let me know. I look forward to\n@chrisminnick@hachyderm.io\nseeing what you make.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:652>\n", "text": "Chapter 3\nTesting Your JavaScript\nIN THIS CHAPTER\nUsing ESLint\nDebugging JavaScript in Chrome\nTesting with Jest\nTesting React components\n\u201cTesting \u2014 we will never do enough of it.\u201d\n\u2014GREG LEMOND\nTesting is considered the fourth phase of the systems\ndevelopment life cycle (SDLC), but it starts much earlier in the\nprocess. In fact, testing is an important tool throughout the\nsoftware development process. You might start your journey as a\nprogrammer by doing only informal and ad hoc manual testing \u2014\nfor example, opening the application and clicking around to see\nwhether it works. Or you might put a statement in\nconsole.log\nyour code to check the value of a variable.\nAs your programming skills mature, you'll use tools that will make\nyour testing easier or even allow you to make fewer mistakes in\nthe first place.\nA professional developer must always be considering testing and\nshould make use of an automated testing framework to make\ntests repeatable. Automated testing has many benefits, from\nensuring that the new code works to testing that it doesn't break\nsomething else and even to planning how to write a piece of\nfunctionality in the first place (in the case of test-driven\ndevelopment).\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:653>\n", "text": "If you want to learn more about how writing your tests\nbefore you write your code can help you write better code,\ncheck out Kent Beck's book on the topic, Test-Driven\nDevelopment: By Example, or his videos on YouTube.\nUsing a Linter\nOne tool for testing your code as you write it is a static code\nanalyzer, also known as a linter. Linters check the syntax and,\noptionally, the coding style of your code as you write and during\nthe build process. Although a linter can't tell you whether your\ncode works the way you want it to, it can tell you whether you're\nwriting valid JavaScript syntax. If configured to do so, the linter\ncan also enforce good coding practices, like consistent\nindentation, consistent use of single and double quotes, and\nmuch more.\nThe most popular linter for use with JavaScript is a node package\ncalled ESLint. ESLint is highly configurable using configuration\nfiles as well as plugins.\nInstalling ESLint\nESLint is available as an extension for VS Code, and you may\nalready be using it without even knowing. In this section, I tell\nyou how to install ESLint into your project's automated toolchain\nso that it checks the code before compiling it.\nBecause syntax and proper style are vital, a single error found by\nESLint will (and should) cause your build to crash until you fix the\nproblem. ESLint also has warnings, which aren't as critical as\nerrors, but that will display messages in your terminal.\nFollow these steps to install and configure ESLint:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:654>\n", "text": "1. Open a terminal window in VS Code at the root of your\nReact project from Chapter 2.\n2. Install ESLint and start the configuration process by\nentering this command:\nnpm init @eslint/config\nNpm asks whether you want to install .\n@eslint/create-config\nSay yes.\nThe ESLint configuration script asks some questions about\nyour preferences. How you answer these questions is up to\nyou, and it's easy to change later.\n3. However, I recommend that you use the following\nsettings for this project:\nHow would you like to use ESLint? To check syntax and\nfind problems\nI recommend using a code formatter, like Prettier\n(which I cover in Chapter 2 of Book 1), rather than have\nESLint enforce style issues. The reason is that Prettier\nautomatically does many of the things that ESLint would\nflag as style problems, and it may even conflict with\nESLint in some cases, which would cause you to have to\ndo additional configuration unnecessarily.\nWhat type of modules does your project use? JavaScript\nmodules\nWhich framework does your project use? React\nDoes your project use TypeScript? No\nWhere does your code run? Browser\nWhat format do you want your config file to be in? JSON\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:655>\n", "text": "When all the questions are answered, ESLint asks whether you\nwant to install ESLint and the ESLint plugin for React. Say yes. It\nalso asks which package manager you want to use. Choose npm.\nIf everything goes well, you see ESLint and the ESLint plugin for\nReact in your file, and a new file named\npackage.json\nwill be in the root of your project.\n.eslintrc.json\nTake a quick glance at . Like , this is\n.eslintrc.json package.json\njust a file containing a JSON object. The object has several\nproperties, and the settings you need for using ESLint with React\nshould already be configured for you. If you want to learn more\nabout configuring ESLint, you can read the docs at\n.\nhttps://eslint.org/docs/latest\nRunning ESLint for the first time\nTo make running ESLint easy, follow these steps to create an npm\nscript:\n1. Create a new npm script in named lint that\npackage.json\nwill run ESLint on all the code in your project:\n\"lint\": \"eslint .\",\n2. Test out your new lint script:\nnpm run lint\nFigure 3-1 shows the errors I got when I ran ESLint in my project.\nFixing linting errors\nLet's deal with the simple issues first. Firstly, ESLint complains\nthat the React version isn't specified in your settings. To fix this\nproblem, you need to add a setting to your ESLint\nreact.version\nconfiguration file.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:656>\n", "text": "FIGURE 3-1: The result of running ESLint.\nOpen and add the following new property to the\n.eslintrc.json\nbeginning of the returned object:\n\"settings\": {\n\"react\": {\n\"version\": \"detect\"\n},\n},\nSetting the version to causes ESLint to do the work of\ndetect\nfinding out which version of React you're using rather than your\nhaving to remember to update the ESLint configuration file every\ntime you upgrade to the latest version of React. Check to ensure\nthat your commas and curly braces are all in the right place, and\nthen run your linting script again to confirm that this warning is\ngone.\nIf you look at the errors shown in Figure 3-1, you see that the last\none refers to the use of the module object in the Webpack\nconfiguration file. Because package configuration files run in\nNode, they typically use the CommonJS module syntax rather\nthan JavaScript modules. To tell ESLint that it's fine, you can add\nNode to the object in , like this:\nenv .eslintrc\n\"env\": {\n\"browser\": true,\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:657>\n", "text": "\"es2022\": true,\n\"node\": true\n},\nRun ESLint again, to confirm that this error is cleared.\nThe remaining errors have to do with props validation. Props\nvalidation is the process of checking to ensure that your\ncomponents that receive props receive the correct props and that\nthey have the correct data type. Props validation using\nprop-types\nhappens only during development. It has no effect on how your\napp runs, but it can help you to write better code, so it's an\nimportant tool in React development.\nThe library used to validate props is called . Follow\nprop-types\nthese steps to implement props validation into the React game I\nshow you how to create in Chapter 2 of Book 6:\n1. Install prop-types:\nnpm i prop-types --save-dev\n2. Import prop-types into :\nApp.js\nimport PropTypes from 'prop-types';\n3. Just below the import statements, add a static\nproperty named propTypes to each component that\nreceives props:\nMap.propTypes = {};\nBall.propTypes = {};\nObstacle.propTypes = {};\nA static property is one that belongs to the class (the\ncomponent in the case of React) rather than instances of the\nclass. You can add static properties to React components just\nby defining them outside of the class (or function, in this\ncase).\n4. Create a property of each object for each prop\npropTypes\nthat each component receives.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:658>\n", "text": "For example, the component receives and\nMap children\n, so you can start its object like\nnumberOfObstacles propTypes\nthis:\nMap.propTypes = {\nchildren: /** children here */,\nnumberOfObstacles: /** Obstacle count */,\n};\nThe prop-types library defines several validators. The basic\nvalidators mostly have the same names as JavaScript data\ntypes, such as , , , and . For function\nnumber string array object\nproperties, you can use the validator. For Boolean props,\nfunc\nuse .\nbool\nThere are also validators for checking to see whether\nsomething is a React element or node, and for specifying that\na certain prop is required. You can find the complete list of\nvalidators, as well as information about creating custom\nvalidators, in the prop-types documentation at\n.\nhttps://reactjs.org/docs/typechecking-with-proptypes.html\n5. Add a validator for each of the props. Here's what I\ncame up with:\nMap.propTypes = {\nchildren: PropTypes.node.isRequired,\nnumberOfObstacles: PropTypes.number.isRequired,\n};\nBall.propTypes = {\nposition: PropTypes.object.isRequired,\nsetPosition: PropTypes.func.isRequired\n};\nObstacle.propTypes = {\nobstaclePosition: PropTypes.object.isRequired,\n};\nWith props validation implemented, you should now be able to\nrun your lint npm script and see a message that there were no\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:659>\n", "text": "errors. If you're still getting linting errors, check your code\ncarefully and get them fixed before moving on.\nIf you still have the src/modules folder or the dist folder in your\nproject, these may also cause ESLint to return errors. Because\nyou no longer need the files in either of these folders, you can\ndelete them.\nIntegrating ESLint into your build script\nLinting your code should be as easy as possible, and preferably\nautomatic. Even more importantly, you should be prevented from\ncreating a build of your project if it contains linting errors. To\nintegrate ESLint into your automated build, do this in\nModify your build and dev scripts to run the lint\npackage.json:\nscript before the and scripts:\nbuild dev\n\"dev\": \"npm run lint && webpack serve --mode development --open\",\n\"build\": \"npm run lint && webpack --mode production\"\nNow when you run or , npm runs the\nnpm run dev npm run build\nlint script first. If your code contains no lint errors, the script\nproceeds with the rest of its tasks as it normally would. Try\nintroducing a typo into your code to see what happens when you\ntry to start or build your script containing an error.\nFor example, open App.js and comment out one of the\nimport\nstatements:\n// import React, { useState, useEffect } from 'react';\nNow when you try to start the project with , you\nnpm run build\nget a mess of errors, and the build halts after ESLint does its job,\nas shown in Figure 3-2.\nFix the error and try running the script again.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:660>\n", "text": "FIGURE 3-2: Linting errors halt the build process.\nExcluding files from linting\nAfter you run , you'll have a directory. If you\nnpm run build dist\ntry to run now, you'll get errors because ESLint is\nnpm run lint\ntrying to apply the same rules as it applies to your source code to\nthe bundled code. Minified code won't pass the style and syntax\nchecks, however, so you need to exclude the files in from\ndist\nchecking by ESLint.\nTo exclude files from linting, create a new file at the root of your\nproject called Add the following line to\n.eslintignore.\n.eslintignore:\ndist/*\nSave and try running your script\n.eslintignore npm run lint\nagain. The result should be that you no longer get errors for files\nin the folder.\ndist\nDebugging in Chrome\nOnce you have some code written that's syntactically correct, it's\nquite possible that it still won't be doing what you want it to do.\nThis is where the process of debugging starts.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:661>\n", "text": "Many programmers spend a lot of time looking hard at their code\nto figure out why it isn't working. This can be an effective\ntechnique, but it can be improved with tools.\nIn this section, you learn how to debug your JavaScript\napplication with Chrome Developer Tools.\nGetting started with the Sources\npanel\nThe Sources panel in the Chrome Developer Tools contains tools\nfor debugging JavaScript code. To see the Sources panel, open\nthe Chrome Developer Tools by pressing Option+Command+J (on\nmacOS) or Shift+Ctrl+J (on Windows) and then click the Sources\ntab. The Sources panel opens, as shown in Figure 3-3.\nIf you have your developer console docked to the right side of the\nbrowser, the Sources panel is arranged differently but the parts\nare all the same. My descriptions refer to the layout of the parts\nof the Sources panel as they're arranged when you have the\nconsole docked to the bottom of the browser.\nMake sure that your dev server is running, and then follow these\nsteps to learn the basics of debugging with the Sources panel:\n1. Look at the pane on the left end of the Sources panel.\nThis is where the files containing code that's currently running\nin the browser window are displayed.\n2. Expand the branch called and then click\nlocalhost:8080\non .\nmain.js\nThe compiled code for appears in the middle window.\nmain.js\nBuilding a source map\nThe compiled code is only of limited use to you for debugging. If\nthere's an error in your code, you don't need to know where that\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:662>\n", "text": "error lives in the compiled code \u2014 to fix it, you need to know\nwhere it is in the source code.\nFIGURE 3-3: The Sources panel.\nTo make in-browser debugging easier, you can tell Webpack to\ncreate a source map. A source map is a file that links the\ncompiled code to the source code so that you can view the source\ncode in the debugger, even though the browser is running\ncompiled code. Handy, right?\n1. Open and add a new property called\nwebpack.config.js\ndevtool to the top level of the object. Give it a\nconfig\nvalue of source-map:\ndevtool: 'source-map',\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:663>\n", "text": "2. Stop and restart your dev server, and then go back to\nthe Sources panel in Chrome.\n3. Select Group Files by Authored/Deployed from the\nthree dots menu on the left of the Sources panel.\nThe files in Sources are organized into the two categories.\n4. Expand the Authored file list and locate your file\nApp.js\nand click on it.\nYou see in the center of the panel the exact code you wrote,\nas shown in Figure 3-4.\nFIGURE 3-4: Viewing your source code in the Sources panel.\nEditing your code in the Sources\npanel\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:664>\n", "text": "The middle pane of the Sources panel can be used to edit the\ncode that's now running in the browser. Making changes here\ndoesn't affect your original source files, of course \u2014 it affects only\nwhat's in the current browser window.\nMaking quick changes to the code in the Sources panel is a great\nway to test out small changes or fixes to your code before you\nmake them in your code editor.\nSetting breakpoints\nYou can also use the middle pane to set breakpoints. A breakpoint\nis a place in the execution of the code where you want the code's\nexecution to pause. Follow these steps to set a breakpoint and\ninvestigate what's going on inside your program:\n1. Find the line of code in that calls the\nApp.js\nfunction when the up-arrow key is\nsetPosition()\npressed, and click the line number to the left of it.\nThe line number is highlighted in blue, and the line is added to\nthe Breakpoints list in the pane on the right, as shown in\nFigure 3-5.\nFIGURE 3-5: Setting a breakpoint.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:665>\n", "text": "2. Click inside the browser window to give it focus again,\nand then press the up-arrow key.\nExecution of the program freezes, you see a message that\nsays , and the breakpoint is highlighted.\nPaused in debugger\n3. Look under the Scope header on the right.\nThis step shows you what the values of the variables in your\nprogram are at this point in its execution.\n4. Expand the Local header under Scope and view the\nvalue of the local variables inside the callback function\nprovided to the function.\nsetPosition()\n5. Look at the bar containing icons at the top of the pane\non the right in the Sources panel.\nThese tools allow you to control the running of the program\nwhen it's paused at a breakpoint.\n6. Click the first icon, the Resume Script Execution\nbutton.\nThe program starts running normally again.\n7. Click in the window and then press the up-arrow key\nagain.\nThe program pauses again because the breakpoint is still set.\n8. Set more breakpoints by clicking on additional lines of\ncode, and then click the Resume Script Execution\nbutton to run the code again.\n9. Try clicking on the line number where you have an\nexisting breakpoint.\nThis step removes the breakpoint.\n10. Play around with the other buttons in the debugger to\nlearn what they do.\n11. When you're done, click the button that's second from\nthe right at the top of the debugger to disable all your\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:666>\n", "text": "breakpoints at once while leaving them there in case\nyou want to reactivate them again.\nUsing watch expressions\nThe Watch area in the debugger allows you to track the values of\nexpressions while your program is executing. Follow these steps\nto learn how to get started with it:\n1. Expand the Watch header.\nYou see a message saying that you have no watch\nexpressions.\n2. Click the Plus Sign (+) icon at the top of the Watch\narea.\nA blank text input box appears. You can type expressions or\nthe names of variables into this input box. However, there's an\neasier way to set Watch expressions.\n3. Enable your breakpoints if they're disabled, and then\ntake action in your browser to trigger one of the\nbreakpoints.\n4. Look in the Scope area of the debugger and right-click\none of the functions or variables there.\n5. Right-click and choose Add Property Path to Watch\nfrom the menu.\nA new watch expression is created, as shown in Figure 3-6.\n6. Try out different tasks in the browser and observe your\nwatch expression to see how its value or the values of\nits properties change.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:667>\n", "text": "FIGURE 3-6: Setting a watch expression.\nUnit Testing\nUnit testing is a type of testing where you test individual\ncomponents of your code, such as functions. Unit testing is the\nmost common type of automated testing that a programmer\ndoes.\nOther kinds of testing happen mostly later in the software\ndevelopment process. For example:\nIntegration testing is the testing of groups of modules.\nSystem testing, which includes end-to-end testing, tests an\nentire system. For example, a JavaScript application typically\nworks with a database, a server, and other components, which\nmay include load balancing and (of course) users.\nEnd-to-end testing tests the entire system in as close to a\nreal-life scenario as possible.\nAcceptance testing is a type of testing where the client or\ncustomers test the application with real-life business cases.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:668>\n", "text": "In this book, I focus on describing unit testing and integration\ntesting using a test automation framework. The job of a test\nautomation framework is to provide tools and a language that you\ncan use to write tests. Each test checks a certain aspect of your\nprogram or system and reports the result as Pass or Fail.\nAs you develop your application, you create numerous tests,\nwhich you can run at any time and integrate into your automated\nbuild tool. Having these tests is not just good for checking that\nyour code works as expected \u2014 it's also a great way to create\ndocumentation for your code.\nOne test automation framework is called Jest. Originally created\nby Facebook for testing React components, Jest has become a\npopular framework for testing any JavaScript code.\nInstalling and configuring Jest\nFollow these steps to install Jest:\n1. Install Jest into your project:\nnpm install jest --save-dev\n2. Modify the test script in to run Jest:\npackage.json\n\"test\": \"jest\",\n3. Run to see what Jest does by default:\nnpm test\nYou see a message like the one shown in Figure 3-7.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:669>\n", "text": "FIGURE 3-7: Look, ma \u2014 no configuration!\nAs you can see from the response to running Jest without\nconfiguration, it automatically looks for files in your project that\nmatch a pattern and ignores everything in .\nnode_modules\nAt this point, of course, you haven't written any tests, so there's\nnothing for Jest to do except count the JavaScript files in the\nproject and tell you that it didn't find any tests.\nTo create a file that will be parsed by Jest, you can do any of the\nfollowing:\nPut your test files in a folder named .\n__tests__\nMake a file that ends with .\n.test.js\nMake a file that ends with .\n.spec.js\nFor small projects, most React developers use the\nnaming and keep the files in the same folder as the\n.test.js\ncomponents they test.\nWriting your first test\nFollow these steps to learn how to write Jest tests for vanilla\nJavaScript.\n1. Make a new file in your folder named .\nsrc dogAgeCalc.js\n2. Inside this new file, write a simple function for\ncalculating how old a dog is in human years, as shown\nin Listing 3-1.\n3. Make a new file in named dogAgeCalc.test.js.\nsrc\n4. Enter the code in Listing 3-2 into .\ndogAgeCalc.test.js\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:670>\n", "text": "LISTING 3-1: Calculating a Dog's Age in\nHuman Years\nexport function dogToHumanAge(dogAge) {\nconst dogHumanAge = dogAge * 7;\nreturn dogHumanAge;\n}\nLISTING 3-2: Testing the Dog-Age\nCalculator\nimport { dogToHumanAge } from './dogAgeCalc';\ndescribe('Dog age calculator', function () {\nit('should return 7 when given 1', () => {\nconst result = dogToHumanAge(1);\nexpect(result).toBe(7);\n});\n});\nAt this point, you'll likely see that the names of the ,\ndescribe()\n, and functions are underlined in red. If you hover\ntest() expect()\nthe cursor over them, you see a tooltip that tells you that\n, and are .\ndescribe test expect undefined\nThis message comes from ESLint. The problem is that you haven't\nyet told ESLint about Jest. To correct this, open\neslintrc.json\nand add as another property in the object. At this\n\"jest\" env\npoint, your object in should look like this:\nenv .eslintrc\n\"env\": {\n\"browser\": true,\n\"es2022\": true,\n\"node\": true,\n\"jest\": true\n},\nWith added to the object, return to your file\njest env .test.js\nand the red underlines will be gone. Now that the test has been\nwritten, try running again. If you don't have any\nnpm test\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:671>\n", "text": "mistakes in your code, you should see something like the result\nshown in Figure 3-8.\nFIGURE 3-8: A successful test.\nNow that you've written your first successful test, let's look briefly\nat how Jest works and the language of testing.\nLearning how Jest works\nWriting tests with Jest involves these three parts:\nTest suites\nSpecs\nExpectations\nTest suites\nA test suite is a collection of tests that test a unit of functionality.\nIn Jest, test suites are created using the function. The\ndescribe()\nfunction takes two parameters: a suite name and a\ndescribe()\nsuite implementation.\nThe suite name can be any string you like, and its purpose is to\ndescribe what the suite is designed to test.\nThe suite implementation is a function that contains the logic you\nuse to test the code.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:672>\n", "text": "Test specs\nTest specs are individual tests that are written inside a suite. You\ncan use as many specs inside a suite as you like. Test specs are\ndefined using either the function or the function.\ntest() it()\nThough the two are identical, most people choose one and stick\nwith it for all their tests.\nWhether you pick or depends on how you\nit() test()\nchoose to write your spec descriptions. Using can lead\nit()\nto making tests more easily readable to people.\nThe and functions take two parameters: the spec\ntest() it()\nname (or description) and the spec implementation. The spec\nname should be a string that describes what the single test is\ntesting. The implementation is a function that contains the logic\nthat's used to test one individual aspect.\nExpectations\nAn expectation (which is also known as an assertion) is a\nstatement that returns a Boolean value by comparing a value\nproduced by the code that's being tested to a value that you\nexpect the result to be.\nExpectations are created using the function and a\nexpect()\nmatcher function. Jest contains a number of matcher functions\nthat compare the actual return value with the expected value in\ndifferent ways.\nThese are some of the most commonly used built-in matchers:\ntoEqual()\ntoBeGreaterThan()\ntoBeLessThan()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:673>\n", "text": "toBeNull()\ntoBeUndefined()\ntoBeTruthy()\ntoBeFalsy()\ntoMatch()\ntoBe()\nYou can find a complete list of Jest's built-in matchers at\n.\nhttps://jestjs.io/docs/expect\nWriting better code through\ntesting\nWriting tests is a useful way to expose problems in your code and\nmake your programs better. Follow these steps to implement a\ntest that fails and then fix your code:\n1. Write a new test that checks to see whether the\nfunction correctly handles non-numeric\ndogToHumanAge()\ndata types that are passed to it. Add the following spec\nto your test suite:\nit('handles invalid input', () => {\nconst result = dogToHumanAge('a');\nexpect(result).toBe('Invalid input');\n});\n2. Run your tests.\nThe new test fails, as shown in Figure 3-9.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:674>\n", "text": "FIGURE 3-9: Running a test that fails.\n3. Open and write the code to make the test\ndogAgeCalc.js\npass. Something like this snippet should do the trick:\nexport function dogToHumanAge(dogAge) {\nif (typeof dogAge !== 'number') {\nreturn 'Invalid input';\n}\nconst dogHumanAge = dogAge * 7;\nreturn dogHumanAge;\n}\n4. Run your tests again to verify that the problem is\nsolved.\nUsing testing-library\nTesting front-end frameworks (such as React, Vue, and Svelte)\ncan be done using just the built-in methods provided by Jest.\nHowever, you can use certain tools to make testing components\neasier.\nIn this section, I describe how to install and use a testing library\nto test React components. The library I use is called React Testing\nLibrary, but the methods I show you can also be used with Svelte\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:675>\n", "text": "and Vue as well as with many other front-end frameworks by\ninstalling the version of Testing Library for the framework you're\nusing.\nThe first thing to do is to install React Testing Library:\nnpm i @testing-library/react --save-dev\nTo find out how to use React Testing Library with other\nframeworks, visit .\nhttps://testing-library.com/docs\nThe idea behind React Testing Library is that it focuses on making\nit possible for you to test the rendered output of components\nrather than the details of how that output is created. When you\ntest a component with React Testing Library, you make assertions\nabout values in a object, which contains the returned\nscreen\nHTML from the component.\nFollow these steps to write a test using React Testing Library:\n1. Make a new file named .\nMap.test.js\nI want to create a test that checks to see whether the Map\ncomponent generates and renders the correct number of\nobstacles.\n2. Import React:\nimport React from 'react';\n3. Import and from React Testing\nrender() screen()\nLibrary:\nimport {render, screen} from '@testing-library/react';\nThe method renders the component using an in-\nrender()\nmemory web browser called js-dom. Because js-dom has no\nuser interface, it's also known as a headless browser.\n4. Install js-dom:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:676>\n", "text": "npm install jest-environment-jsdom --save-dev\n5. Tell jest to use js-dom by inserting the following block\nat the beginning of :\nMap.test.js\n/**\n* @jest-environment jsdom\n*/\n6. Import the component:\nMap\nimport {Map} from './App';\n7. In , add the keyword before the\nApp.js export Map\nfunction so that the import from Step 6 will work.\n8. Use the method to define a test suite that tests\nit()\nwhether creates the correct number of obstacles,\nMap\nas shown in Listing 3-3:\nWhen you run this test, it fails because finds\ngetAllByTestId()\nno matches.\n9. Add a attribute to the component:\ndata-testid Obstacle\nfunction Obstacle({ obstaclePosition }) {\nreturn (\n<div\nclassName=\"obstacle\"\ndata-testid=\"obstacle\"\nstyle={obstaclePosition}\n></div>\n);\n}\nThe matcher function looks for the value you\ngetAllByTestId()\npass to it in a attribute of an element.\ndata-testid\n10. Run your tests again. They should all pass, as shown in\nFigure 3-10.\nYou may get see a prop type validation warning because this\ntest doesn't pass a Ball component to Map. However, that's\nnothing to worry about.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:677>\n", "text": "LISTING 3-3 Testing the Map component.\nit('renders the correct number of obstacles', () => {\nrender(<Map numberOfObstacles={10}/>);\nconst obstacles = screen.getAllByTestId('obstacle');\nexpect(obstacles.length).toBe(10);\n});\nFIGURE 3-10: Your first React test passes!\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:678>\n", "text": "Book 7\nNode.js\nContents at a Glance\nChapter 1: Node.js Fundamentals\nLearning What Makes Node.js Tick\nLearning the Parts of Node.js\nIntroducing the Node.js Core Modules\nRecognizing What Node.js Is Good For\nWorking with Node.js\nUsing REPL\nMaking and Using Node.js Modules\nGetting Data to Node Modules\nNode's Callback Pattern\nChapter 2: Streaming\nJumping into Streams\nCreating Readable Streams\nCreating Writable Streams\nProducing Duplex Streams\nTransforming Streams\nChaining Streams\nChapter 3: Working with Buffers\nKnowing Your Buffer Basics\nDecoding Buffers\nCreating Buffers\nUsing Other Buffer Methods\nIterating over Buffers\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:679>\n", "text": "Chapter 4: Accessing the File System\nImporting the fs module\nReading Files\nWriting Files\nUsing Paths\nGetting File and Directory Information\nChapter 5: Networking with Node\nA Note about Security\nMaking a Web Server\nChapter 6: Using Events\nIntroducing EventEmitter\nUnderstanding and Using maxListeners\nRemoving Listeners\nEmitting Once\nChapter 7: Error Handling and Debugging\nKnowing the Types of Errors\nUnderstanding Node.js's Error Object\nExceptions versus Errors\nHandling Exceptions\nDebugging Node.js Programs\nChapter 8: Accessing Databases\nGetting Started with MongoDB\nStarting MongoDB\nUsing Mongosh\nUsing MongoDB from Node.js\nChapter 9: Riding on the Express Train\nInstalling Express\nServer-Side Routing with Express\nUsing Express Middleware\nAnalyzing a Complete Express Server\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:680>\n", "text": "Serving a View\nUsing the Express Application Generator\nChapter 10: Registration and Authentication\nMaking and Configuring the Directory\nAdding the App and Server Modules\nMaking Some Basic Routes\nTesting Your Routes\nMaking a Schema with Mongoose\nImplementing User Registration\nHandling Authentication\nGenerating and Using Tokens\nFinishing the Login Route\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:681>\n", "text": "Chapter 1\nNode.js Fundamentals\nIN THIS CHAPTER\nUnderstanding Node.js\nUsing Node.js from the Command Line with REPL\nMaking modules\nReading environment variables\nAccepting arguments\nRunning Node.js programs\nInvoking the callback pattern\n\u201cComplexity that works is built up out of modules that work\nperfectly, layered one over the other.\u201d\n\u2014KEVIN KELLY\nBrowsers aren't the only places where JavaScript code can run. In\nBook 7, you learn about Node.js, which makes it possible for you\nto run JavaScript on web servers, in your local development\nenvironment, on single-board computers like the Raspberry Pi,\nand more.\nIn this chapter, I describe what Node.js is, explain how it works,\nand tell you what makes it so useful. I also spell out the basics of\ninteracting with Node.js and running Node.js programs.\nLearning What Makes Node.js\nTick\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:682>\n", "text": "Node.js is open-source software for running JavaScript outside of\nweb browsers. Created by Ryan Dahl in 2009, it quickly became\ntremendously popular. Today, Node.js is used on many of the\nworld's largest websites and by nearly every JavaScript\nprogrammer. It attracts a giant community of developers: The\nnpm registry (where developers can make their work available to\nbe downloaded and used by other developers) now lists over 1\nmillion Node.js packages.\nAs a front-end developer (which you are now, if you've read\nBooks 1\u20136), learning Node.js places you into the rarified \u2014 and\npotentially lucrative \u2014 position of being a full-stack developer,\nwhich is a programmer who works on front-end apps as well as\nback-end apps. Even if you're interested only in developing user\ninterfaces, knowing how Node.js works can make you a better\nfront-end developer.\nNode.js is not a programming\nlanguage\nEvery bit of code you write for Node.js is JavaScript code. Node.js\ncontains no special syntax of its own. It does, however, have\nsome conventions and best practices that all Node.js developers\nfollow. You need to learn the standard Node.js conventions and a\nbit more about servers to be able to program for Node.js. Other\nthan that, if you know JavaScript, you can know Node.js.\nNode.js is not a framework\nYou might often hear programmers who aren't familiar with\nNode.js talk about the differences between Node.js and tools like\nASP.net or Spring. Although ASP.net, Spring, and Node.js are all\ntools that can be used in the creation of server-side web\napplications, the similarities between them stop there. ASP.net\nand Spring are frameworks \u2014 collections of prebuilt code libraries\nfor creating web applications. Node.js is a platform for server-side\nJavaScript applications, in the same way that a browser is a\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:683>\n", "text": "platform for client-side JavaScript applications. Comparing a\nplatform with a framework is like comparing a road to a car.\nNode.js is a runtime environment\nLike any programming language, or any language at all, really,\nJavaScript is nothing but a syntax. Just as human languages must\nbe in a readable format or spoken to be useful, programming\nlanguages must be compiled and run in a runtime environment.\nWeb browsers are runtime environments,\ntoo\nIn Book 2, I tell you about one runtime environment for\nJavaScript: the web browser. What makes JavaScript so useful in\nweb browsers is that the web browser contains APIs for\ninteracting with networking, storage, your computer's hardware,\nand more.\nHowever, for safety and security reasons, there are things that\nJavaScript running in a web browser can't do. For example, a web\nbrowser can't read and write to databases on your computer; it\ncan't create, change, or delete files on your computer; and it can't\nrespond to HTTP requests from other web browsers. Instead,\nJavaScript in a browser runs in a protected environment that's\nsometimes referred to as a sandbox.\nThe browser's sandbox is a safe place where the browser can\ncreate its own little world involving cached files, cookies, and local\nstorage. Though the browser can also access the device hardware\noutside the sandbox, it must specifically ask for permission from\nthe user (which is why you see alerts from websites asking for\npermission to access your location or camera or to send you\nnotifications). When you're using a web application running in a\nbrowser, you're acting as its parent.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:684>\n", "text": "Because web browsers are client applications that access\nremote computers that they know nothing about (strangers!),\nit's beneficial that browsers run JavaScript in a sandbox or\nelse we'd all be getting our hard drives erased or filled up\nwith spam all the time.\nNode.js lets JavaScript out of the sandbox\nNode.js runs JavaScript directly in a computer's operating system,\nnot in a sandbox. As a result, Node.js has full access to the\noperating system and to anything that any other installed\nprogram can access. Node.js programs can access the hard drive,\nmake network requests, accept requests from the outside world,\nrun other programs on your computer, and access hardware\ndevices connected to the computer where they run. If a browser\nis like a sandbox, Node.js is like a house, and the programs you\nwrite to run in Node.js are fully grown adults.\nWhy developers need Node.js\nClients aren't useful much without servers. The way the web\nworks is that clients (web browsers) request data from servers\nand send data to servers. The software on the server that listens\nfor HTTP requests is called an HTTP server. HTTP servers may be\nable to access databases, read and write files, make requests to\nother servers, and even control your home thermostat, security\ncamera, or toaster, as shown in Figure 1-1.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:685>\n", "text": "FIGURE 1-1: Unfortunately, Toasteroid never advanced past being a Kickstarter\nproject.\nJust as JavaScript interacts with your web browser, web servers\ninteract with databases and toasters using APIs.\nBefore 2009, nearly all server-side software was written using\nlanguages other than JavaScript. What that meant is that if you\nwere a JavaScript programmer who wanted to work on client-side\napplications as well as on server-side applications, you had to\nknow and program in JavaScript on the client and in a separate\nlanguage (such as Perl, PHP, Python, Ruby, or Java) for the server.\nLearning the Parts of Node.js\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:686>\n", "text": "Node.js is made up of several parts and several areas of\nfunctionality. In terms of the software components that make up\nNode.js, these are the most important parts:\nV8: This is the same JavaScript engine that's used by Google's\nChrome browser.\nlibuv: The libuv library provides support for asynchronous\ninput and output (such as file and network operations) using\nthe underlying operating system Node.js is running on.\nNode.js bindings: The bindings are methods that translate\nbetween JavaScript that can run in the V8 engine and the\nfunctions of libuv, which are written in C.\nAPIs: Also known as the NodeJS standard library, the APIs are\nJavaScript interfaces that allow your programs to interact with\nthe outside world.\nFigure 1-2 shows a diagram of how these parts, and a few others,\nfit together.\n\u00a9 John Wiley & Sons, Inc.\nFIGURE 1-2: Illustrating the parts of Node.js.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:687>\n", "text": "The V8 engine\nThe JavaScript engine at the core of Node.js is the same one that\nparses and runs JavaScript code in Chrome. As a result of using\nthe V8 engine, Node.js benefits from the constant innovations and\nimprovements that are being made to V8 to make browsers faster.\nUsing V8 also means that Node.js can use all the same features of\nJavaScript that the latest version of Google Chrome can use.\nThe V8 JavaScript engine is covered in Chapter 1 of Book\n2.\nlibuv\nJavaScript uses events and callback functions to trigger\nasynchronous operations such as file operations, network\nrequests, and database operations. The job of libuv is to handle\nthese asynchronous operations in a cross-platform way, which\nmakes it possible for Node.js to run the same way on macOS,\nWindows, Linux, and other operating systems.\nThe main function of libuv, the event loop, is covered in\nChapter 10 of Book 1.\nNode.js bindings\nThe Node.js bindings translate between code written in JavaScript\n(namely, the NodeJS APIs) and programs written in C or C++. For\nexample, V8 by itself doesn't know how to access databases.\nHowever, libraries do exist for working with databases, though\nthey're typically written in the native language of the operating\nsystem. As a result, a binding is necessary to bridge the\ncommunication gap.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:688>\n", "text": "The Node.js standard library\nThe Node.js standard library is a set of modules built into Node.js,\nwhich are known as the core modules.Figure 1-3 shows the\nnames of the Node.js core modules. In the following section, I\nintroduce a few of the Node.js core modules, and then I follow up\nin the rest of this book with detailed information about some of\nthe most important ones.\n\u00a9 John Wiley & Sons, Inc.\nFIGURE 1-3: The Node.js core modules.\nIntroducing the Node.js Core\nModules\nThe core modules are compiled files that live in the folder\nlib\ninside your global Node.js installation. Most Node.js programs\nmake use of at least one of the core modules, which are installed\nas part of every Node.js installation.\nCore modules can be imported using CommonJS or ECMAScript\nmodule syntax. These are the most important built-in modules to\nbe aware of as you're starting to learn Node.js:\nhttp creates an HTTP server.\nstream provides tools for creating event-based classes for\nmanaging data.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:689>\n", "text": "assert contains functions for making assertions for testing.\nfs handles file system operations.\npath deals with file paths.\nprocess provides information about the current Node.js\nprocess.\nos provides information about the operating system running\nNode.js.\nquerystring contains utilities for working with URL query\nstrings.\nurl includes utilities for working with URLs.\nListing 1-1 shows how to import and use the os module using\nCommonJS.\nLISTING 1-1: Importing and Using a Core\nModule\nconst os = require('os');\nconsole.log('Host: ' + os.hostname());\nconsole.log('OS: ' + os.type());\nconsole.log('OS Version: ' + os.release());\nconsole.log('Total Memory: ' + os.totalmem() + ' bytes');\nconsole.log('Free Memory: ' + os.freemem() + ' bytes');\nIn this example, the os module is imported and made available as\nan object named . The various methods made available by the\nos\nos module can then be used to print information about the\ncurrent operating system to the console.\nYou can run the program in Listing 1-1 by saving it in a file named\n(for example) and then entering node\nListing0101.js\nListing0101 into the terminal.\nListing 1-2 shows how to import and use both the fs and http\nmodules using ECMAScript module syntax and how to serve a file\nin response to a request.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:690>\n", "text": "LISTING 1-2: Importing a Core Module\nUsing ECMAScript Modules\nimport * as fs from 'node:fs';\nimport * as http from 'node:http';\nhttp.createServer((req, res) => {\nfs.readFile('importantInfo.html', function (err, data) {\nres.writeHead(200, {'Content-Type': 'text/html'});\nres.write(data);\nres.end();\n});\n}).listen(8080);\nTo run the program in Listing 1-2, save it in a file, make sure\nthere's a file named in the same directory as\nimportantInfo.html\nthe program file, and enter node Listing0102.mjs into your\nterminal.\nRecognizing What Node.js Is\nGood For\nNode.js's ability to handle many operations quickly is legendary. A\nserver running in Node.js can handle thousands of concurrent\nrequests per second. In fact, Node.js powers the back end of\nmany of the largest websites, including, Netflix, PayPal, LinkedIn,\nWalmart, and GoDaddy. If it's good enough for them, you can be\ncertain that it's good enough for you.\nWhy is Node.js so fast?\nIn Chapter 10 of Book 1, I tell you that JavaScript is single-\nthreaded and that it uses an event loop to spawn asynchronous\nprocesses and to respond to messages. Other languages, such as\nJava, are multithreaded. They gain more power by running tasks\nin parallel.\nAlthough it would seem that having only one thread would put\nJavaScript at a disadvantage, being single-threaded turns out to\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:691>\n", "text": "be ideal for servers. This is because most of what a server does is\nasynchronous \u2014 including network operations, file operations,\nand database operations.\nIn Node.js, asynchronous operations are always non-blocking.\nWhat this means is that, as far as Node.js is concerned, making a\ncomplex database request is no more difficult than running any\nother statement. The event loop hands off the asynchronous task\nto the operating system's native API and sends the results back to\nyour JavaScript program when it's complete. What makes Node.js\nso fast is that it doesn't wait. This is called non-blocking.\nYou can think of non-blocking code in the following way:\nWhenever you order a meal at a restaurant, the server takes your\norder and relays it to the kitchen. Once the order is delivered to\nthe kitchen, the server doesn't wait for your order to be filled so\nthat they can bring it to you \u2014 they run off and take other orders\nand deliver those to the kitchen. When your order is ready, the\nserver picks it up and delivers it to you.\nA blocking restaurant, in which the server must wait for each\norder to be completed before taking another one, would be\nextremely inefficient. The only way to make it more efficient\nwould be to have multiple servers, which would be much more\nexpensive.\nWhat is Node.js not good at?\nNode.js is not a good fit for certain types of tasks. In particular,\nNode.js is not a good choice for tasks that are computationally\nintensive. This is because tasks that aren't asynchronous, such as\nperforming math operations, block Node.js.\nTo use the restaurant analogy from the preceding section: If a\nserver in the non-blocking restaurant is also required to wash the\ndishes by hand (a task that can't be done asynchronously), the\nefficiency of the system goes out the window. The server would\nspend all their time between orders washing dishes and then\nthey'd be less available to take orders.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:692>\n", "text": "Working with Node.js\nAlthough Node.js was originally designed to run on web servers, it\nhas also found a home in running tools used by software\ndevelopers. If you do any modern JavaScript development, you're\nmost likely making use of Node.js all the time.\nIn this book, however, I focus on showing you how to write\nserver-side applications with Node.js.\nWriting a Node.js program\nJust like JavaScript programs you create to run in web browsers,\nyou can write a program to run in Node.js using nothing but a\ntext editor. However, code editors such as VS Code will make your\njob much easier.\nFollow these steps to write your own web server with Node.js:\n1. Create a new file in VS Code, named server.js.\n2. Enter the code from Listing 1-3 into the file and save\nit.\n3. Open a terminal window and start the server by\nrunning the following command:\nnode server\n4. Go to in your web browser.\nhttp://localhost:3000\nYou see the text in your browser, as shown in\nHello World!\nFigure 1-4.\n5. When you're done checking out your server, press\nCtrl+C in the terminal to stop the server.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:693>\n", "text": "FIGURE 1-4: Running a simple Node.js web server.\nLISTING 1-3: Your First Node.js Web\nServer\nconst http = require('http');\nconst server = http.createServer(function (req, res) {\nres.writeHead(200, { 'Content-Type': 'text/plain' });\nres.end('Hello World!');\n});\nserver.listen(3000);\nconsole.log('Server running at http://localhost:3000/');\nMonitoring your script\nNode.js doesn't watch your files for changes. What this means is\nthat if you make changes to your server while it's running, those\nchanges won't show up in the currently running process. To see\nyour changes, you need to stop the server and restart it.\nHaving to continually stop and restart your program to see your\nchanges would be irritating, however. To solve this problem, you\ncan use the Node.js package called nodemon, which wraps\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:694>\n", "text": "around your program in Node.js and automatically restarts it\nwhen you change files in your Node application.\nFollow these steps to get started with using nodemon:\n1. Install nodemon globally by entering the following\ncommand into the terminal:\nnpm install -g nodemon\nIf the permissions on your computer aren't configured\ncorrectly, or if you don't have administrative access to your\ncomputer, you may get an error when you try to install a\npackage globally. This is most common on macOS and Linux.\nShould this happen to you, preface the command\nnpm install\nwith . The command asks you for a password (the\nsudo sudo\nsame password you log in to your computer with) and allows\nthe global installation to proceed.\n2. Once you've installed nodemon globally, you can run\nany Node.js program by using instead of .\nnodemon node\nFor example, enter the following command to start up\nthe simple Node.js server from Listing 1-3:\nnodemon server\nIf nodemon doesn't work after you install it globally,\nyou may have to close and reopen the terminal window or\nopen a new terminal window.\n3. With your program running in nodemon, try changing\nthe text that it returns from to .\nHello World! Hello Node!\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:695>\n", "text": "On Windows, you may get an error in the terminal\nsaying that nodemon can't be run because running scripts is\ndisabled. If you search for the exact error message that you\nget on Google, you'll find an article that will tell you how to\nsolve the problem.\nWhen you refresh your browser window, you should now see\nthe new text.\nRunning a code on the command\nline\nThe one essential tool for interacting with Node.js is a command-\nline interface. On macOS, this is known as Terminal. On Windows,\nit's or another terminal application. On Linux, it's the\nCMD.exe\nterminal.\nVSCode has an integrated terminal window that gives you access\nto an underlying command-line interface on your computer. I used\nthis integrated terminal in earlier parts of this book, and I'll\ncontinue to use it in this one.\nIn a web browser, you run a JavaScript program by opening it in a\nweb browser. In Node.js, you run JavaScript from the command\nline. As you saw in the previous section, to run the program in\nNode.js, you type or followed by the name of the\nnode nodemon\nprogram you want to run.\nSince Node.js runs only JavaScript programs, it\nautomatically infers that the file extension of your program is\n. Because of this, typing the extension when running\n.js .js\na Node.js program is optional.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:696>\n", "text": "Using REPL\nThe command-line interface can be used to manage Node.js\npackages and run Node.js applications. It can also be used to\ngain direct access to Node.js for writing and running simple\nJavaScript code within Node.js. The interface where you can run\ncode directly within Node.js without making files and modules is\ncalled REPL.\nREPL stands for read-evaluate-print loop. REPL is the Node.js\nequivalent to the JavaScript console in a browser. Just as the\nbrowser console gives you access to the objects created by the\nbrowser (such as the window object and the navigator object),\nREPL gives you access to the global objects created by Node.\nTo access REPL, enter node into a terminal window. You see a\nwelcome message and a REPL prompt like the one shown in\nFigure 1-5.\nPlaying with the Node.js REPL\nAfter you're in REPL, try running some JavaScript and calling\nsome Node.js functions. Follow these steps:\n1. Start by entering a simple JavaScript expression, like\nthis:\n45+34\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:697>\n", "text": "FIGURE 1-5: Starting REPL.\nNode.js returns the result of the expression. There's nothing\ntoo interesting about that, of course.\n2. You can also call functions from within REPL \u2014 for\nexample, try entering the following statement:\nconsole.log('Hello REPL');\nJust as the browser's window object has a console object\ncontaining a method, Node.js has a global console\nlog()\nobject containing a number of methods that can be useful for\ndebugging your programs, including these:\noutputs a standard debug message to the\nconsole.log()\nconsole.\noutputs an error to the console.\nconsole.error()\nis an alias for .\nconsole.warn() console.error()\nlogs the properties of an object to the\nconsole.dir()\nconsole.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:698>\n", "text": "3. Now that you know about Node.js's\nconsole.dir()\nmethod, use it to inspect the console object itself:\nconsole.dir(console);\nFigure 1-6 shows the result of passing the console object to\n.\nconsole.dir()\nUsing to inspect an object is a useful\nconsole.dir()\ndebugging tool to use within a Node.js program. When you're\nin REPL, you can just type the name of the object to print out\nits properties.\nFIGURE 1-6: Inspecting the console object.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:699>\n", "text": "4. You can create variables in the REPL, which will persist\nas long as the current REPL session is active:\nconst myObject = {prop1:'test',prop2:'sandwich'};\nWhen you create a new variable (or do any operation that has\nno return value) REPL returns .\nundefined\n5. Type the name of your new variable to make sure that\nit has been created:\nmyObject\n6. Another useful built-in object in Node.js is the global\nobject. Inspect the properties of global:\nglobal\nYou can use the global methods and properties without\nprefacing them with .\nglobal\nAs of Version 18 of Node.js, the global object contains a\nmethod that works like the browser's\nfetch() window.fetch()\nmethod. The method returns a Promise.\nfetch()\n7. Try out the fetch method by running the following\ncommand in REPL:\nfetch('https://www.example.com').then(\n(response)=>console.dir(response.body)\n);\nWhen you run the preceding snippet, Node.js does an HTTP\nGET request for the URL you specify and write the body of the\nresponse to the console. But, there's something strange about\nthe response, as shown in Figure 1-7.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:700>\n", "text": "FIGURE 1-7: The body of an HTTP request from Node.js.\nThe body of the response is a ReadableStream object. I\ntell you about streams in Chapter 2 of Book 7, including how\nto convert a ReadableStream object into something you can\nread and use in your programs.\nAfter you execute the method mentioned in the\nfetch()\npreceding step list, you can press Enter to return to the\nREPL prompt.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:701>\n", "text": "Working with REPL commands\nREPL doesn't provide you with a lot of built-in help, and it can be\nconfusing to work in the REPL as a result. Knowing a few of the\nbuilt-in commands and keyboard combinations you can use can\nmake things much easier.\nREPL has several commands that are available using a period\nfollowed by a keyword. The first to learn is . Entering\n.help .help\nat the REPL prompt brings up a list of the other commands you\ncan use, as shown in Figure 1-8.\nFIGURE 1-8: Finding out REPL's commands with the .help command.\nFollow these steps to see how to save a REPL session and load\nJavaScript into the REPL:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:702>\n", "text": "1. In a REPL session, run a couple of expressions to\nensure that your current session has some data.\n2. Enter .save ./myREPL.js.\nThe string after the command is the path and filename\n.save\nto use. You should see a message that the session was saved\nto your file.\n3. Quit the REPL by pressing Ctrl+D.\nYou return to the normal terminal.\n4. Enter ls to see the files in the current directory.\nOne of those files should have the same name as the one you\njust saved from REPL.\n5. Type cat followed by the name of your file.\nYour saved REPL session will be output to the terminal.\n6. Start the REPL again:\nnode\n7. Load your previous REPL session using the\n.load\ncommand:\n.load ./myREPL.js\nMaking and Using Node.js\nModules\nEach file you create in Node.js is treated as a separate module.\nNode.js programs are highly modular, and building Node.js\nprograms involves importing modules from libraries to create your\nown modules, which you can then import and use in other\nmodules.\nNode.js supports JavaScript modules (also known as ECMAScript\nmodules or just ES modules), using the same syntax I talk about\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:703>\n", "text": "in Chapter 12 of Book 1. However, many Node.js developers still\nuse the original module syntax of Node.js, called CommonJS.\nYou've seen CommonJS modules elsewhere in this book.\nIn particular, the tools such as ESLint and Webpack that I\ndescribe in Book 6 make use of CommonJS modules.\nUsing CommonJS\nTo create a CommonJS module, use the property.\nmodule.exports\nListing 1-4 shows the contents of a file, which I've named\ns; it exports several functions for converting\nmetricConversions.j\nimperial measurements to metric.\nLISTING 1-4: A File That Exports Several\nModules\n//function for converting inches to centimeters\nexports.inchesToCentimeters = (inches) => {\nreturn inches * 2.54;\n};\n//function for converting gallons to liters\nexports.gallonsToLiters = (gallons) => {\nreturn gallons * 3.78541;\n};\n//function for converting pounds to kilograms\nexports.poundsToKilograms = (pounds) => {\nreturn pounds * 0.453592;\n};\n//function for converting miles to kilometers\nexports.milesToKilometers = (miles) => {\nreturn miles * 1.60934;\n};\nTo import a module into another file, use the function.\nrequire()\nListing 1-5 shows a module that imports and uses the exported\nmodules from Listing 1-4.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:704>\n", "text": "LISTING 1-5: Importing Modules\nconst metricConversions = require('./metricConversions');\nconst convertToMetric = (value, unit) => {\nswitch (unit) {\ncase 'in':\nreturn metricConversions.inchesToCentimeters(value);\ncase 'gl':\nreturn metricConversions.gallonsToLiters(value);\ncase 'lb':\nreturn metricConversions.poundsToKilograms(value);\ncase 'mi':\nreturn metricConversions.milesToKilometers(value);\ndefault:\nreturn value;\n}\n};\nconsole.log(`One inch is ${convertToMetric(1, 'in')} centimeters.`);\nUsing ES modules\nNode.js modules can also be created and imported using the\nstandard JavaScript module syntax. Because CommonJS is the\ndefault module format in Node.js (as of this writing), if you want\nto use JavaScript modules instead, you need to enable them.\nTo enable JavaScript modules, you can either\nGive the module a extension.\n.mjs\nAdd as a top-level variable in in\n\"type\":\"module\" package.json\nthe module's nearest parent folder.\nListing 1-6 shows an example of creating JavaScript modules.\nLISTING 1-6: Creating JavaScript Modules\nexport function triangleArea(base, height) {\nreturn (base * height) / 2;\n}\nexport function trianglePerimeter(side1, side2, side3) {\nreturn side1 + side2 + side3;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:705>\n", "text": "}\nexport function triangleHypotenuse(side1, side2) {\nreturn Math.sqrt(side1 * side1 + side2 * side2);\n}\nexport function triangleLeg(hypotenuse, side) {\nreturn Math.sqrt(hypotenuse * hypotenuse - side * side);\n}\nexport default {\ntriangleArea,\ntrianglePerimeter,\ntriangleHypotenuse,\ntriangleLeg\n};\nIn the preceding listing, you export each function using a named\nexport, and you provide a default export. This gives anyone who\nwants to make use of these modules maximum flexibility for how\nthey'll import them.\nListing 1-7 shows how you can import and use JavaScript\nmodules.\nLISTING 1-7: Using JavaScript Modules\nimport { triangleArea, trianglePerimeter } from './Listing070106.mjs';\nfunction triangleMaker(size) {\nconst area = triangleArea(size, size);\nconst perimeter = trianglePerimeter(size, size, size);\nconst triangle = [];\nfor (let i = 0; i < size; i++) {\nconst row = [];\nfor (let j = 0; j < size; j++) {\nif (j < size - i - 1) {\nrow.push(' ');\n} else {\nrow.push(' * ');\n}\n}\ntriangle.push(row.join(''));\n}\nreturn {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:706>\n", "text": "area,\nperimeter,\ntriangle,\n};\n}\nconst { area, perimeter, triangle } = triangleMaker(18);\nconsole.log(`Area: ${area}`);\nconsole.log(`Perimeter: ${perimeter}`);\nconsole.log(triangle.join('\\n'));\nTo run the program in Listing 1-7, the code from both Listing 1-6\nand Listing 1-7 must be saved in files named with\n.mjs\nextensions. Also note that in order to import modules from the file\ncreated from Listing 1-6, you must include the extension in\n.mjs\nthe filename inside the import statement. If you don't use the\nextension, Node.js assumes that the module should be\n.mjs\nloaded using CommonJS and you'll get an error. The same thing\ngoes for running the code from Listing 1-7 in the console: Type\nthe full name of the file to run it, like this:\nnode Listing070107.mjs\nFigure 1-9 shows the output from running Listing 1-7 in the\nconsole.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:707>\n", "text": "FIGURE 1-9: Drawing a triangle in the console.\nSetting the module type in\npackage.json\nSetting the module type in requires the Node.js\npackage.json\nmodules you create to be part of a package, but the additional\nsteps involved in creating a package will save you from having to\nremember to name your files with . Follow these steps to\n.mjs\ncreate a package and set the module type:\n1. Open a terminal in a directory containing Node.js\nmodules, or create a new directory.\n2. Enter npm init into the terminal window.\n3. Answer the questions presented to you by the\nnpm init\nscript, or just press Enter for each question to accept\nthe default values.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:708>\n", "text": "4. Add a new property to the top level of the JSON object\nin named and set its value to \"module\".\npackage.json type\nPACKAGES VERSUS MODULES\nIn Node, a module is a single JavaScript file or a directory that has some\nreusable functionality. Modules can be imported into other programs, which\ncan use their functionality. A package is a file or directory that's described by a\npackage.json file. Packages can be published to the npm registry.\nRemember: Packages are generally made up of one or more modules, but\nnot all modules are packages.\nListing 1-8 shows an example of a file with\npackage.json\nECMAScript modules support enabled.\nLISTING 1-8: Package.json with\nECMAScript Modules Enabled\n{\n\"name\": \"chapter01\",\n\"version\": \"1.0.0\",\n\"type\": \"module\",\n\"description\": \"\",\n\"main\": \"main.js\",\n\"scripts\": {\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n},\n\"author\": \"\",\n\"license\": \"ISC\"\n}\nWith ECMAScript modules enabled in , you can\npackage.json\nsimply name your Node.js files with a extension and import\n.js\nand run ECMAScript modules without having to type the file\nextension.\nGetting Data to Node Modules\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:709>\n", "text": "Many Node.js programs require or allow configuration arguments\nto be passed to them when they start up. You see this in many of\nthe Node.js packages that I show you how to install and use for\nfront-end development. For example, the npm program accepts\nmany parameters, including the names of subcommands to run\n(such as and ) and options preceded by two\nnpm run npm install\nhyphens, , which are called flags, such as .\n-- --save-dev\nYou can provide input to Node.js programs in two ways upon\nexecution: environment variables and passing arguments.\nEnvironment variables\nNode.js programs often need access to information about\nthemselves and about where they're running. For example, a\nprogram that's running on a development machine will need to be\nconfigured differently from a version of the same program\nrunning in production. The global process object contains a\nwealth of information about the current Node.js process.\nTo view the process object, start up the REPL:\nnode\nOnce inside the REPL, enter process, and the process object will\nbe returned, as shown in Figure 1-10. The output of the process\nobject is much too long to fit into one figure, but you'll get the\nidea of it from the snippet shown in the figure.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:710>\n", "text": "FIGURE 1-10: Viewing the process object.\nIn addition to information about the node program and the\ncomputer, the process object also contains an object called .\nenv\nThe object contains environment variables. Environment\nenv\nvariables are variables that reside in the operating system or the\ncontainer of the running application. By default, the object\nenv\ncontains variables such as the username that's running the\nprocess, the path to the running program, and the variable,\nPATH\nwhich lists directories on the computer where executable\nprograms are kept.\nSetting environment variables from the\ncommand line\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:711>\n", "text": "You can pass environment variables to a program when you start\nit by putting them before the command to run your program, like\nthis:\nUSER_NAME=cminnick PASSWORD=supersecret node app.js\nSetting environment variables with .env\nYou can also set environment variables by creating a file named\nat the root of your project directory. When working in a\n.env\ndevelopment environment, the file is commonly used to\n.env\nstore configuration options, such as API keys and other details\nabout your development environment.\nDo not store your file into your code repository.\n.env\nInstead, add to the file and create a file,\n.env .gitignore\nnamed something like , that you commit to your\nexample.env\nrepository (with no secret values set, of course). The\nfile can be used by any other developers who\nexample.env\nwill be working on the code to create their own file.\n.env\nListing 1-9 shows an example of a file.\n.env\nLISTING 1-9: A Sample .env File\nAPI_HOST=api.openweathermap.org\nAPI_KEY=YOUR_API_KEY\nAPI_PATH=/data/2.5/weather\nBefore you can use the file, you need to import it. The library\n.env\nyou can use to do that is called . Follow these steps to\ndotenv\ncreate a node package, install , and use it in a program:\ndotenv\n1. Initialize a node package and choose all the default\nsettings:\nnpm init -yes\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:712>\n", "text": "2. Install dotenv:\nnpm i dotenv\n3. Make a new file named and import dotenv:\napp.mjs\nimport dotenv from 'dotenv';\n4. Call the dotenv's method at the beginning of\nconfig()\n:\napp.mjs\ndotenv.config()\nListing 1-10 shows an example of a complete program that uses\n.\n.env\nLISTING 1-10: Using Environment\nVariables\nimport dotenv from 'dotenv';\ndotenv.config();\nexport function getCurrentWeather(city) {\nconst apiKey = process.env.API_KEY;\nconst apiHost = process.env.API_HOST;\nconst apiPath = process.env.API_PATH;\nconst apiUrl = `https://${apiHost}${apiPath}?q=${city}&appid=${apiKey}`;\nreturn fetch(apiUrl)\n.then((response) => response.json())\n.then((data) => {\nreturn {\ndata: data,\n};\n});\n}\ngetCurrentWeather('London').then((weather) => {\nconsole.log(weather);\n});\nPassing arguments\nYou can pass any number of arguments to a node program after\nthe name of the program. These arguments must be separated by\nspaces \u2014 for example:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:713>\n", "text": "node myProgram.mjs oneThing 'something else' thirdThing\nArguments you pass to a node program become elements in the\narray. The array always has at least\nprocess.argv process.argv\ntwo elements:\ncontains the location of node.\nprocess.argv[0]\ncontains the location of the JavaScript file.\nprocess.argv[1]\nThe arguments that you pass to the program will be in order\nstarting with . Because the arguments you need\nprocess.argv[2]\nstart with the third element, it's common to declare a new\nconstant in a file that receives arguments by removing the first\ntwo elements from the array, like this:\nargv\nconst args = process.argv.slice(2);\nNode's Callback Pattern\nOne common pattern for invoking asynchronous APIs in Node.js's\ncore modules and in most modules created by the community of\nNode.js developers is the callback pattern.\nIn the callback pattern, an asynchronous method always takes a\ncallback function as its last argument. This function is called when\nthe asynchronous operation is completed. The callback function\ntakes the place of the statement in the function, as in the\nreturn\nfollowing simple (synchronous) example:\nfunction addNumbersSync(number1,number2,callback) {\ncallback(number1 + number2);\n}\nTo invoke this function, you pass two numbers followed by a\nfunction that indicates what to do with the result, like this:\naddNumbersSync(2,2, function(result) {\nconsole.log(`The result is ${result}`);\n});\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:714>\n", "text": "In a Node.js module that performs asynchronous tasks, the\ncallback function is used to pass along the results of the\nasynchronous tasks to the next step when it finishes running, as\nin the following example:\nconst fs = require('fs');\nfs.readFile('someTextFile.txt', function (err, data) {\nif (err) {\nconsole.log(err);\n} else {\nconsole.log(data.toString());\n}\n});\nIn the preceding example, the fs module's method\nreadFile()\nreads the contents of a text file. When the reading of the file is\ncompleted, it passes the data from the file as the second\nargument to the callback function supplied to it. If the\nreadFile()\nmethod returns an error, that is passed as the first argument to\nthe callback function.\nThe callback convention is the original way that Node.js modules\nsupported event-based asynchronous code. When Promises\nbecame a popular way to abstract callbacks to create less-\nconfusing code, support for them was built into Node.js. Today,\nmany Node.js functions return both a promise and a callback,\nwhich gives developers a choice of whether to use the old\ncallback convention or the more up-to-date Promises techniques.\nFor example, the following is a function that supports the callback\npattern:\nfunction asyncTask(param1, param2, callback) {\n// do something asynchronous\nif (error) {\nreturn callback(new Error(\"oops. There's been an error\"));\n}\n// do something else if there's no error\ncallback(null, result);\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:715>\n", "text": "To invoke this function, pass it the arguments specified by its\nparameters, followed by a callback function, like this:\nasyncTask ( argument1, argument2, function ( err, returnValue ) {\n// insert the code to run after the async task is done.\n});\nHere's how the preceding example can be modified to support\npromises:\nfunction asyncTask(param1, param2) {\n// do something asynchronous\nif (error) {\nreturn Promise.reject(new Error(\"oops. There's been an error\"));\n}\n// do something else if there's no error\nreturn Promise.resolve(result);\n}\nFinally, Listing 1-11 shows how to write the function so that it can\nbe used with a callback or with Promises.\nLISTING 1-11: Supporting Both Callbacks\nand Promises\nfunction asyncTask(param1, param2, callback) {\n// do something asynchronous\nif (error) {\n// if a callback is passed, call it with the error\nif (callback) {\ncallback(new Error(\"oops. There's been an error\"));\n}\n// otherwise, return a rejected promise\nreturn Promise.reject(new Error(\"oops. There's been an error\"));\n}\n// do something else if there's no error\n// if a callback is passed, call it with the result\nif (callback) {\ncallback(null, result);\n}\n// otherwise, return a resolved promise\nreturn Promise.resolve(result);\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:716>\n", "text": "Chapter 2\nStreaming\nIN THIS CHAPTER\nUnderstanding how streaming works\nCreating readable, writable, and duplex streams\nTransforming streams\nLinking streams into chains\n\u201cTime is but the stream I go a-fishing in.\u201d\n\u2014HENRY DAVID THOREAU\nStreams are one of the most important concepts in Node.js.\nThey're also one of the more misunderstood and difficult\nconcepts. The basic idea, however, is simple. Chances are good\nthat you've used a stream today \u2014 whether you're streaming a\nmovie or listening to music or creating a podcast, you're\nundoubtedly familiar with the idea and with important terms such\nas buffering, readable, and writable.\nOther terms, such as duplex stream and transform stream, might\nnot be as familiar, but if you read the entirety of this chapter,\nyou\u2019ll become comfortable with them.\nJumping into Streams\nStreams are data-handling methods that are implemented by\nNode's built-in stream module. The purpose of streams is to read\nor write input data into output sequentially. You can output\nstreams to files, to a database, to the console, or to a network\nconnection, for example.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:717>\n", "text": "Streams allow Node programs to work with large amounts of\ndata. For example, in traditional file loading (such as you do in a\nclient-side application when you include an image file), the entire\nfile is downloaded or loaded into memory all at once, before\nanything can be done with it. With streaming, events are emitted\nas pieces of data (called chunks) are received or sent. This\nstrategy makes it possible for a Node.js program to not have to\nwait for an operation to be completed, and it's a big part of\nwriting high-performance Node.js code.\nChunking is the key\nIn streaming, files are broken into smaller chunks and you can\nwork with them individually as they're loaded. This is how\nstreaming video or streaming music can start playing almost\ninstantly after you press Play \u2014 the entire video doesn't need to\nbe downloaded before it can start playback.\nFigure 2-1 depicts how streaming works.\n\u00a9 John Wiley & Sons, Inc.\nFIGURE 2-1: How streaming works.\nLoading without streams\nTo see what problem streaming fixes, let's look first at a Node\nserver that doesn't use streaming, as in Listing 2-1.\nLISTING 2-1: A Server Without Streaming\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:718>\n", "text": "import server from 'http';\nimport { promises as fs } from 'fs';\nconst app = server.createServer();\napp.on('request', async (req, res) => {\nconst book = await fs.readFile('./war-and-peace.txt');\nres.end(book);\n});\napp.listen(3000);\nconsole.log('Server running at http://localhost:3000/');\nHere's how this program works:\n1. The first line imports the http module as .\nserver\n2. The second line loads the fs (file system) module, which\ncontains methods for working with the file system.\n3. The third line uses the method to create an\ncreateServer()\nHTTP server instance, which is assigned to the constant .\napp\n4. The next statement uses the method of the http module,\non()\nwhich works like the browser's method. It\naddEventListener()\nlistens for events and runs a callback function when\nrequest\nthey happen.\n5. The method passes a request object and a response\non()\nobject to the async callback function.\n6. The callback function waits for the method to\nfs.readFile()\nload the text file.\n7. The method causes the callback function to exit and\nres.end()\nreturns the value passed to it to the client that made the\nrequest.\n8. The method starts the server and tells it to listen\napp.listen()\non port 3000.\n9. The program outputs a message to the console to let the\nperson who started the server know that it's running.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:719>\n", "text": "In this example, whether the file being served is 1KB or 10000MB,\nthe whole thing is loaded by before any data is\nfs.readFile()\nsent to the client. With a very large file, it's quite possible that the\nserver will run out of memory and crash before the entire file is\nloaded and the result will be that the client receives an error\nmessage.\nConverting to streams\nListing 2-2 shows the server from Listing 2-1, rewritten to stream\nthe file to the client.\nLISTING 2-2: A Simple Streaming Server\nimport server from 'http';\nimport fs from 'fs';\nconst app = server.createServer();\napp.on('request', (req, res) => {\nconst book = fs.createReadStream('./war-and-peace.txt');\nbook.pipe(res);\n});\napp.listen(3000);\nconsole.log('Server running at http://localhost:3000/');\nThe difference between Listing 2-1 and Listing 2-2 is that in\nListing 2-1, a synchronous function ( ) is wrapped with\nreadFile()\na promise to make sure it finishes before returning the data.\nListing 2-2 starts executing an asynchronous method\n( ) and then calls its method to connect it\nreadFileAsync() pipe()\nto the response object.\nThe result is that the server in Listing 2-2 will output chunks of\ndata as they're loaded \u2014 using far less memory in the process\nand getting data to the client much faster.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:720>\n", "text": "Loading a file synchronously requires Node to hold the\nentire file in memory. With asynchronous file and network\noperations, the most a Node.js program must process at any\none time is 64KB (the size of a chunk).\nViewing chunks\nWhen a chunk is returned by an asynchronous function, it emits a\nevent. By listening for this event, you can see the progress\ndata\nof the streaming. When the file is finished being read, the stream\nemits an event. You can listen for this event and end the\nend\nresponse stream.\nIn Listing 2-3, the server listens for events and logs a\ndata\nmessage to the console with each chunk.\nLISTING 2-3: Listening for Chunks\nimport server from 'http';\nimport fs from 'fs';\nconst app = server.createServer();\napp.on('request', (req, res) => {\nconst book = fs.createReadStream('./war-and-peace.txt');\nres.writeHead(200, { 'Content-Type': 'text/plain' });\nbook.on('data', (chunk) => {\nconsole.log('chunk received');\nconsole.log(chunk);\nres.write(chunk.toString());\n});\nbook.on('end', () => res.end());\n});\napp.listen(3000);\nconsole.log('Server running at http://localhost:3000/');\nFigure 2-2 shows the output in the console from running the\nserver in Listing 2-3.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:721>\n", "text": "FIGURE 2-2: Logging chunks.\nIdentifying types of streams\nNode.js has these four types of streams:\nReadable\nWritable\nDuplex\nTransform\nEach of these types of streams can be created by using methods\nthat are exported from the stream module. However, creating\nstreams directly using the stream module is unusual in a Node.js\nprogram because the modules that handle networking, file system\nfunctions, and database connections create the streams for you.\nAll you need to know is how to work with the streams that are\ngiven to you. The upcoming sections of this chapter show how to\ncreate and use each type of stream.\nCreating Readable Streams\nReadable streams are used in operations where data is read, such\nas from a network connection, from a file, or from a database. To\ncreate a readable stream, use the method. For\nReadable()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:722>\n", "text": "example, Listing 2-4 shows how to create a stream and push a\nsimple string into it.\nLISTING 2-4: Pushing Data into a Stream\nimport {Stream} from 'stream';\nconst readableStream = new Stream.Readable()\nreadableStream.push('Hello, World!');\nreadableStream.push(null);\nreadableStream.pipe(process.stdout);\nIn the preceding example, after the readableStream object is\ncreated, its method is called and is passed to\npush() Hello, World\nit. The method causes the string to be stored an internal\npush()\nbuffer and wait for something to consume it. To end the\nstreaming, is passed into the stream object. The final line of\nnull\nthis program uses the method, which works much like a\npipe()\npipe for water. It causes the streams data to flow into an output.\nIn this case, the output is the object, which\nprocess.stdout\noperates like the method. The difference between\nconsole.log()\nand is that adds line\nconsole.log() process.stdout console.log()\nbreaks to the output, whereas writes data\nprocess.stdout\ncontinuously.\nListing 2-5 shows a program that takes a number as an argument\nand counts to that number, pushing each number to a stream. As\nthe stream emits events, they're handled by an event\ndata\nlistener that writes the latest chunk to the console.\nLISTING 2-5: Creating a Streaming\nCounter\nimport { Stream } from 'stream';\nconst readableStream = new Stream.Readable({\nread(size) {\nconst numberToCount = process.argv[2] || 10;\nfor (let i = 0; i < numberToCount; i++) {\nreadableStream.push(i.toString());\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:723>\n", "text": "readableStream.push(null);\n},\n});\nreadableStream.on('data', (chunk) => {\nconsole.log(chunk.toString());\n});\nreadableStream.on('end', () => {\nconsole.log('Done');\n});\nFigure 2-3 shows the output of Listing 2-5.\nReading readable streams from\nthe fs module\nThe method of the fs module reads a file\ncreateReadStream()\nfrom the computer's storage. It takes a file path and an optional\noptions object and returns a stream. For example, to create a\nreadable stream from a file named that's in the\ninputFile.txt\nsame directory as the program, you can use the following\nstatements:\nconst fileToRead = __dirname + '/inputFile.txt';\nconst readStream = fs.createReadStream(fileToRead);\nFIGURE 2-3: A streaming Node.js counter.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:724>\n", "text": "The property is a global property that contains the file\n__dirname\npath to the directory where the program is running.\nThe property isn't available in modules that use\n__dirname\nECMAScript Modules syntax. To get the local directory from\nan ES module (a program that uses import or export), use\nthe method.\nprocess.cwd()\nThe fs module is covered in Chapter 4 of Book 7.\nDistinguishing between the two\nread modes\nReadable streams operate in one of two modes: flowing or\npaused.\nFlowing mode\nIn flowing mode, data is read from the source (such as a file or\nnetwork connection) and provided to the program as fast as\npossible. In flowing mode, the program listens for the , ,\ndata error\nand events to be emitted by the stream and handles each one\nend\nby using a callback function.\nListing 2-6 shows an example of working with a stream from the\nfs module in flowing mode.\nLISTING 2-6: Streaming in Flowing Mode\nconst fs = require('fs');\nconst fileToRead = process.cwd() + '/inputFile.txt';\nconst readStream = fs.createReadStream(fileToRead);\nreadStream.on('data', (chunk) => {\nconsole.log(chunk.toString());\n});\nreadStream.on('end', () => {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:725>\n", "text": "console.log('End of file reached');\n});\nreadStream.on('error', (err) => {\nconsole.log(err);\n});\nPaused mode\nIn paused mode, the method of the stream is called\nread()\nrepeatedly and returns a chunk each time. When there's nothing\nleft to read from the stream, the method returns .\nread() null\nListing 2-7 shows an example of using paused mode to output a\nstream to the console.\nLISTING 2-7: Streaming in Paused Mode\nimport fs from 'fs';\nconst fileToRead = process.cwd() + '/inputFile.txt';\nconst readStream = fs.createReadStream(fileToRead);\nlet data = '';\nlet chunk;\nreadStream.on('readable', () => {\nwhile ((chunk = readStream.read()) !== null) {\ndata += chunk;\n}\n});\nreadStream.on('end', () => {\nconsole.log(data);\n});\nreadStream.on('error', (err) => {\nconsole.log(err);\n});\nCreating Writable Streams\nA writable stream is one that data can be written to. Just as\nreadable streams can be created by using the\nReadable()\nconstructor, writable streams can be created by using the\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:726>\n", "text": "constructor. However, as with readable streams, it's far\nWritable()\nmore common to work with streams provided by other modules.\nTo write data to a writable stream, you can use the\nwrite()\nmethod of the stream. For example, in Listing 2-8, a readable\nstream is used to read a file. As events are emitted from the\ndata\nreadable stream, the program writes chunks to a writable stream,\nwhich writes to a new file.\nLISTING 2-8: Copying a File Using a\nWritable Stream\nimport fs from 'fs';\nconst readableStream = fs.createReadStream('mobydick.txt');\nconst writableStream = fs.createWriteStream('mobydick-copy.txt');\nreadableStream.setEncoding('utf8');\nreadableStream.on('data', (chunk) => {\nwritableStream.write(chunk);\n});\nFollow these steps to try out the program from Listing 2-8:\n1. Create a new JavaScript file with the extension or\n.mjs\nin a package with a file with set to\npackage.json type\n.\nmodule\n2. Create a separate file named in the same\nmobydick.txt\ndirectory as the program.\nYou can find the text of Moby Dick on the Internet\nArchive ( ) or at Project Gutenberg (gutenberg.org)\narchive.org\nor in the repository for this book (at\n).\ngithub.com/chrisminnick/javascriptaio\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:727>\n", "text": "3. Run the program using the command. For\nnode\nexample, if your script is named , you can\nwritable.mjs\nrun it by entering the following line into your terminal:\nnode writeable.mjs\nAfter a surprisingly short time (considering that Moby Dick is over\n200,000 words long), a new file named\nmobydick.copy.txt\nappears in the same directory as your program and the original\ntext file. If you open this copy, you can see that its contents are\nidentical to the original.\nWriting data to a file is an asynchronous operation that may take\nsome time. To do something after the method finishes,\nwrite()\nyou can use an async function to return a promise. Listing 2-9\nshows how you can write log messages from an HTTP server to a\nlocal file before returning the response.\nLISTING 2-9: Writing Log Messages to a\nFile\nimport http from 'http';\nimport fs from 'fs';\nimport path from 'path';\nconst logFile = path.join(process.cwd(), 'logFile.txt');\nconst logFileStream = fs.createWriteStream(logFile);\nconst log = async (message) => {\nawait logFileStream.write(`${message}`);\n};\nconst server = http.createServer((req, res) => {\nlog(\n`${new Date().toString()} ${req.method} ${req.url} ${\nreq.headers['user-agent']\n}\n`\n)\n.then(() => {\nres.writeHead(200, { 'Content-Type': 'text/plain' });\nres.end('Hello World');\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:728>\n", "text": "})\n.catch((err) => {\nconsole.log(err);\n});\n});\nconst port = 3000;\nserver.listen(port, () => {\nconsole.log(`Server listening on port ${port}`);\n});\nProducing Duplex Streams\nA duplex stream is a combination of a writable stream and a\nreadable stream. Earlier in this chapter, in Listing 2-8, I give you\nan example of a simple duplex stream. Before I show you more\nexamples of duplex streams, I have to mention one potential\npitfall of moving data between streams: backpressure.\nBackpressure\nOne potential problem with duplex streams to be aware of is that\nit's possible, and quite common, for reading a file to be faster\nthan writing a file. This situation can result in the writable\nstream's queue growing longer and longer. If the write stream's\nqueue isn't regulated, it will occupy an ever-increasing amount of\nmemory and slow down other processes until it finishes.\nThe situation where data is coming in faster than it can be\nprocessed by the writeable stream is called backpressure.\nFortunately, Node.js has a backpressure mechanism built into it\nthat automatically manages backpressure.\nOne way to enable Node.js's automatic backpressure mechanism\nis by using the method to direct the output of a stream.\npipe()\nThe method has a source and a consumer. The syntax of\npipe()\nis simple \u2014 it's called on one stream and takes another\npipe()\nstream as its argument, as in the following example:\nreadableStream.pipe(writableStream)\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:729>\n", "text": "Listing 2-10 shows the functionality of Listing 2-8 rewritten using\n.\npipe()\nLISTING 2-10: Creating a Duplex Stream\nwith\npipe()\nimport fs from 'fs';\nconst readableStream = fs.createReadStream('mobydick.txt');\nconst writableStream = fs.createWriteStream('mobydick-copy.txt');\nreadableStream.setEncoding('utf8');\nreadableStream.pipe(writableStream);\nThe secret to the triggering of the backpressure mechanism is in\nthe method that's called internally by the pipe. When the\nwrite()\nmethod finishes, it returns . If the write queue is\nwrite() true\nbusy when is called, or if the data buffer has exceeded a\nwrite()\nlimit specified by the option that's set when the\nhighWaterMark\nstream is created, returns .\nwrite() false\nWhen a value is returned by , pauses the\nfalse write() pipe()\nincoming readable stream until the consumer of the data (the\nwritable stream, in the case of Listing 2-10) is ready again.\nPassThrough\nIf you need more information or control over how a duplex\nstream does its job, you can pass a stream to pipe. A\nPassThrough\nstream simply passes data from its input to its\nPassThrough\noutput. In between the input and output you can monitor and\ncontrol the progress of the stream. Listing 2-11 shows how to use\na stream to create a duplex stream that logs the size\nPassThrough\nof each chunk to the console before sending it to its output.\nLISTING 2-11: Using a PassThrough\nStream\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:730>\n", "text": "import fs from 'fs';\nimport stream from 'stream';\nconst readableStream = fs.createReadStream('mobydick.txt');\nconst writableStream = fs.createWriteStream('mobydick-copy.txt');\nconst passThroughStream = new stream.PassThrough();\nreadableStream.setEncoding('utf8');\npassThroughStream.on('data', (chunk) => {\nconsole.log(chunk.length);\n});\nreadableStream\n.pipe(passThroughStream)\n.pipe(writableStream);\nTransforming Streams\nA transform stream is a duplex stream in which the output is\ncomputed from the input. In other words, in a transform stream,\nthe output isn't the same as the input.\nExamples of uses for transform streams are encryption,\ndecryption, compression, or a closed caption generator for video\nthat converts the audio from video data to text.\nTo create a transform stream, first import the class\nTransform\nfrom the stream module. When you construct a transform stream,\nyou can pass a function to the constructor function\nTransform()\ncontaining the logic to use to transform the data.\nFor example, Listing 2-12 creates a transform stream that\nconverts the text of its input to uppercase.\nLISTING 2-12: Making a Transform Stream\nimport { Transform } from 'stream';\nexport const makeBig = new Transform({\ntransform(chunk, encoding, callback) {\nchunk = chunk.toString().toUpperCase();\nthis.push(chunk);\ncallback();\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:731>\n", "text": "},\n});\nOnce you've created a transform stream (inside a module or as its\nown module, as shown in Listing 2-12) you can pass it to\npipe()\nto use it, as shown in Listing 2-13.\nLISTING 2-13: Using a Transform Stream\nimport fs from 'fs';\nimport { makeBig } from './Listing070212.mjs';\nconst readableStream = fs.createReadStream('mobydick.txt');\nconst writableStream = fs.createWriteStream('mobydick-copy.txt');\nreadableStream.setEncoding('utf8');\nreadableStream.pipe(makeBig).pipe(writableStream);\nChaining Streams\nBy chaining multiple pipes, you can apply multiple transforms to\ndata and each pipe will then manage backpressure so that even if\na particular step in the process takes longer than the others, no\nstep in the chain becomes overwhelmed.\nListing 2-14 adds in input from the arguments passed when the\nprogram starts, and requires input from the user, which\npotentially creates more delay in the process than any other type\nof processing. Earlier in this chapter, I tell you how to write data\nto the console using . To get data from the user of\nprocess.stout\na command-line interface, you can use .\nprocess.stdin\nLISTING 2-14: Using a Transform\nInvolving User Input\nimport fs from 'fs';\nimport { Transform } from 'stream';\nconst replaceName = new Transform({\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:732>\n", "text": "transform(chunk, encoding, callback) {\nchunk = chunk.toString().replace(/Ishmael/g, process.argv[2]);\nthis.push(chunk);\ncallback();\n},\n});\nconst getUserApproval = new Transform({\ntransform(chunk, encoding, callback) {\n// display each chunk of data as it comes in and ask the user to confirm\nconsole.log(chunk.toString());\nconsole.log('Is this correct? (y/n)');\n// wait for the user to respond\nprocess.stdin.once('data', (answer) => {\n// if the user says yes, then push the chunk to the output\nif (answer.toString().trim().toLowerCase() === 'y') {\nthis.push(chunk);\nconsole.log('Thank you for approving!');\ncallback();\n}\n// otherwise, ask for more input\nelse {\nconsole.log('Please enter the correct data:');\nprocess.stdin.once('data', (correctData) => {\nthis.push(correctData);\nconsole.log('Thank you for the new text!');\ncallback();\n});\n}\n});\n},\n});\nconst readableStream = fs.createReadStream('mobydick.txt');\nconst writableStream = fs.createWriteStream('mobydick-copy.txt');\nreadableStream.setEncoding('utf8');\nwritableStream.on('finish', () => {\nconsole.log('Done!');\nprocess.exit();\n});\nreadableStream.pipe(replaceName)\n.pipe(getUserApproval)\n.pipe(writableStream);\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:733>\n", "text": "To run the program shown in Listing 2-14, start the program by\nusing the command and pass a name to it. The\nnode\ntransformer replaces the name of Ishmael in the\nreplaceName()\nnovel with the name that was passed when the program was\nstarted. The output from the transformer is then\nreplaceName()\npassed to the transformer, which gives the\ngetUserApproval()\nuser a chance to either approve a single chunk or write their own\nversion of it. When that transform is complete, the chunk is\npassed to the and written to a file.\nwriteableStream\nFigure 2-4 shows a piece of the resulting novel when I ran the\nprogram.\nFIGURE 2-4: Transforming Moby Dick.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:734>\n", "text": "Chapter 3\nWorking with Buffers\nIN THIS CHAPTER\nTaking in some buffer basics\nCreating and decoding buffers\n\u201cAt its most fundamental, information is a binary choice. In other\nwords, a single bit of information is one yes-or-no choice.\u201d\n\u2014JAMES GLEICK\nThe Buffer object in Node.js is a global that provides a way to work\nwith streams of raw data stored outside of the V8 engine. Buffers\nare necessary in Node.js because server-side programs regularly\nread data from the file system, from databases, and from network\nconnections.\nKnowing Your Buffer Basics\nTo understand the purpose of Buffer, try changing the file extension\nof a image to and opening it in VS Code (or any other text\n.png .txt\neditor). What you see is a garbled mess of seemingly random\ncharacters along with some textual metadata, as shown in Figure 3-\n1.\nIf you save that text file with the extension, you'll most likely no\n.png\nlonger have an image file that can be displayed in a photo editor.\nThe process of converting the image (binary data) to text messes up\nthe precise sequence of data that makes an image file an image.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:735>\n", "text": "FIGURE 3-1: Reading binary data as text.\nBuffer objects hold a representation of raw binary data so that it can\nbe safely brought into your program. The most common way Buffer\nobjects are created in Node.js programs is by creating streams of\ndata using either the fs module or http module. For example, the\nmethod takes the path of a file and starts\nfs.createReadStream()\nstreaming it as Buffer objects.\nChapter 4 of Book 7 covers the fs module, including its\nand methods.\ncreateReadStream() createWriteStream()\nDifferentiating between encoding\nand decoding\nAt their most basic level, computers understand only binary data.\nEvery piece of data that a computer works with must be converted\n(by the computer's processor) to a series of 0s and 1s before it can\nbe processed and output. However, it's tedious and pointless for\nprogrammers (or anyone using a computer) to write binary code\ndirectly. Instead, we use a wide variety of data types, such as\nBoolean, number, and string. These data types indicate to the\ncomputer's processor the rules for what we intend to do with the\ndata. The number 5, for example, is handled by a processor\ndifferently from the string \"5\" \u2014 and they must be converted to\nbinary data differently as a result.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:736>\n", "text": "Encoding is the process of converting various data types to binary\ndata so that the processor can use them. Decoding is the process of\nconverting binary data to data that can be used in a computer\nprogram.\nJust as the way you encode data to binary determines how it can be\nused by the processor, the way you decode data from binary\ndetermines how it can be used by a program.\nExamining buffer content\nThe content of a Buffer object is made up of integers that each\nrepresent a single byte of data. To see data through the eyes of a\ncomputer, you can output a Buffer object without decoding it. For\nexample, the following code creates a Buffer from the words\nHello,\nand stores it in a variable named buffer:\nWorld\nlet buffer = Buffer.from(\"Hello, World\");\nIf you run the preceding statement in the Node.js REPL, the value of\nis\nbuffer\n<Buffer 48 65 6c 6c 6f 20 57 6f 72 6c 64>\nA byte consists of 8 bits. A bit is the most basic unit of\ninformation in computing. It represents a binary digit (either 0\nor 1).\nTo start REPL, just open a terminal window (or the\nIntegrated Terminal in VS Code) and enter node at the\ncommand line.\nTo convert this Buffer back to a string, you can use the\ntoString()\nmethod, like this:\nbuffer.toString('utf-8')\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:737>\n", "text": "The result of running the preceding statement is the output of the\nstring \"Hello, World.\" The value passed to the method,\ntoString()\n, is the encoding scheme. An encoding scheme is a set of rules\nutf-8\nthat tell how to encode data to binary.\nThe UTF-8 encoding scheme is the most popular encoding scheme in\nmodern computing. It uses 8-bit binary numbers to represent a\ncharacter and contains rules for encoding every one of the\n1,112,064 valid characters in the Unicode Standard, including\ncharacters used by most of the writing systems in use today as well\nas emojis.\nBefore the creation of UTF-8, the most popular encoding scheme\nwas ASCII, which was invented in the 1960s and can represent only\n128 different characters.\nThe size of a byte was originally chosen because it was the\nminimal amount of data needed to encode a single character\n(using the ASCII standard). UTF-8 uses between 1 and 4 bytes\nper character.\nIf you decode binary data using an encoding scheme that doesn't\nsupport a certain character in the originally encoded data, you get\nback nonsense. For example, the following statement creates a\nBuffer object containing the clown-face emoji:\nlet clownFace = Buffer.from(\" \");\nIf you decode this buffer using UTF-8, you get back a clown face,\nbut if you decode it using another encoding scheme, such as ASCII,\nyou get back a character indicating that the encoding scheme can't\nrepresent the data, as shown in Figure 3-2.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:738>\n", "text": "FIGURE 3-2: Decoding using the wrong scheme can produce garbled output.\nDecoding Buffers\nYou can convert Buffer objects to usable data in your program by\ncalling one of the Buffer object's methods, such as or\njson()\n, as shown in Listing 3-1.\ntoString()\nLISTING 3-1: Serving a Buffer as an Image\nimport http from 'http';\nimport fs from 'fs';\nimport path from 'path';\nfunction getBase64Image(img) {\n// Read the image as a binary data\nconst bitmap = fs.readFileSync(img);\n// Convert binary data to base64 encoded string\nreturn bitmap.toString('base64');\n}\nhttp\n.createServer(function (req, res) {\n// Set the response HTTP header\nres.writeHead(200, { 'Content-Type': 'text/html' });\n// Send the response body\nres.write('<img src=\"data:image/png;base64,');\nres.write(getBase64Image(path.join(process.cwd(), 'images', 'nodejs.png')));\nres.end('\"/>');\n})\n.listen(3000);\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:739>\n", "text": "console.log('Server running at http://localhost:3000/');\nIn this listing, the Buffer returned by is converted\nfs.readFileSync()\nto Base64 encoding. Base64 is a binary-to-text encoding scheme\nthat uses sequences of 24 bits to represent binary data as strings.\nBy doing so, the data can be easily transmitted as part of an HTTP\nserver's response object and then decoded by a web browser (or\nanother client application).\nCreating Buffers\nMost of the time, the Buffer objects you encounter while\nprogramming in Node.js are returned by another module you're\nusing. For example, the chunks that streams are made up of are\nencoded as Buffer objects.\nI talk about streams in Chapter 2 of Book 7.\nHowever, you can also create Buffer objects directly. Two ways to\ncreate buffers are by using the method or the\nBuffer.alloc()\nmethod.\nBuffer.from()\nUsing Buffer.alloc()\nTo create an empty instance of the Buffer class with a fixed length,\npass the number of bytes the Buffer should contain to the\nmethod. For example, to create an empty 8-byte\nBuffer.alloc()\nBuffer object and assign it to a variable, use the following statement:\nlet buffer = Buffer.alloc(8);\nThis statement creates a new buffer and gives each byte in the\nbuffer a value of 0. Printed out, the resulting buffer looks like this:\n<Buffer 00 00 00 00 00 00 00 00>\nIf you pass a second argument to , the value you\nBuffer.alloc()\npass is used to populate the new buffer, as shown in this example:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:740>\n", "text": "let testBuffer = Buffer.alloc(16,\"test\");\nThis results in a Buffer object that looks like this:\n<Buffer 74 65 73 74 74 65 73 74 74 65 73 74 74 65 73 74>\nIn this line, each byte represents one letter in the word test, and the\npattern repeats as many times as there's space available in the\nresulting 16-byte buffer.\nIf you pass a number smaller than 255 (the highest number that can\nbe represented using a 2-digit hexadecimal number) to the second\nparameter of , that number is converted to a\nBuffer.alloc()\nhexadecimal number and used to fill the buffer, as shown in the\nfollowing example:\nlet myBuffer = Buffer.alloc(8, 42);\nThe result of this statement is the following Buffer object:\n<Buffer 2a 2a 2a 2a 2a 2a 2a 2a>\nCan you figure out what the result of passing the number 255 to\nwould be?\nBuffer.alloc()\nHexadecimal numbers range from 0 to 15 and use the\ncharacters through to represent the numbers 10 through 15.\nA F\nA 2-digit hexadecimal character can be used to represent the\nnumbers 0 through 255. For example, the number in\n10\nhexadecimal represents 16 in decimal. The number in\n2A\nhexadecimal represents 42 in decimal.\nThe third argument to is the encoding you want to\nBuffer.alloc()\nuse for the data passed to the new buffer. The default value of the\nthird argument is . Other possible values for the encoding\n'utf8'\nparameter are described in this list:\nutf16le: Encodes each character using either 2 or 4 bytes. It is\nseldom used.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:741>\n", "text": "base64: Encodes a string using Base64 encoding. White space\ncharacters within the base64 string are ignored.\nbase64url: Encodes a string using base64 and uses a URL and\nfilename safe alphabet.\nhex: Encodes each byte as 2 hexadecimal characters.\nIn most cases, using the default encoding ( ) is the best\nutf8\noption.\nUsing Buffer.from()\nAnother way to create a Buffer object is by using . The\nBuffer.from()\ndifference between and is that\nBuffer.alloc() Buffer.from()\ncreates a Buffer object that's just large enough to\nBuffer.from()\nhold the binary representation of the string you pass it, whereas\nalways creates a fixed-size Buffer equal to the size\nBuffer.alloc()\nyou pass it.\nFor example, enter the following line into the Node REPL:\nlet theFriendlyBuffer = Buffer.from(\"I'm a buffer!\");\nThe result is a Buffer object that looks like this:\n<Buffer 49 27 6d 20 61 20 62 75 66 66 65 72 21>\nYou can confirm that this buffer represents the same string you\ncreated it from by using the method:\ntoString()\ntheFriendlyBuffer.toString('utf8');\nThe result is the original string.\nUsing Other Buffer Methods\nAs mentioned earlier in this chapter, most of the time you don't\ncreate Buffer objects manually. However, you do need to know how\nto work with existing buffers to read their contents, to confirm that\nthey're buffers, to compare their values, and to find out information\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:742>\n", "text": "about them such as their length. Fortunately, the Buffer class makes\nmany different methods and static methods available.\nStatic methods are methods of the class itself, rather than of\ninstances of the class. For example, is a static\nBuffer.alloc()\nmethod because it can be called only on the class name\n( ) rather than on objects created using the class.\nBuffer Buffer\nTable 3-1 shows some of the more commonly used Buffer methods.\nTABLE 3-1 Common Buffer Methods\nWhat It Return\nMethod Name Example\nDoes Value\nCreates a\nA Buffer\nBuffer.alloc() buffer of the Buffer.alloc(8,\"test\")\nobject\nspecified size\n\u20131 (indicating\nthat the first\nbuffer should\ncome before\nthe 2nd), 0\nCompares\n(indicating\ntwo Buffer\nthat the two\nobjects for\nBuffer.compare() Buffer.compare(buffer1,buffer2) are the\nthe purpose\nsame), or 1\nof sorting\n(indicating\nthem\nthat the\nsecond buffer\nshould come\nbefore the\nfirst)\nConcatenates\nA Buffer\nBuffer.concat() the buffers in Buffer.concat([buf1,buf2,buf3)\nobject\na list\nBuffer.from() Creates a Buffer.from(\"my string\") A Buffer\nnew buffer object\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:743>\n", "text": "What It Return\nMethod Name Example\nDoes Value\nfrom the\npassed value\nIndicates\nwhether the\nBuffer.isBuffer() passed-in Buffer.isBuffer(myObject) true or false\nvalue is a\nbuffer\nCompares\ncompare() two Buffer buf.compare(buf2) \u20131, 0, or 1\nobjects\nDetermines\nwhether two\nequals() buf.equals(otherBuf) true or false\nbuffers are\nidentical\nDetermines\nwhether a\nbuffer\nincludes() buf.includes('text') true or false\nincludes a\nspecified\nvalue\nContains the\nThe number\nlength of the\nlength buf.length of bytes in the\nbuffer (in\nbuffer\nbytes)\nConverts a A JSON\ntoJSON() buffer to buf.toJSON() representation\nJSON data of the buffer\nConverts a A string\ntoString() buffer to a buf.toString() representation\nstring of the buffer\nWrites a The number\nwrite() string to a buf.write(\"the string\") of bytes\nbuffer written\nLook for a complete list and a detailed example of each one of\nBuffer's properties and methods at\n.\nhttps://nodejs.org/api/buffer.html\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:744>\n", "text": "Iterating over Buffers\nLike arrays, buffers can be iterated over. For example, Listing 3-2\nshows how you can return each letter encoded in a Buffer object\nand return its value in hexadecimal notation.\nLISTING 3-2: Iterating Over a Buffer\nconst myBuffer = Buffer.from('hello');\nfor (const b of myBuffer) {\nconsole.log(b.toString(16));\n}\nFigure 3-3 shows the result of running the code in Listing 3-2.\nFIGURE 3-3: Using for-of to iterate over a buffer.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:745>\n", "text": "Chapter 4\nAccessing the File System\nIN THIS CHAPTER\nReading from files\nWriting to files\nUsing the synchronous API\nUsing the asynchronous API\nUnderstanding paths\nRetrieving file and directory information\n\u201cAn ounce of performance is worth pounds of promises.\u201d\n\u2014MAE WEST\nNode.js's built-in fs module is what enables Node.js programs to\nmanipulate files. As you may have guessed, the name fs is short\nfor file system. If a program running in Node.js has the proper\npermission, it can do anything with files that you can do with any\nother program on your computer, including reading from files,\ncreating files, writing to files, deleting files, moving files,\nrenaming files, setting file permissions, and changing a file\u2019s\nmetadata.\nImporting the fs module\nThe fs module comes in two flavors: the older, callback-based\nflavor and the up-to-date version that supports Promises. In\naddition to the two different ways you can use fs, you can (as\nwith the other core modules) import fs in two ways: by using\nCommonJS syntax or by using ECMAScript module syntax.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:746>\n", "text": "In this book, I mostly use the ES Module syntax, but I also\nshow you the CommonJS method because it's still widely\nused and it's important to understand how to use both.\nTo import the callback-based flavor of fs, you can use the\nCommonJS syntax, like this:\nconst fs = require('fs');\nOr you can import fs by using ES Module syntax, like this:\nimport fs from 'fs';\nHere's the most common way to import the Promises fs module:\nimport {promises as fs} from 'fs';\nWith this statement at the beginning of a Node.js module named\nby using the extension or with set in the\n.mjs type=\"module\"\nfile, you gain access to all of the Promise-based fs\npackage.json\nmodule's properties and methods.\nReading Files\nThe two simplest ways to read files in Node.js are to use either\nthe method or the method. Both\nreadFile() readFileSync()\nmethods take a path to a file as an argument and return the\ncontents of the file.\nReading from a file with fs.read()\nTo read from a file, you can use the method. Before\nfs.read()\nusing , you need to open the file by using .\nfs.read() fs.open()\nOnce you have the file open, you can use to read the\nfs.read()\nentire file or just a portion of it.\nOpening a file with fs.open() and callbacks\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:747>\n", "text": "To open a file using the callback flavor of , pass the\nfs.open()\npath to the file, the mode of the file, and a callback function. The\nargument indicates what can be done with the file after it's\nmode\nopened. Mode is a string containing one of the following values:\n: Open the file in read-only mode and throw an exception if\nr\nthe file doesn't exist.\n: Open the file to read and write and throw an exception if\nr+\nthe file doesn't exist.\n: Open the file to read and write in synchronous mode.\nrs+\n: Open the file for writing and create the file if it doesn't\nw\nexist.\n: Create the file for writing and throw an exception if the file\nwx\nalready exists.\n: Open the file to append and create the file if it doesn't\na\nexist.\n: Create a file to append and throw an exception if the file\nax\nalready exists.\n: Open a file for reading and appending and create the file if\na+\nit doesn't exist.\n: Open a file for reading and appending and throw an\nax+\nexception if it already exists.\nIf you don't pass a mode to , the mode is set to\nfs.open() r+\n(read and write) by default.\nThe callback function passed to returns either an error\nfs.open()\n(in the case that the file can't be opened) or a file descriptor.\nA file descriptor is a number that's used to identify an open file in\nthe computer's operating system.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:748>\n", "text": "Inside the callback, the file descriptor can be used to identify the\nfile to read or write to. Once everything you need to do with the\nopen file is complete, you can close the open file by using the\nmethod.\nfs.close()\nListing 4-1 shows a secure password generator that opens a file\n(or creates one if it doesn't exist) and then writes 100 random\ncharacters to the file before closing it.\nThe code that randomly selects characters in Listing 4-1\nrestricts the possible choices to numbers 33\u2013126, which are\nthe printable characters in the ASCII encoding scheme.\nThese are the characters that it's possible to make with a\nstandard English-language keyboard.\nLISTING 4-1: Using and\nfs.open() fs.close()\nimport fs from 'fs';\nconst fd = fs.open('data.txt', 'w+', (err, fd) => {\nif (err) {\nconsole.log(err);\nreturn;\n} else {\nconst buffer = Buffer.alloc(100);\nfor (let i = 0; i < 100; i++) {\nbuffer[i] = Math.floor(Math.random() * 93) + 33;\n}\nfs.write(fd, buffer, 0, 100, 0, (err, written, buffer) => {\nif (err) {\nconsole.log(err);\nreturn;\n} else {\nconsole.log(`Your new secure password is\n${buffer.toString('ascii')}`);\n}\n});\nfs.close(fd, (err) => {\nif (err) {\nconsole.log(err);\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:749>\n", "text": "return;\n}\n});\n}\n});\nOpening, writing to, and closing a file using\nPromises\nIf you're using the Promises flavor of fs, returns a\nfs.open()\nPromise that resolves to a file handle. The methods of the file\nhandle can then be used to work with the file. Listing 4-2 shows\nthe code from Listing 4-1 rewritten using Promises.\nLISTING 4-2: Using and\nfs.open() fs.close()\nwith Promises\nimport { promises as fs } from 'fs';\nasync function main() {\nconst fd = await fs.open('data.txt', 'w+');\nconst buffer = Buffer.alloc(100);\nfor (let i = 0; i < 100; i++) {\nbuffer[i] = Math.floor(Math.random() * 93) + 33;\n}\nawait fd.write(buffer, 0, 100, 0);\nawait fd.close();\nconsole.log(`Your new secure password is ${buffer.toString('ascii')}`);\n}\nmain();\nUsing readFile()\nIf you want to read an entire file, you can use the\nfs.readFile()\nmethod. This method, which is based on , combines the\nfs.open()\nopening of a file with the reading of the file into one method. To\nuse it, you can simply pass the path to a file as the first\nargument, and, optionally, you can pass the encoding to use to\nread the file as the second argument.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:750>\n", "text": "Listing 4-3 shows an example of using the method\nreadFile()\nfrom the fs module to load a file asynchronously (using an async\nfunction) and log it to the console.\nLISTING 4-3: Reading a File\nAsynchronously and Logging It\nimport { promises as fs } from 'fs';\nasync function main() {\nconst data = await fs.readFile('data.txt', 'utf8');\nconsole.log(data);\n}\nmain();\nNotice that is passed as the second argument to fs.readFile()\nutf8\nin the preceding example. If you specify a value ( is normally\nutf8\nthe only one you need) for this argument, text data is returned to\nyou as text that you can immediately work with when it's\nreturned.\nIf you don't specify a value for the encoding, you get back a\nbuffer. To work with this buffer, you need to convert it to the\nformat you want before you can make use of it.\nWorking with buffers is covered in Chapter 3 of Book 7.\nFigure 4-1 shows what the output of the method\nconsole.log()\nfrom Listing 4-3 looks like when you don't specify an encoding.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:751>\n", "text": "FIGURE 4-1: Returning a buffer from fs.readFile().\nTo convert a buffer object to a string, you can use the\nmethod, as shown in Listing 4-4.\ntoString()\nLISTING 4-4: Converting a Buffer to a\nString\nimport { promises as fs } from 'fs';\nasync function main() {\nconst data = await fs.readFile('data.txt');\nconsole.log(data.toString());\n}\nmain();\nUsing readFileSync()\nOn rare occasions you might need to pause everything a Node.js\nprogram is doing while you read a file. In these cases, you can\nuse the method.\nreadFileSync()\nThe syntax for using is the same as the syntax for\nreadFileSync()\nusing . In Listing 4-5, is used when the\nreadFile() readFileSync()\nprogram starts, before any event listeners are created, to read in\na server's SSL certificate and private key.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:752>\n", "text": "LISTING 4-5: Reading Files Synchronously\nimport { promises as fs } from 'fs';\nimport https from 'https';\nconst privateKey = fs.readFileSync('private.key');\nconst certificate = fs.readFileSync('certificate.crt');\nconst options = {\nkey: privateKey,\ncert: certificate,\n};\nhttps\n.createServer(options, (req, res) => {\nres.writeHead(200);\nres.end('hello world');\n})\n.listen(8000);\nThe example shown in Listing 4-5 is one of the only times when\nit's a good idea to write blocking code in Node.js. Because you\ndon't want to start the server without the values of the\nand variables set, and because the\nprivateKey certificate\nloading of these two files happens only once, when the program\nis started, using makes sense in this case \u2014\nreadFileAsync()\nalthough you can easily achieve the same result using\nasynchronous method calls and Promises or an async function.\nWriting Files\nJust as there are two basic methods for reading data from the file\nsystem into Node.js, there are two methods for writing data:\nand .\nfs.write() fs.writeSync()\nWriting it to disk with fs.write()\nThe method writes data to the computer's file system\nfs.write()\nasynchronously. Using is nearly always the preferred\nfs.write()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:753>\n", "text": "way to write files to disk (versus the synchronous version,\n).\nfs.writeSync()\nWhen talking about writing to physical storage, we\ntypically talk about writing to disk, even though fewer\ncomputers use disks these days. Whether you're writing to a\nfloppy disk, a hard disk, a flash drive, or a solid state drive\n(SSD), it's all the same to Node.js \u2014 and so whether we say\nwe're writing to disk or writing to SSD doesn't matter, either.\nMaybe someday it will be more common to store data in\nstrands of DNA, but we'll probably still call it disk.\nBefore you can write to a file, you first need to open the file for\nwriting. The method for doing this is .\nfs.open()\nThe way you use depends on whether you're writing\nfs.write()\ntext or binary data. To write a string to a file, pass the string (or\nthe name of a variable containing a string) to write, followed by\ntwo optional arguments:\n: The argument specifies (as a number of\nposition position\ncharacters) the offset from the beginning of the file where the\ndata from the string should be written.\n: The argument indicates the expected\nencoding encoding\nencoding for the string. The default value is .\nutf8\nUsing fs.writeFile()\nIf you need to write data to a file asynchronously, or overwrite\nthe contents of an existing file, use the method. As\nwriteFile()\nwith the method, combines the opening\nreadFile() writeFile()\nof the file, the writing of the file, and the closing of the file into\none.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:754>\n", "text": "Listing 4-6 uses the Promises flavor of and\nreadFile()\nto copy the contents of a text file into another text\nwriteFile()\nfile.\nLISTING 4-6: Copying a File with\nreadFile()\nand\nwriteFile()\nimport { promises as fs } from 'fs';\nasync function main() {\nconst data = await fs.readFile('data.txt');\nawait fs.writeFile('data2.txt', data);\n}\nmain();\nUsing Paths\nUntil now, I have described only how to read and write files that\nare in the same directory as the program that's working with\nthem. This, of course, is not how the world works. In any project\ninvolving more than a couple of files, you'll want to organize the\nfiles into subdirectories. In some cases, you may want to access\nand work with files that are not just outside of the same directory\nas the program file, but also outside of the Node.js package\ndirectory.\nNode.js's path module contains tools for working with file paths.\nAlthough it's not as glamourous as certain other built-in modules,\nthe path module is probably one of the most useful and widely\nused tools in Node.js's toolbox when you're working with files.\nUsing the path module starts with importing it. You can do so by\nusing the old CommonJS syntax:\nconst path = require(\"path\");\nor by using the ES Modules syntax:\nimport path from 'path';\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:755>\n", "text": "When you're working with files from a stand-alone Node.js\nprogram, as I show you how to do in the examples earlier in this\nchapter, using the path module isn't usually necessary, because\nthe location of the program file won't change and you can\nreference any files you need to read from or write to by using\nrelative paths.\nFor example, Listing 4-7 reads from a file in a directory named\nthat's one level higher in the file hierarchy than the\ndata.txt\nNode.js program file.\nLISTING 4-7: Reading from a File at a\nHigher Level in the File Structure\nimport { promises as fs } from 'fs';\nasync function main() {\nconst data = await fs.readFile('../data/data.txt');\nconsole.log(data.toString());\n}\nmain();\nThe path to in Listing 4-7 is what's known as a relative\ndata.txt\npath because it tells the program how to access the file relative to\nthe file containing the program. The group of symbols at the\n../\nbeginning of the path means, \"Go up a directory.\" A relative path\nstarting with means, \u201cStart with the current directory.\u201d\n./\nThe other way to reference files is to use an absolute path. An\nabsolute path is the path to a directory or file that starts with the\nroot. In file paths, the root directory is the topmost directory in\nthe file system, which is represented by . In URLs, the root\n/\ndirectory is the root of the directory from which the web server is\nserving files.\nTo find out the absolute directory where a Node.js program is\nrunning, you can use the path module's method, which\nresolve()\nreturns the absolute path to a file (if a path is passed to it) or the\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:756>\n", "text": "absolute path to the current directory (if no file is passed to it).\nIt's a common practice to use to find out the\npath.resolve()\ncurrent directory path and assign it to a constant named (notice\nthe two underscores!) .\n__dirname\nAnother useful method in the path module is the method.\njoin()\nIt takes parts of a path and joins them into a single path. Listing\n4-8 shows how you can use and to\npath.resolve() path.join()\ncreate a function that can be passed the name of a file to read; it\nthen reads that file using its absolute path and displays the file's\nlength and the absolute path to the file.\nLISTING 4-8: Getting the Absolute Path to\na File\nimport path from 'path';\nimport { promises as fs } from 'fs';\nconst __dirname = path.resolve();\nasync function main(filename) {\nconst fileToRead = path.join(__dirname, filename);\nconst data = await fs.readFile(fileToRead);\nconsole.log(`Read ${data.length} bytes from ${fileToRead}`);\nconsole.log(data.toString('utf-8'));\n}\nmain('lorum-ipsum.txt');\nFigure 4-2 shows the output from running the program in Listing\n4-8.\nFIGURE 4-2: Using path.resolve() and path.join().\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:757>\n", "text": "Getting File and Directory\nInformation\nBeyond accessing and writing new files, the fs module also has\nways to find out information about files and directories on the\nhost computer. The remainder of this chapter presents some\ncommon tasks you might need to complete with the local file\nsystem, plus a description of how to accomplish them using\nNode.js.\nListing the files in a directory\nTo list the files in a directory, you can use the\nfs.readdir()\nmethod. Listing 4-9 shows how to read the names of the files in\nthe same directory as the program and create an array that's\nlogged to the console.\nLISTING 4-9: Reading the Directory's Files\nand Logging Filenames\nimport { promises as fs } from 'fs';\nimport path from 'path';\nconst __dirname = path.resolve();\nasync function main() {\nconst files = await fs.readdir(__dirname);\nfor (const file of files) {\nconsole.log(file);\n}\n}\nmain();\nFinding directories\nBy default, the method doesn't distinguish between\nfs.readdir()\nfiles and directories when adding a list of files to its resulting\narray. You can find out which items in a directory are also\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:758>\n", "text": "directories by setting the option to and calling\nwithFileTypes true\nthe method of each object returned after running\nisDirectory()\n, as shown in Listing 4-10.\nfs.readdir()\nLISTING 4-10: Finding Out Whether an\nItem Is a Directory\nimport { promises as fs } from 'fs';\nimport path from 'path';\nconst __dirname = path.resolve();\nasync function main() {\nconst files = await fs.readdir(__dirname, { withFileTypes: true });\nfor (const file of files) {\nconsole.log(file.name, file.isDirectory());\n}\n}\nmain();\nGetting file stats\nIf you need more information about files, you can pass a path to\nthe method to extract additional properties, including\nfs.stat()\nwhen the file was created ( ), the size of the file\nstats.birthtime\n( ), when the file was last modified ( ), and\nstats.size stats.mtime\nwhen the file was last accessed ( ). Listing 4-11 shows\nstats.atime\nhow to use several of the properties returned by .\nfs.stat()\nLISTING 4-11: Getting File Information\nimport { promises as fs } from 'fs';\nimport path from 'path';\nconst __dirname = path.resolve();\nasync function main() {\nconst files = await fs.readdir(__dirname, { withFileTypes: true });\nfor (const file of files) {\nconst stats = await fs.stat(file.name);\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:759>\n", "text": "console.log(\n`${file.name} is ${stats.size} bytes and is ${\nfile.isDirectory() ? 'a' : 'not a'\n} directory. It was created on ${stats.birthtime} and last modified on\n${\nstats.mtime\n}`\n);\n}\n}\nmain();\nFigure 4-3 shows the console output from running the program in\nListing 4-11.\nFIGURE 4-3: Getting file and directory information.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:760>\n", "text": "Chapter 5\nNetworking with Node\nIN THIS CHAPTER\nStaying secure while running Node.js\nMaking servers with the http module\nCreating and using HTTP requests\nResponding to requests\nParsing and populating HTTP headers\n\u201cUse a personal firewall. Configure it to prevent other computers,\nnetworks, and sites from connecting to you, and specify which\nprograms are allowed to connect to the net automatically.\u201d\n\u2014KEVIN MITNICK\nThe ability to make and receive requests and responses using\nHTTP protocol is Node.js's killer app. Without networking\ncapabilities, and HTTP networking capabilities in particular,\nNode.js programs would be confined to talking only to you and\nusing only resources that are on your computer.\nWhat makes Node.js so useful is that you can use it to create web\nservers and application servers. Here are three useful definitions:\nA server is a program that can be accessed over a network.\nA web server is a program that can be accessed over a\nnetwork by using the HTTP protocol.\nA web application server is a server that delivers a business\napplication using HTTP and that can be accessed using an\napplication programming interface (API).\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:761>\n", "text": "In this chapter, I show you how to start writing Node.js web\nservers and application servers.\nA Note about Security\nThe quote that opens this chapter is one of the few times in this\nbook that you see one that isn't inspirational or funny. This one is\nwise and important, however, and I recommend taking a moment\nto read it again now.\nKevin Mitnick, who is a computer security consultant and an\nauthor, was one of my childhood heroes, both because his last\nname is similar to mine and because we both had, in the 1980s,\nan intense interest in exploring and learning about the incredible\nnew worldwide network of networks that was made possible by\nthe adoption of the TCP/IP standard from the Advanced Research\nProjects Agency Network (ARPANET). This change to TCP/IP, in\n1983, is what changed ARPANET from a relatively exclusive\nnetwork made up of government and university computers to the\nparent of what we now know as the Internet. Unlike Kevin\nMitnick, I never did time in prison for my curiosity.\nOne person's exploring is another person's trespassing. I\ndon't condone any type of illegal activity involving a\ncomputer.\nI chose Mitnick's quote for this chapter because knowing how to\nprogram with Node.js gives you the power to build your own part\nof the Internet. If you don't use a firewall, anyone else who has\nan Internet connection and knows your computer's IP address\ncan access any Node.js server you run.\nA firewall is a program you can run on your computer that blocks\nother computers from accessing services on your computer over a\nnetwork. Fortunately, modern operating systems come with\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:762>\n", "text": "firewalls built-in, and your computer and your Internet service\nprovider probably already restrict computers from outside your\nlocal network from accessing any servers you create and run.\nIn addition to the built-in firewalls, many good firewalls are\navailable for free or little cost and provide additional functionality,\nsuch as virus protection, including these:\nAura\nAvast Premium Security\nAVS Firewall\nBitdefender Total Security\nComodo Firewall\nGlassWire\nMcAfee Antivirus\nNorton Antivirus\nPanda Dome Essential\nPCProtect\nTinyWall\nTotal AV\nZoneAlarm\nIf you don't want to install a separate paid or free firewall (and I\ndon't blame you, because they often come with a lot of\nnotifications and alerts reminding you to upgrade), here's how\nyou can make sure you're using the one you already have:\nOn Windows:\n1. Click the Start button and then search for and open Control\nPanel.\n2. In Control Panel, select the System and Security option.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:763>\n", "text": "3. In the System and Security Control Panel, select Windows\nDefender Firewall.\n4. Choose Turn Windows Firewall On and turn on the firewall for\nthe domain network, private network, and public network.\nOn macOS:\n1. Choose System Settings from the Apple menu.\n2. Click the Network section on the left side of the window.\n3. Select Firewall.\n4. Click the button to enable the Firewall.\nThe exact names of the controls for the Windows and\nmacOS firewalls may change in the future, but you can easily\nlocate the correct control panels by searching for them on\nyour computer or by using Google.\nWith your firewall enabled, you'll likely see, the next time you run\na Node.js server, a message asking whether you want to allow\nincoming connections to Node.js. Since you'll be accessing your\nNode.js programs only from the local computer (using the\nlocalhost address), you should select No.\nWith your firewall enabled, certain programs you depend\non, such as file storage apps such as Dropbox or Google\nDrive, may stop working correctly until you allow them to\nreceive incoming connections in your firewall settings.\nMaking a Web Server\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:764>\n", "text": "As with the other Node.js core modules, the first step in using the\nhttp module is to import it. Here's the most modern way to do\nthat:\nimport http from 'http';\nThat was painless enough. Once you've imported http, you can\nmake a server. The method for creating a server is named,\nappropriately enough, . The\ncreateServer() createServer()\nmethod returns a server object. You can pass a callback function\nto and that function will be invoked whenever a\ncreateServer()\nclient (such as a web browser) sends an request to the server's\naddress. Perhaps the world's most useless web server is shown in\nListing 5-1.\nLISTING 5-1: It's Alive!\nimport http from 'http';\nconst app = http\n.createServer((req, res) => {\nres.writeHead(200, { 'Content-Type': 'text/html' });\nres.end('<h1>Hello World</h1>');\n})\n.listen(3000, () => {\nconsole.log('Server running at http://localhost:3000/');\n});\nI have provided several examples of simple web servers in this\nbook already, and the preceding one is nothing special. When you\nrun it, it creates a server and listens for requests at\n. Any request causes it to respond with a\nhttp://localhost:3000\nbit of HTML.\nLet's take a deeper look now at the callback function that's\npassed to , the parameters that are passed to the\ncreateServer()\ncallback function, and the methods you can use inside the\ncallback function.\nListing 5-2 shows an example of using to make a\ncreateServer()\nweb server that returns information about each request made to\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:765>\n", "text": "it back to the requester. In other words, it tells the requester what\ntheir request was.\nLISTING 5-2: Responding to a Request\nwith a Request\nimport http from 'http';\nconst server = http.createServer((req, res) => {\nres.writeHead(200, { 'Content-Type': 'text/html' });\nres.write(`<p>request method: ${req.method}</p>`);\nres.write(`<p>request url: ${req.url}</p>`);\nres.write(`<p>request http version: ${req.httpVersion}</p>`);\nres.write(`<p>request raw headers: ${req.rawHeaders}</p>`);\nres.end();\n});\nserver.listen(3000, () => {\nconsole.log('Server running at http://localhost:3000/');\n});\nVisit in your browser after starting the\nhttp://localhost:3000\nserver in Listing 5-2. The exact response will depend on the\nbrowser and computer you're using, but it should look something\nlike Figure 5-1.\nFIGURE 5-1: Viewing your request headers.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:766>\n", "text": "Understanding the Request object\nThe first argument passed to the callback parameter of the\nmethod is the request object. The request object,\ncreateServer()\nas you can see if you run Listing 5-2, contains data about the\nHTTP request. An HTTP request is the data passed by your\nbrowser to the server when it requests a resource (such as an\nHTML page, a JavaScript file, a CSS stylesheet, or an image) from\na particular server.\nThe most important parts of the request object are the method\nand the URL. The request URL is the path on the web server,\nrelative to the root directory. For example, if the URL is just a\nslash (/), this indicates that the request is for the default\ndocument at the root of the web server.\nIn most cases, web servers are configured to serve files named\nor some variation (such as , , or\nindex.html index.htm index.php\n) when a URL is requested without a specific\ndefault.html\nfilename.\nThe request method indicates the desired action that the web\nbrowser (or another HTTP client) wants the server to take in\nresponse to the request. This list describes the most common\nrequest methods:\nGET is used for retrieving data.\nPOST submits data to the server that the server should use to\ncreate something new, such as an entry in a database.\nPUT, replaces the data in an existing server-side resource\nwith the data contained in the request.\nPATCH updates an existing server-side resource using the\ndata contained in the request.\nDELETE deletes a resource on the server, such as a record in\na database.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:767>\n", "text": "The URL and request method are both passed as part of an HTTP\nrequest called the request header. Requests may also contain\ndata, such as input from a user's entries into form fields, or\nanything you specify in a client-side JavaScript program that\nmakes HTTP requests. The portion of an HTTP request that\ncontains data passed from the client is called the request body.\nWhen you write a Node.js server, you have control over what the\nserver does with requests from the client and the header and\nbody data it contains.\nI tell you more about sending data from a client\napplication to a server in Chapter 9 of Book 7 and Chapter 10\nof Book 7.\nUnderstanding the response\nobject\nThe second argument passed to the 's callback\ncreateServer()\nfunction is the response object. The response object contains\nmethods, properties, and events for working with the response\nthat the server will send back to a client in response to HTTP\nrequests.\nThe response header\nTo start a response to a request, you start the same way you'd\nstart responding to any letter: with the header. Like the\n<head>\nelement in a web page, the response header contains information\nabout the document. In programming, we call information about\nthe information metadata. The values in the response header can\nbe used by the client to indicate whether the request was\nsuccessful, how the data should be processed, whether the\nconnection between the server and the client will remain open\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:768>\n", "text": "after the response is sent (in case the client has more requests to\nmake), and more.\nHTTP headers are case-insensitive strings, followed by a colon,\nfollowed by a value. Not every HTTP response needs to set every\npossible HTTP header. However, every response starts the same\nway, with the status line. The status line has these three\ncomponents:\nThe HTTP method: This is usually HTTP/1.1.\nThe status code: The 3-digit status code indicates whether\nThe request was successful, in which case a 200 status\ncode should be sent\nAn error occurred on the server (a 500 status code)\nThe resource has moved to a different location (a 300\nstatus code)\nA client error occurred, such as when the client lacks\nproper authorization or tried to access a non-existent\nresource (a 400 status code)\nThe status text: This is a brief textual description of the\nstatus code, such as Not Found (for a 404 status code) or\nSuccess (for a 200 status code).\nAfter the status line, the header may include any in a long list of\nHTTP headers.\nThis list describes some of the more commonly used headers:\nContent-Type: Specifies how the client should parse the\ndata. These are some common values for Content-Type:\n: Used for HTML documents.\ntext/html\n: Used for data from an HTML form.\nmultipart/form-data\nThis method should be used for form submissions that\ninclude binary data (such as images or audio files).\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:769>\n", "text": ": Another way to\napplication/x-www-form-urlencoded\nsend form data. This content type encodes the body of\nthe HTTP message as a URL string, such as\n.\nfirstName=Wilma&lastName=Flintstone&city=Bedrock\n: Used for sending plain text to the client.\ntext/plain\n: Used for sending JSON data to the\napplication/json\nclient.\nAccess-Control-Allow-Origin: Indicates the origins that the\nresponse can be shared with. An origin is made up of the\nscheme ( or ), the domain name ( ), and\nhttp https example.com\nthe server port number (which is 80 by default for HTTP\nservers).\nAccess-Control-Allow-Methods: Specifies which HTTP\nmethods (for example, POST, GET, PUT, or DELETE) can be\nused to make requests to the server.\nDate: Includes the date and time the response was sent.\nContent-Length: Specifies the size of the response body, in\nbytes.\nTransfer-Encoding: Indicates the encoding of the message\nbody. For streaming chunks of data from the server, the\nTransfer-Encoding header is set to . The other common\nchunked\nvalues are or , which can be used in combination\ndeflate gzip\nwith (separated by commas) or alone to indicate how\nchunked\nthe message body is compressed.\nConnection: Specifies whether the network connection\nbetween the client and the server should stay open (in which\ncase it should be set to ) or be closed after the\nkeep-alive\ncurrent transaction (in which case it should be set to ).\nclose\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:770>\n", "text": "You can see a complete list of the HTTP headers at\nhttps://developer.mozilla.org/en-\n.\nUS/docs/Web/HTTP/Headers\nMAKING AN OPTIONS REQUEST\nRequests from a client to a server that have the potential to change data on\nthe server are called complex requests. Servers and browsers use cross-origin\nresource sharing (CORS) to restrict these requests when they come from\norigins that are different from the server origin. For example, if a React web\napplication that originates from https://www.example.com tries to make a\nDELETE request to https://www.microsoft.com/users, the server requires\nauthorization, of course, but it may also simply not allow the request to be\nmade in the first place.\nBefore making a complex request, HTTP clients make a preflight request,\nwhose purpose is to determine whether the server will allow the client to make\na request. A preflight request uses the OPTIONS HTTP method. An OPTIONS\nrequest sends information about the request that the browser wants to make,\nincluding the method and the origin of the request. Here's what a typical\nOPTIONS request looks like:\nOPTIONS /resource/foo\nAccess-Control-Request-Method: DELETE\nAccess-Control-Request-Headers: origin, x-requested-with\nOrigin: https://foo.bar.org\nThe server responds with its Access-Control-Allow-Origin and Access-\nControl-Allow-Methods headers to indicate whether the intended request will\nbe allowed, as shown in this snippet:\nHTTP/1.1 204 No Content\nConnection: keep-alive\nAccess-Control-Allow-Origin: https://foo.bar.org\nAccess-Control-Allow-Methods: POST, GET, OPTIONS, DELETE\nAccess-Control-Max-Age: 86400\nPreflight requests happen automatically when your program tries to make\ncomplex requests. If the requested method and origin match (or if the server\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:771>\n", "text": "sends back a wildcard (*) value that matches the request method or options),\nthe browser makes the HTTP request.\nThe response body\nFollowing the HTTP header, an HTTP response may have a blank\nline followed by the response body. Not all responses have a\nbody. For example, the response to an OPTIONS request has only\nthe header. Requests that result in a or a\n201 Created 204 No\nalso lack a body.\nContent\nWhen present, the body takes one of these three forms:\nA single file of known length, such as an HTML document, an\nimage, or JSON data\nA single file of unknown length encoded in chunks\nA multiple-resource body\nMethods of the response object\nA simple HTTP server created using requires the\ncreateServer()\nuse of only two methods of the response object: and\nwriteHead()\n.\nend()\nThe writeHead() method\nThe method sends a response header with these\nwriteHead()\nthree parameters:\nStatus code\nDescription of the status code (optional)\nAn object or array containing the headers you want to send\nThe return value of is a reference to the\nwriteHead()\nobject.\nServerResponse\nThe method can be called only once per response.\nwriteHead()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:772>\n", "text": "The end() method\nThe method of the response object tells the server that the\nend()\nheaders and body of the response are complete. If you pass a\nstring or a buffer object to , the server sends that value in\nend()\nthe body of the response before ending the response. Calling\nis required for every response.\nend()\nBecause returns a reference to the\nwriteHead() ServerResponse\nobject, you can chain to to send a complete\nwriteHead() end()\nresponse to the client in a single statement, like this:\nresponse.writeHead(200, {\n'Content-Type': 'text/plain'})\n.end('This is the complete response.');\nThe write() method\nIf all you want to do is serve static files (such as HTML or JSON),\nyou can do that just fine by using only and .\nwriteHead() end()\nHowever, most Node.js servers do more interesting things\nbetween writing the header and ending the response. For these\ncases, you can use the method. The method\nwrite() write()\nsends a chunk of data to the request.\nYou can call the method as many times as you need to.\nwrite()\nUsing implicit headers\nWhen you don't call , the server sends a header for\nwriteHead()\nyou. This is called an implicit header. If you're using implicit\nheaders, you still need to specify what those headers should be.\nYou can do that by using various properties and methods:\nsets a single header value. You can call it multiple\nsetHeader()\ntimes to set multiple headers.\nis the property to set with the status\nresponse.statusCode\ncode you want an implicit header to include.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:773>\n", "text": "is the property to set with the status\nresponse.statusMessage\nmessage you want an implicit header to include.\nKnowing the differences between\nsetHeader() and writeHead()\nAlthough both and can be used to add\nsetHeader() writeHead()\nheaders to the response object, you should be aware of certain\ndifferences between them. The first difference, of course, is that\nonly sets a header, whereas sets the\nsetHeader() writeHead()\nheader and immediately sends it.\nThe second difference is in syntax. The method takes\nwriteHead()\nan object or array of headers as its argument and can be used to\nset as many headers all at once as you want.\nThe method sets only one header, and you have to\nsetHeader()\ncall it multiple times to set multiple headers. The first argument to\nis the name of the header, and the second argument\nsetHeader()\nis the value to assign to that header. For example, to set the\nheader to using , you use the\ncontent-type text/html setHeader()\nfollowing method call:\nres.setHeader(\"content-type\",\"text/html\");\nThe third difference between and is that\nsetHeader() writeHead()\ndoesn't do any sort of cleaning or parsing of the\nwriteHead()\nheader object you pass to it. Since HTTP headers are case-\ninsensitive, It's possible with to set the same header\nwriteHead()\nmultiple times with different capitalization. For example, in the\nfollowing call, the header is specified\nwriteHead() content-type\ntwice:\nres.writeHead(200,{\n'Content-Type':'text/html',\n'content-type':'text/plain'\n});\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:774>\n", "text": "The result of sending two different values to the same header\nwith is that both values are sent to the client, and\nwriteHead()\nthe client uses the last one.\nThe method, on the other hand, normalizes the\nsetHeader()\nheader names you pass to it and treats and\n'Content-Type'\nas the same thing.\n'content-type'\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:775>\n", "text": "Chapter 6\nUsing Events\nIN THIS CHAPTER\nGetting to know EventEmitter\nListening for events\nRemoving event listeners\nEmitting events\n\u201cEvents are not a matter of chance.\u201d\n\u2014GAMAL ABDEL NASSER\nEvents are central to how asynchronous code works in Node.js, as\ndescribed in these examples:\nStreams (which I tell you about in Chapter 2 of Book 7) are\nobjects that emit events when data is available.\nServer objects (see Chapter 5 of Book 7) emit an event when\na new request is received.\nWhen an error occurs in Node.js, an event is emitted. I\nerror\ntell you all about errors and how to respond to error events in\nChapter 7 of Book 7.\nIn this chapter, I show you how to emit events and register event\nlisteners in your own Node.js modules.\nIntroducing EventEmitter\nEvery object that emits events is an instance of the\nEventEmitter\nclass. Instances of have an method that\nEventEmitter emit()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:776>\n", "text": "emits an event when called. These objects also inherit an\non()\nmethod that you can use to attach functions to named events.\nWhen an event is emitted, any functions registered to that event\nare called synchronously. Node's events work the same as the\nbrowser events I tell you about in Chapter 10 of Book 1. In a\nbrowser, for example, a element emits a event\n<button> click\nwhenever a user clicks it. The browser's\naddEventListener()\nmethod works like Node.js's method to register event\non()\nhandlers.\nNode.js's method is an alias for another method:\non()\n. You can choose which one you want to use,\naddListener()\nbut they work the same.\nCreating custom events\nIn addition to the events built into Node.js's core modules (such\nas , , or ), you can emit any event you like and\nopen close data\nregister listeners on that event.\nListing 6-1 shows an example of creating an interface for reading\ndata from a Readable stream one line at a time using the readline\nmodule.\nThe program checks each line for the word taco, and when it\nfinds one, an event named is emitted. An event listener is\ntaco\nset to handle each event and log to a file the position of the\ntaco\nreference and the line on which it appears.\ntaco\nLISTING 6-1: Logging References to Tacos\nwith Events\nimport fs from 'fs';\nimport path from 'path';\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:777>\n", "text": "import readline from 'readline';\nconst __dirname = path.resolve();\nconst rl = readline.createInterface({\ninput: fs.createReadStream(path.join(__dirname, 'recipes.txt')),\ncrlfDelay: Infinity,\n});\nlet lineNumber = 0;\nrl.on('line', (line) => {\nlineNumber++;\nif (line.includes('taco')) {\nrl.emit('taco', lineNumber, line);\n}\n});\nrl.on('taco', (lineNumber, line) => {\nconsole.log(`Taco found on line ${lineNumber}: ${line}`);\nfs.appendFileSync(\npath.join(__dirname, 'taco-log.txt'),\n`Taco found on line ${lineNumber}: ${line}\n`\n);\n});\nIn Listing 6-1, is a constructor function that\ncreateInterface()\ncreates an instance of the class.\nInterfaceConstructor\nis an instance of . Every\nInterfaceConstructor EventEmitter\ninstance of is associated with a single\nInterfaceConstructor\ninput, which is the stream created from the path to\nrecipes.txt\nin this example.\nExtending EventEmitter\nYou can create your own instances of by extending\nEventEmitter\nit to create a new class. For example, in Listing 6-2, a new class is\ncreated that does nothing other than inherit the properties and\nmethods of .\nEventEmitter\nBy creating an instance of the new class, events can be listened\nfor and emitted.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:778>\n", "text": "LISTING 6-2: Extending EventEmitter\nimport EventEmitter from 'events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', () => {\nconsole.log('an event occurred!');\n});\nmyEmitter.emit('event');\nPassing arguments to listeners\nWhen you emit an event from an instance of , you\nEventEmitter\ncan pass arguments to event emitters listening for the event by\nlisting them after the name of the event to emit. To make use of\nthese arguments, specify parameters in a callback function passed\nas the second argument to the method, as shown in Listing\non()\n6-3.\nLISTING 6-3: Passing Arguments to\nListeners with\nemit()\nimport EventEmitter from 'events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', (param1,param2) => {\nconsole.log('an event occurred!',param1,param2);\n});\nmyEmitter.emit('event','something','something else');\nUsing this in an event handler function\nThe value of in an event listener refers to the object that\nthis\nemitted the event if you define the function using the\nfunction\nkeyword, as shown in Listing 6-4.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:779>\n", "text": "LISTING 6-4: Using in an Event\nthis\nHandler\nimport EventEmitter from 'events';\nclass javaScriptLibraryCreator extends EventEmitter {\nconstructor() {\nsuper();\nthis.frameworkName = '';\n}\naddJS = (word) => {\nthis.frameworkName = `${word}.js`;\n};\n}\nconst myLibraryCreator = new javaScriptLibraryCreator();\nmyLibraryCreator.on('makeFramework', function (word) {\nthis.addJS(word);\nconsole.log(`Your framework name is ${this.frameworkName}`);\n});\nmyLibraryCreator.emit('makeFramework', process.argv[2]);\nIn this example, the class defines a property, , and\nframeworkName\na method, . The method takes a string argument\naddJS() addJS()\nand adds to it to form the name of a real-life or potential\n.js\nname of a JavaScript library.\nIn the event listener (set using ), the event handler function\n.on()\ncalls and passes a string emitted by the event emitter to\naddJS()\n. The event handler then logs a string containing the new\naddJS()\nvalue of the property. To create your new\nframeworkName\nframework name, pass any word to the program from the\ncommand line, as shown in Figure 6-1.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:780>\n", "text": "FIGURE 6-1: Meet your new JavaScript framework name.\nUsing arrow functions as event handlers\nIf you use an arrow function to define your event handler\nfunction, refers to the event handler function itself. For\nthis\nexample, Listing 6-5 shows the event handler from Listing 6-4 as\nan arrow function. The result of running the program with this\nchange completed is an error because the references to\nand no longer refer to the\nthis.addJS() this.frameworkName()\ncontaining object, as shown in Figure 6-2.\nLISTING 6-5: Using an Arrow Function as\nan Event Handler\nmyLibraryCreator.on('makeFramework', (word) => {\nthis.addJS(word);\nconsole.log(`Your framework name is ${this.frameworkName}`);\n});\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:781>\n", "text": "FIGURE 6-2: Node.js cannot read properties of undefined.\nUnderstanding and Using\nmaxListeners\nWhen you register an event listener for an event, the new listener\nis added to the listeners array. You can add multiple listeners for\nthe same event, and Node.js doesn't do any checking to see\nwhether the listener has already been added. When the event\nhappens, the event listener functions in the listeners array are\ninvoked synchronously in the order in which they were added. If\nyou add the same listener for the same event multiple times, that\nlistener is executed multiple times.\nEach event listener you register consumes processing power and\nmemory in your Node.js process. If these event listeners aren't\nproperly removed when they're no longer needed, they can create\na memory leak.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:782>\n", "text": "A memory leak, which is a condition in which a program\ndoesn't release memory that it has allocated, can lead to a\nprogram becoming slower over time \u2014 or even crashing.\nFinding the value of\ndefaultMaxListeners\nTo help you detect and resolve memory leaks, Node.js tracks the\nnumber of listeners attached to an event emitter. The default\nmaximum number of listeners for any emitter is stored in the\nproperty.\nEventEmitter.defaultMaxListeners\nFollow these steps to check the value of :\ndefaultMaxListeners\n1. Open a terminal and start the Node.js REPL.\n2. Import the events modules into the REPL:\nconst events = require('events');\n3. Check the value of the property of\ndefaultMaxListeners\nthe class by entering the following line\nEventEmitter\ninto the REPL:\nevents.EventEmitter.defaultMaxListeners\nYou'll see that the value of is 10.\ndefaultMaxListeners\nExceeding the maximum listeners\nfor an emitter\nTo find out the maximum number of listeners for an emitter, you\ncan call the method. If you register more than\ngetMaxListeners()\nten listeners for a particular event on an emitter, Node.js displays\na message in the console, warning you that there's a potential\nmemory leak.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:783>\n", "text": "Listing 6-6 shows a program that creates an emitter, outputs the\nmaximum number of listeners, and then registers 11 event\nemitters for the event.\nboing\nLISTING 6-6: Registering 11 Event\nListeners\nimport EventEmitter from 'events';\nclass Boing extends EventEmitter {}\nconst boing = new Boing();\nconsole.log(`maxListeners: ${boing.getMaxListeners()} (default)`);\nfor (let i = 0; i < 11; i++) {\nboing.on('boing', () => {\nconsole.log('boing');\n});\n}\nboing.emit('boing');\nThe output of the program in Listing 6-6 is shown in Figure 6-3.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:784>\n", "text": "FIGURE 6-3: Setting too many event listeners causes Node.js to display a\nwarning.\nA warning is different from an error, in that your program\ncontinues to run after a warning is displayed, whereas an\nerror has the potential to cause the program to halt (unless\nit's handled in your program).\nError and error handling are covered in Chapter 7 of Book\n7.\nIncreasing the maximum number\nof listeners\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:785>\n", "text": "If you need to register more than 10 listeners to an emitter, you\ncan use the method. The\nsetMaxListeners() setMaxListeners()\nmethod takes a number as its argument. For example, you can\nmodify the program from Listing 6-6 to allow 20 event listeners\nwithout displaying a warning, as shown in Listing 6-7.\nLISTING 6-7: Changing the Maximum\nNumber of Listeners\nimport EventEmitter from 'events';\nclass Boing extends EventEmitter {}\nconst boing = new Boing();\nconsole.log(`maxListeners: ${boing.getMaxListeners()} (default)`);\nboing.setMaxListeners(20);\nconsole.log(`maxListeners: ${boing.getMaxListeners()} (set to 11)`);\nfor (let i = 0; i < 11; i++) {\nboing.on('boing', () => {\nconsole.log('boing');\n});\n}\nboing.emit('boing');\nRemoving Listeners\nRemoving event listeners when you're done with them isn't\ntechnically required, but not removing listeners can make your\nprogram run slower over time. Listeners can be removed from an\nemitter either individually or all at one time.\nRemoving individual listeners\nTo remove an individual listener, use the\nremoveListener()\nmethod of the emitter. The method takes two\nremoveListener()\narguments: the event name and the listener to remove.\nYou can remove a listener by passing a reference to the function\nthat was originally set as the listener to the second parameter of\n, as shown in Listing 6-8.\nremoveListener()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:786>\n", "text": "LISTING 6-8: Removing an Event Listener\nimport EventEmitter from 'events';\nclass MyEmitter extends EventEmitter {}\nconst handleEvent = () => {\nconsole.log('an event occurred!');\n};\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event', handleEvent);\nmyEmitter.emit('event');\nmyEmitter.removeListener('event', handleEvent);\nmyEmitter.emit('event');\nWhen you run the preceding chunk of code, the first emitted\nevent is handled by the function. The event that's\nhandleEvent()\nemitted after the method is called isn't handled,\nremoveEvent()\nbecause there are no more listeners in the listeners array.\nRemoving all listeners\nIf you want to remove all listeners from an emitter, or remove all\nlisteners for a particular event, use . The\nremoveAllListeners()\nmethod can, optionally, take the name of\nremoveAllListeners()\nan event as an argument.\nListing 6-9 shows a program that adds three different listeners for\nthree different events and then removes them all.\nLISTING 6-9: Removing Event Listeners\nimport EventEmitter from 'events';\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter();\nmyEmitter.on('event1', () => {\nconsole.log('event1 occurred!');\n});\nmyEmitter.on('event2', () => {\nconsole.log('event2 occurred!');\n});\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:787>\n", "text": "myEmitter.on('event3', () => {\nconsole.log('event3 occurred!');\n});\nmyEmitter.emit('event1');\nmyEmitter.emit('event2');\nmyEmitter.emit('event3');\nmyEmitter.removeAllListeners();\nmyEmitter.emit('event1');\nmyEmitter.emit('event2');\nmyEmitter.emit('event3');\nEmitting Once\nWhen you register an event handler using or ,\non() addListener()\nthe event handler runs every time the event that is listened for is\nemitted. In some cases, you may want an event handler function\nto run only once. In those cases, you can use the method.\nonce()\nAn event listener that is set using is detached after firing\nonce()\nonce. In Listing 6-10, is used to log the date and time of\nonce()\nthe first request to a web server after it starts.\nLISTING 6-10: Logging the First Request\nimport http from 'http';\nconst server = http.createServer();\nserver.once('request', (req, res) => {\nconsole.log('First request received at ' + new Date());\nres.end('First request received');\n});\nserver.listen(3000, () => {\nconsole.log('Server running at http://localhost:3000/');\n});\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:788>\n", "text": "Chapter 7\nError Handling and Debugging\nIN THIS CHAPTER\nRecognizing the types of errors\nUsing error objects\nHandling and catching exceptions\nDebugging Node.js programs using the command line\nand Chrome\n\u201cThe most formidable weapon against errors of every kind is\nreason.\u201d\n\u2014THOMAS PAINE\nError handling is how you respond to and recover from error\nconditions in a program. In this chapter, I show you how to\nhandle errors in Node.js and how to find the sources of errors by\nusing debugging tools so that you can prevent them from\nhappening in the future.\nKnowing the Types of Errors\nNot all errors are the same. Some errors are expected and there's\nnot much that you, as the programmer, can do to prevent them.\nOther errors are the result of programmer errors. The two types\nof errors can be referred to as operational errors and programmer\nerrors.\nOperational errors\nOperational errors happen. How you deal with them determines\nwhether they crash your program, make it unusable, or cause a\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:789>\n", "text": "temporary hiccup. Operational errors include\nFailure of a remote resource (such as an API server)\nNetwork errors (such as a slow connection or DNS failure)\nInvalid user input\nHardware failures\nOperational errors need to be anticipated, measures can be taken\nto prevent them, and then error handling must be in place to\nprevent them from causing the program to fail.\nProgrammer errors\nProgrammer errors are the bugs in your program. Any useful\nprogram that's more than a couple of lines long will have bugs at\nsome point. Programmer errors range from the types of problems\nthat prevent a program from running (such as a typo) to more\nsubtle problems that cause sporadic problems, such as not\ncatching a rejected promise. Though typos are by far the most\ncommon programmer errors (and often the most frustrating to\ntrack down and fix), there are plenty of ways that a programmer\ncan make mistakes.\nThese are some common JavaScript and Node.js programmer\nerrors:\nPassing the wrong type of data to a function\nFailing to resolve a promise\nUsing the wrong address for a resource\nPassing the wrong headers or body data to a web API\nFailing to use or keywords correctly\nundefined null\nExpecting asynchronous code to run synchronously\nBlocking the event loop\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:790>\n", "text": "Unlike operational errors, bugs in your programs can be not only\nhandled but also found and fixed.\nUnderstanding Node.js's Error\nObject\nThe built-in object gives you information about an error.\nError\nBeyond the property that is populated with a\nerror.message\n(sometimes) helpful message when an error happens, the\nError\nobject also has a property named that shows you where an\nstack\nerror came from and a list of the function calls that preceded the\nerror.\nThe program shown in Listing 7-1 purposefully creates an error\nand then logs the values of , , and\nerror.name error.message\nto the console.\nerror.stack\nLISTING 7-1: Seeing Properties\nError\nfunction makeError(message) {\nconst error = new Error(message);\nerror.name = 'MyError';\nreturn error;\n}\nconst error = makeError('oops');\nconsole.log(error.name);\nconsole.log(error.message);\nconsole.log(error.stack);\nFigure 7-1 shows the result of running the program in Listing 7-1.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:791>\n", "text": "FIGURE 7-1: Viewing the error object's properties.\nReading error.stack\nEach line in the stack represents a stack frame. Each of these\nframes describes a function call within the code that led to the\nerror. The top frame in the stack is where the error happened. For\neach frame, the V8 engine attempts to display a name (such as a\nvariable name, a function name, or an object method name). If\nit's not possible for V8 to display a name, it displays only the\nlocation information. The location information is the value in\nparentheses at the end of each frame.\nReading a stack frame\nThe location of the frame starts with the path to the file\ncontaining the function, followed by the line number, a colon, and\nthe position on the line. For example, in the output shown in\nFigure 7-1, the error happened in Listing070701.js, on the second\nline, at the 15th position on that line. If you count lines and\npositions in Listing 7-1 (including the tab character and spaces),\nyou can see that 2:15 is where starts.\nnew Error(message);\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:792>\n", "text": "Exceptions versus Errors\nThe term exception is frequently used interchangeably with the\nterm error. However, the two have technically significant\ndifferences:\nAn error is something that you can't control and that generally\ncan't be handled in any other way than fixing whatever is\nwrong that caused the error.\nAn exception is an anomaly that can be anticipated and\nhandled.\nAn example of an error is the program crashing because of a\nsyntax error. An error is an instance of the object. Errors\nError\ncan be user-defined or one of the built-in error classes, which\ninclude , , , ,\nReferenceError RangeError TypeError URIError\n, and .\nEvalError SyntaxError\nAn example of an exception is what happens when a network\nrequest fails. If the exception that's created (or thrown, as we\nsay) isn't handled, it's known as an uncaught exception, which is\nanother name for an error, and it causes your program to exit\nprematurely (or crash).\nHowever, if the exception is properly handled (or caught, as we\nsay), you can use the exception as an opportunity to prevent the\napplication from crashing or misbehaving \u2014 by displaying cached\ndata or displaying a message to the user to try again, for\nexample.\nHandling Exceptions\nAn error becomes an exception by being thrown. Thrown errors\nneed to be caught. For example, when a program makes an HTTP\nrequest using , it throws an error for a number of different\nfetch()\nreasons.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:793>\n", "text": "Listing 7-2 shows a function that throws an exception because the\nURL passed to doesn't exist.\nfetch()\nLISTING 7-2: A Function That Throws an\nError\nasync function getData(){\nreturn await fetch('https://nothinghere');\n}\ngetData();\nThe result of running Listing 7-2 is shown in Figure 7-2.\nFIGURE 7-2: An error because of an uncaught exception.\nTo catch the error that is thrown by the preceding\ngetData()\nfunction, wrap calls to it in a try / catch block, as shown in Listing\n7-3.\nLISTING 7-3: Catching a Thrown Exception\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:794>\n", "text": "async function getData(url) {\nreturn await fetch(url);\n}\nasync function main() {\ntry {\nconst response = await getData('https://nothinghere');\n} catch (error) {\nconsole.log('An Error has occurred');\n}\n}\nmain();\nCatching exceptions with promises\nBefore Node.js Version 15, rejected promises only caused\nwarnings. Because it's easier to find and debug problems that\ncause errors, the default behavior of Node.js is now to throw an\nexception when there's an uncaught promise rejection.\nCreating an uncaught Promise rejection\nListing 7-4 shows an example of a program that results in an\nuncaught promise rejection.\nLISTING 7-4: An Unhandled Promise\nRejection\nfunction getUserDetailsWithPromise(userId) {\nreturn new Promise(function (resolve, reject) {\nconst user = getUserById(userId);\nif (user) {\nresolve(user);\n} else {\nreject('User not found');\n}\n});\n}\nfunction getUserById(userId) {\nreturn null;\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:795>\n", "text": "getUserDetailsWithPromise(1).then(function (user) {\nconsole.log('User details with promise: ' + user.name);\n});\nThe function in the preceding listing always returns\ngetUserById()\n. However, if this were real code, it could just as easily do a\nnull\ndatabase lookup or an HTTP request that returned without finding\na user matching the argument passed to it.\nWhen you run the code in Listing 7-4, it results in the error shown\nin Figure 7-3.\nFIGURE 7-3: An error thrown because of an unhandled promise rejection.\nCatching a promise rejection\nTo catch a promise rejection, you need to add a block, as\ncatch()\nshown in Listing 7-5.\nLISTING 7-5: Catching Promise Rejections\nfunction getUserDetailsWithPromise(userId) {\nreturn new Promise(function (resolve, reject) {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:796>\n", "text": "const user = getUserById(userId);\nif (user) {\nresolve(user);\n} else {\nreject('User not found');\n}\n});\n}\nfunction getUserById(userId) {\nreturn null;\n}\ngetUserDetailsWithPromise(1)\n.then(function (user) {\nconsole.log('User details with promise: ' + user.name);\n})\n.catch(function (error) {\nconsole.log('Error: ' + error);\n});\nUsing finally()\nAfter a promise resolves or rejects, you can use the\nfinally()\nblock to perform any necessary clean-up. For example, the\nfollowing function, shown in Listing 7-6, attempts to fetch user\ndata. Before the function runs, the value of is set to\nisLoading\n. Whether the promise is rejected or resolved, the\ntrue finally()\nblock sets to .\nisLoading false\nLISTING 7-6: Using a Block\nfinally()\nconst getUserDetailsWithPromise = (userId) => {\nreturn new Promise((resolve, reject) => {\nconst user = getUserById(userId);\nif (user) {\nresolve(user);\n} else {\nreject('User not found');\n}\n});\n};\nconst getUserById = (userId) => {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:797>\n", "text": "return null;\n};\nlet isLoading = true;\ngetUserDetailsWithPromise(1)\n.then(function (user) {\nconsole.log('User details with promise: ' + user.name);\n})\n.catch(function (error) {\nconsole.log('Error: ' + error);\n})\n.finally(() => {\nisLoading = false;\nconsole.log('isLoading: ' + isLoading);\n});\nCatching exceptions with async\nfunctions\nAsync functions always return a Promise. Catching exceptions\nthrown in an async function works the same as with Promises, but\nwith a more synchronous-looking syntax, as shown in Listing 7-7.\nLISTING 7-7: Catching Exceptions with\nasync / await\nasync function getData(url) {\ntry {\nconst response = await fetch(url);\nconst data = await response.json();\nreturn data;\n} catch (error) {\nconsole.log(`An error has occurred.`);\n}\n}\nasync function main() {\nconst data = await getData('https://nothinghere/todos/1');\nconsole.log(data);\n}\nmain();\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:798>\n", "text": "Debugging Node.js Programs\nI tell you in Chapter 3 of Book 6 about debugging code that runs\nin the browser. Debugging programs that run in Node.js works\nsimilarly and can even be done with the help of Chrome's\ndebugging tools. In this section, I tell you about debugging your\nNode.js code using two different tools:\nThe built-in Node.js command-line debugger\nChrome's DevTools\nMany other tools are available for debugging Node.js\nprograms, including the debugger built into VS Code. Once\nyou're familiar with one debugging tool, you'll find that other\nones generally work in a similar way.\nBefore you can debug anything, you need a program to debug.\nListing 7-8 is a web application that sends an HTML form in\nresponse to GET requests at and\nhttp://localhost:3000/form\nreturns a confirmation message in response to POST requests to\n.\nhttp://localhost:3000/form\nI've also added several statements to this program\ndebugger\n(shown in bold type). This statement sets a breakpoint in the\ndebugger.\nA breakpoint is a place where execution of the code\npauses during debugging.\nLISTING 7-8: A Simple Web Application for\nLearning about Debugging\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:799>\n", "text": "import http from 'http';\nimport url from 'url';\nimport fs from 'fs';\nimport path from 'path';\nconst server = http.createServer((request, response) => {\nconst urlObj = url.parse(request.url);\nconst pathName = urlObj.pathname;\nconst method = request.method;\nif (pathName === '/form') {\nif (method === 'GET') {\nfs.readFile(path.join(process.cwd(), 'form.html'), (error, data) => {\nif (error) {\nresponse.statusCode = 500;\nresponse.statusMessage = 'Internal Server Error';\nresponse.end();\n} else {\nresponse.statusCode = 200;\nresponse.statusMessage = 'OK';\nresponse.setHeader('Content-Type', 'text/html');\ndebugger;\nresponse.end(data);\n}\n});\n} else if (method === 'POST') {\nlet data = '';\nrequest.on('data', (chunk) => {\ndata += chunk;\ndebugger;\n});\nrequest.on('end', () => {\nconst params = new URLSearchParams(data);\nconst name = params.get('name');\nconst email = params.get('email');\nconst comments = params.get('comments');\nresponse.statusCode = 200;\nresponse.statusMessage = 'OK';\nresponse.setHeader('Content-Type', 'text/html');\ndebugger;\nresponse.write(\n`<html><body><h1>Thank you, ${name}.</h1><p>Your post has been\nreceived.</p>\n<p>Name: ${name}</p>\n<p>Email: ${email}</p>\n<p>Comments: ${comments}</p></body></html>`\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:800>\n", "text": ");\ndebugger;\nresponse.end();\n});\n}\n} else {\nresponse.statusCode = 404;\nresponse.statusMessage = 'Not Found';\nresponse.end();\n}\n});\nserver.listen(3000, () => {\nconsole.log('Server listening on port 3000');\n});\nTo use this application, create an HTML form like the one shown\nin Listing 7-9 and save it as in the same directory as\nform.html\nthe application.\nLISTING 7-9: An HTML Contact Form for\nTesting the Application Server\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\"/>\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n<title>Please enter the info</title>\n<style>\nbody {\nfont-family: Arial, Helvetica, sans-serif;\n}\nform {\nwidth: 400px;\nmargin: 0 auto;\n}\nlabel,\ninput {\ndisplay: block;\nmargin-bottom: 5px;\n}\ninput[type='submit'] {\nmargin-top: 10px;\n}\n</style>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:801>\n", "text": "</head>\n<body>\n<div id=\"container\">\n<form action=\"/form\" method=\"post\">\n<label for=\"name\">Name:</label>\n<input type=\"text\" name=\"name\" id=\"name\"/>\n<label for=\"email\">Email:</label>\n<input type=\"text\" name=\"email\" id=\"email\"/>\n<label for=\"comments\">Comments:</label>\n<textarea name=\"comments\" id=\"comments\" cols=\"30\" rows=\"10\">\n</textarea>\n<input type=\"submit\" name=\"submit\" value=\"Send\"/>\n</form>\n</div>\n</body>\n</html>\nWhen you run the application server and visit\nwith a web browser, you see the form\nhttp://localhost:3000\nshown in Figure 7-4.\nFIGURE 7-4: The HTML form in a browser.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:802>\n", "text": "Filling out the form and submitting it causes the server to return a\nconfirmation page containing the data that was sent in the HTTP\nPOST from the browser, as shown in Figure 7-5.\nFIGURE 7-5: The returned confirmation page from the server.\nUsing the command-line debugger\nNode.js includes a simple command-line debugging utility that\nyou can use to step through and inspect a program. The\ncommand-line debugger isn't as full-featured as other debugging\ntools, as you can see later in this chapter.\nFollow these steps to get started with the command-line\ndebugger:\n1. Start Node.js with the argument.\ninspect\nFor example, if you save the program from Listing 7-8 as\n, you can start the debugger with the following\nappServer.js\ncommand:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:803>\n", "text": "node inspect appServer\nThe debugger starts and pauses on the first statement, as\nshown in Figure 7-6.\nFIGURE 7-6: The debugger starts and breaks at the first statement.\n2. At the debug prompt that appears when the program\npauses, enter help to see all possible commands, as\nshown in Figure 7-7.\n3. Enter next or just n to move to the next executable\nstatement.\nThe debugger pauses at the creation of the constant.\nserver\n4. Press Enter to move to the next statement.\nPressing Enter without a command repeats the previous\ncommand.\n5. Press Enter again several more times.\nThe debugger pauses at the function call and\nserver.listen()\nthen shows you each statement that runs as part of\n.\nserver.listen()\n6. Continue pressing Enter until the server writes 'Server\nlistening on port 3000' to the console.\n7. Press Enter one more time and you see a message that\nthe operation ( ) can be performed only while the\nnext\ndebugger is paused.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:804>\n", "text": "At this point, the server is ready.\nFIGURE 7-7: Viewing the debugger's Help information.\n8. Go to http://localhost:3000 in your browser and then\nreturn to the terminal window, where the debugger is\nrunning.\nThe debugger should be paused again, just before the\nstatement that returns the HTML form to the\nresponse.end()\nbrowser.\n9. Press Enter twice more.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:805>\n", "text": "If you return to your browser now, you see that the HTML\nform has appeared in response to your request.\nPausing at every executable statement can become tedious,\nand you could continue stepping through all the code that\nmakes an HTTP server work in Node.js. You can streamline the\ncommand-line debugger by setting an environment variable.\n10. Press Ctrl+C twice to exit the debugger.\n11. Create a file named .env in the same directory as your\nprogram.\n12. Add the following code to your .env file:\nNODE_INSPECT_RESUME_ON_START = 1\n13. Install the dotenv module.\nnpm install dotenv --save\n14. Import dotenv into your program file, and load the\n.env file by adding the following two lines:\nimport * as dotenv from 'dotenv';\ndotenv.config();\n15. Start the program with the debugger.\nnode inspect Listing070708\nThe debugger starts again, and the server is created and\nstarts listening.\n16. Go to http://localhost:3000/form in your browser.\nThe debugger pauses after is called.\nresponse.setHeader()\n17. Enter watch('response') to tell the debugger to watch the\nvalue of the response object.\n18. Enter watchers to see the current watchers that have\nbeen set.\nThere should be just one, for the response object. The\ndebugger outputs the beginning of the response object.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:806>\n", "text": "19. Enter repl to go to a command line, where you can\nexecute statements.\nThe prompt in the terminal changes from to .\ndebug> >\n20. Enter console.dir(response) to print the entire response\nobject.\nLook over the properties of response.\n21. When you're done looking at the response object,\npress Ctrl+C to return to the debugger.\n22. If you look at your browser now, you see that it still\nhasn't loaded (or reloaded) the form. Enter n to\nadvance to the next breakpoint.\nNotice that the value of your watcher is displayed above the\ncode listing showing where the debugger paused. If you want\nto check the value of the response header at this point, you\ncan return to the REPL and log the response object, or you\ncan set a more specific watcher, which is what I show you how\nto do in Step 19.\n23. Enter watch('response._header').\n24. Enter n to pause at the next statement, and you can\nsee that the header has been set, as shown in Figure\n7-8.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:807>\n", "text": "FIGURE 7-8: Watching the watchers.\nDebugging in Chrome DevTools\nThe command-line debugger is useful for debugging code that's\non a different network than your development machine. It's good\nto know that it's always available, but it's not the greatest user\nexperience. To step up to the next level, you can use a graphical\ndebug client, such as the one built into the Chrome browser.\nFollow these steps to start debugging a Node.js app using\nChrome:\n1. Start your program using the flag:\n--inspect\nnode --inspect Listing070707\nThe debugger starts and displays a message that it's listening\non Port 9229, as shown in Figure 7-9.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:808>\n", "text": "Notice the before the URL in Figure 7-9 \u2014 this is\nws://\nthe protocol name for a WebSocket connection. WebSocket,\nlike HTTP, is a client-server communication protocol.\nWebSocket creates a bidirectional connection between the\nclient and server: Clients can send data to the server, and the\nserver can send data to the client. HTTP, on the other hand, is\nunidirectional: Communication between a server and client\nmust start with the client requesting a resource from the\nserver. WebSocket is useful for situations in which you need to\ntransmit real-time data or a continuous stream of data over a\nnetwork.\nFIGURE 7-9: Starting the debugger.\n2. Open your Chrome browser and type the following into\nthe address bar:\nchrome://inspect/\nYou see the Inspect interface, as shown in Figure 7-10.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:809>\n", "text": "FIGURE 7-10: The Chrome DevTools Inspect interface.\n3. Look for the name of the file you started in the\ndebugger under the Remote Target header in the\nInspect window and click on it.\nThe Chrome DevTools debugging window opens, as shown in\nFigure 7-11.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:810>\n", "text": "FIGURE 7-11: The Chrome DevTools Inspect interface.\nAdding a workspace\nThe left pane of the DevTools Inspect interface is where you can\nopen the folder containing the files you're debugging. Adding files\nto the workspace allows you to set breakpoints and edit the files\nand see changes reflected immediately. After you complete the\nsteps in the preceding step list, follow these steps to add your\nfiles to the workspace:\n1. Click the Add Folder to Workspace link and select the\nfolder containing the program you're debugging.\nA message appears at the top of the DevTools interface,\nasking for permission to access the directory.\n2. Click Allow to allow DevTools to access your files.\nThe folder you added to the workspace shows up, as shown in\nFigure 7-12.\nNotice that the program that's running has a green dot next to\nits filename.\nSetting breakpoints\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:811>\n", "text": "The DevTool inspector pauses on the breakpoints you set using\nstatements. You can also click on line numbers next to\ndebugger\nstatements in your code to set additional breakpoints.\nFIGURE 7-12: Your files have been added to the workspace.\nFollow these steps to open your program and see and set\nbreakpoints:\n1. Click the running file to open it in the code pane.\n2. Go to http://localhost:3000/form in your browser.\nThe debugger pauses at the first statement in the\ndebugger\nprogram, as shown in Figure 7-13.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:812>\n", "text": "FIGURE 7-13: The paused debugger.\n3. Set another breakpoint on the next line of code by\nclicking on the line number.\n4. Press F8 or click the forward-arrow (Resume Script\nOperation) button at the top of the right column of the\nDevTools interface to go to the next breakpoint.\n5. Inspect the local variables and the closures in the pane\non the right.\nYou see the data variable under Local, which is the variable\ncreated by the function that was passed to the\nreadFile()\ncallback function.\nUnder the Closure heading, you see the response object,\nwhich was passed by the method to its\nhttp.createServer()\ncallback function.\nA closure is an inner function that has access to the state\nof its containing function.\nSetting a watch expression\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:813>\n", "text": "A watch expression is a JavaScript expression you can set in the\ndebugger that is reevaluated every time the debugger pauses.\nHere's how to set a watch expression to see the current value of\nthe data variable when the debugger pauses:\n1. Look for the property in the Local variables on the\ndata\nright side of the Debugger, and notice that it's a Buffer\nobject.\n2. Click the word Watch on the right side of the debugger\nto expand it if it's not already expanded.\n3. Click the plus sign (+) next to Watch, and add\ndata.toString() as a watch expression.\nThe converted value of data appears.\nWhen you press F8 or click the forward arrow to unpause the\ndebugger, execution of the program exits the function containing\nthe variable. The watch expression you set reflects this by\ndata\ndisplaying that is not available.\ndata.toString()\nSetting log points\nWhile debugging, you can create log points, which log the result\nof an expression to the console. Here's how to set a log point to\noutput the value of data to the console after the file is read by\n:\nfs.readFile()\n1. Right-click on Line 14 of the program, which should be\nthe statement inside the callback\nif() fs.readFile()\nfunction.\n2. Choose the Add Logpoint command from the menu\nthat appears.\nA box appears on that line, where you can add a log message.\nFor example, to print the value of data, enter something like\nthis:\n'data: ',data.toString()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:814>\n", "text": "3. Press Enter to save the log point.\nThe line number is highlighted, and a new breakpoint appears\nin the list of breakpoints on the right.\n4. Refresh your browser window to reload\n.\nhttp://localhost:3000/form\n5. Look at the terminal window where you started the\ndebugger, and you can see the contents of the HTML\nform that the server sends as its response.\nLearning more about Chrome's DevTools\nInspect interface\nNow that you know the basics of how to debug a Node.js\nprogram using Chrome, spend some time playing around with it.\nTry introducing a bug into your program, or do something that\ncauses an exception, such as renaming the HTML file that\nwill attempt to load.\nfs.readFile()\nWhen you're ready to read more about Chrome's built-in\ndebugger, visit .\nhttps://developer.chrome.com/docs/devtools\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:815>\n", "text": "Chapter 8\nAccessing Databases\nIN THIS CHAPTER\nStarting out with MongoDB\nUsing the MongoDB shell\nUsing MongoDB from Node.js\n\u201cIf there can be three certain things in life, instead of two, it\nmight be death, taxes, and data.\u201d\n\u2014CLARA SHIH\nConnecting to databases from Node.js gives your programs the\nability to access and store large amounts of persistent data. Most\nserver-side programs make use of some kind of database. These\nare some uses for server-side databases:\nStoring user login information and user profiles\nStoring content for dynamically generating web pages\nKeeping track of user session information\nStoring ecommerce product and order information\nIn this chapter, I show you how to work with one of the most\ncommonly used databases for server-side applications: MongoDB.\nGetting Started with\nMongoDB\nThe job of any database is to store data in some organized way\nand make it possible to retrieve that data. One way to classify\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:816>\n", "text": "different types of databases is by how they store data (and how\nyou get that data out of the database). Most databases fall into\none of these two broad categories:\nRelational databases: Relational databases (such as MySQL\nand Microsoft SQL Server) store data in tables (which\nresemble Excel spreadsheets). To communicate with a\nrelational database, you use Structured Query Language\n(SQL).\nNoSQL databases: NoSQL databases, as the name implies,\nstore data without using SQL. There are several different types\nof NoSQL databases, which are named according to how they\nstore data. Types of NoSQL databases include document, key-\nvalue, wide-column, and graph.\nMongoDB is a document database. When data is saved in\nMongoDB, it's saved as documents that are similar to JSON\nobjects. One of the great benefits of using MongoDB with Node.js\nis that the format in which you store data can easily be converted\nto JavaScript objects, and JavaScript objects can easily be\nconverted to JSON for storage in MongoDB.\nDiscerning between relational and\nNoSQL databases\nThe use of relational databases dates back to the 1970s, and the\nideas behind them go back much further than that. Most of the\nlarge commercial databases that have been created in the past 50\nyears \u2014 such as Oracle, Db2, and Informix \u2014 are relational\ndatabases.\nTable 8-1 shows a table of sample data stored in a relational\ndatabase.\nTABLE 8-1 A Relational Database Table\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:817>\n", "text": "id firstName lastName Address city state zip\n1 Carmen Jones 715 Werniger Street Houston TX 77032\n2 Albert Jones 4078 Oak Lane Moberly MO 65270\n3 Gregory Gregg 3875 Heavner Avenue Adairsville GA 30103\nIn a relational database, each piece of data (such as firstName or\nlastName) has its own column, and each row represents a set of\nrelated data (which is also known as a record).\nWhen you create a relational database, you must specify each\npiece of data (column) that you want to store for each record.\nWhen a new record is created (such as when a new person is\nadded to the table shown in Table 8-1), that record stores\nsomething \u2014 even if it's just a null value \u2014 for each column.\nIt's common in relational databases to have fields in a table that\naren't used by every record. For example, a table that stores\ncontact information needs to have a way to store apartment\nnumbers, even though not everyone's address has an apartment\nnumber. The data you can store in a table is limited by the fields\nthat the table has. We call this structured data.\nNoSQL databases store unstructured data. Listing 8-1 shows the\nsame data as Table 8-1, but in JSON format, as it would be stored\nin MongoDB.\nLISTING 8-1: A JSON Document\n[\n{\n\"id\": 1,\n\"firstName\": \"Carmen\",\n\"lastName\": \"Jones\",\n\"address\": \"715 Werniger Street\",\n\"city\": \"Houston\",\n\"state\": \"TX\",\n\"zip\": \"77002\"\n},\n{\n\"id\": 2,\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:818>\n", "text": "\"firstName\": \"Albert\",\n\"lastName\": \"Jones\",\n\"address\": \"4078 Oak Lane\",\n\"city\": \"Moberly\",\n\"state\": \"MO\",\n\"zip\": \"65270\"\n},\n{\n\"id\": 3,\n\"firstName\": \"Gregory\",\n\"lastName\": \"Gregg\",\n\"address\": \"1234 Main Street\",\n\"city\": \"Adairsville\",\n\"state\": \"GA\",\n\"zip\": \"30103\"\n}\n]\nUnlike with relational databases, document databases don't need\nto conform to a strict structure. Storing data as JSON documents\nis flexible.\nInstead of columns, documents have fields. Whereas the columns\nin a relational database table are fixed and must be changed for\nevery row in the table, the fields in a document are flexible and\ncan be added or omitted as necessary. For example, if one of the\ncontacts in the JSON data shown in Listing 8-1, has an apartment\nnumber, that element in the JSON array can have an additional\nproperty for that information without all the other records needing\nto have a blank apartment number.\nData types in relational databases\nSQL databases were invented in a time when data storage was\nexpensive. As a result, databases are focused on reducing data\nduplication. When you create a table in a relational database, you\nspecify the type and (usually) the maximum size of the data that\neach column will hold. For example, the firstName column will\nhold strings, the birthDate column will hold dates, and the phone\nnumber might hold a number of as many as 10 digits. But several\ncountries (including French Guiana and Guadeloupe) use 12-digit\nphone numbers. Trying to store a 12-digit phone number in a\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:819>\n", "text": "column that's set to a maximum length of 10 digits causes an\nerror, or else the data is truncated (as anyone named Christopher\nknows, because those folks often have to deal with being called\n\u201cChristophe\u201d by customer service representatives \u2014 don\u2019t ask me\nhow I know).\nData types in NoSQL databases\nIn a document database, such as MongoDB, field types and\nlengths are flexible. If it's possible for a user to have more than\none phone number, you don't add a new field in a document\ndatabase (or in a related table) \u2014 you store phone numbers as an\narray.\nStoring data as JSON objects is more verbose than storing it in\ntables, but document databases (which first gained widespread\nuse in the early 21st century) aren't as concerned with eliminating\nduplication and minimizing storage space \u2014 because storage is far\nless expensive today, and it keeps getting less expensive.\nA 10MB hard drive cost $2,500 in 1982. Forty years later,\nin 2022, a 4TB hard drive costs $70. So, for about 1/100th of\nthe price, you could store 40,000 times as much data in 2022\nas in 1982. These numbers are nothing compared to the\ncost-versus-capacity comparison that you have when you\u2019re\nreading this paragraph. Clearly, optimizing for storage space\nshould no longer be the primary concern when designing a\ndatabase.\nInstalling MongoDB\nMongoDB is available in two editions: the open source Community\nedition and the Enterprise edition. In this book, you install the\nCommunity edition. It can be installed on Windows, Linux, or\nmacOS.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:820>\n", "text": "Installing a database server isn't generally a simple process, so\nI've tried to be as detailed with my instructions as possible in the\nfollowing sections. If you get lost or something doesn't work as\nexpected, try it again or carefully follow the latest instructions at\n.\nhttps://mongodb.com/docs/manual/installation\nInstalling MongoDB on Windows\nFollow these steps to install MongoDB on Windows:\n1. Go to the MongoDB download page:\nhttps://www.mongodb.com/try/download/community\n2. Select the most recent version from the Version\ndropdown menu, select Windows under Platform, and\nselect the msi under the Package dropdown menu, as\nshown in Figure 8-1.\nFIGURE 8-1: The MongoDB download page.\n3. Click Download to start the download.\n4. Open the .msi file to run the installer.\n5. At the Choose Setup Type step of the installation\n(which is shown in Figure 8-2), click the link to\ndownload the mongo shell.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:821>\n", "text": "A browser window opens and the mongo shell download page\nloads.\nFIGURE 8-2: Choosing the setup type.\n6. Select the Windows MSI from the Platform dropdown\nmenu, and download the mongo shell.\nMake sure that you selected the MSI version. Some of the\nfollowing steps won't work correctly if you use the .exe version\nof MongoDB Shell.\n7. Return to the MongoDB installer and click Complete on\nthe Choose Setup Type screen.\n8. On the next screen, shown in Figure 8-3, select the\ncheck box next to Install MongoD as a Service, and\nthen select Run Service as Network Service User.\n(These should be the default settings.) You can leave\nthe data and log directory settings set to their defaults\nand then click Next.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:822>\n", "text": "9. On the next screen, leave the check box to install\nMongoDB Compass selected and then click Next.\n10. Click Install.\n11. When Windows asks you whether you want to allow\nthe installer to make changes to your device, click Yes,\nas shown in Figure 8-4.\nWhen the installation finishes, Compass starts up\nautomatically.\nFIGURE 8-3: Configuring MongoDB as a service.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:823>\n", "text": "FIGURE 8-4: Allow the installer program to make changes.\nCompass is a graphical user interface for working with\nMongoDB. I don\u2019t tell you how to use Compass in this chapter,\nbut if you want to try it out, you can find instructions for using\nit at .\nhttps://mongodb.com/docs/compass/current\n12. Find the zip file for installing MongoDB shell in your\nfolder.\nDownloads\nIf you didn't download the MongoDB shell in Step 6, you can\ngo to and download\nhttps://mongodb.com/try/download/shell\nit now.\n13. Run the Mongo Shell msi file to install Mongo Shell.\nInstalling MongoDB on macOS\nFollow these steps to install MongoDB on macOS:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:824>\n", "text": "1. Install the Homebrew package manager, if you don't\nhave it already:\nYou can find instructions for installing Homebrew at\n. Installing Homebrew is simple: You'll need to\nhttps://brew.sh\ncopy the installation script from the Homebrew homepage and\npaste it into Terminal.\n2. Install the xcode command-line tools, if you don't\nalready have them, by entering the following command\ninto your terminal:\nxcode-select --install\nInstalling xcode or the xcode command-line tools is simple,\nbut may take a long time. This might be a good time to take\nyourself and/or your dog for a walk. You'll thank me later, or\nmaybe your dog will.\n3. Add the MongoDB Homebrew Tap by running the\nfollowing command in your terminal:\nbrew tap mongodb/brew\n4. Update Homebrew to make sure you have the latest\nversions of its \"formulae:\"\nbrew update\n5. Download and install MongoDB:\nbrew install mongodb-community\nInstalling MongoDB on Linux\nThe process for installing MongoDB on Linux varies based on the\ndistribution of Linux you run. You can find detailed instructions for\ninstalling on Linux at\nhttps://www.mongodb.com/docs/manual/administration/install-\n.\non-linux\nStarting MongoDB\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:825>\n", "text": "Before you can use MongoDB from Node.js, it has to be running.\nHere's how to start MongoDB. The program that makes MongoDB\navailable to other programs on your computer (or on the network)\nis called MongoD.\nStarting MongoDB on Windows\nIf you installed MongoD as a service, it should already be started.\nYou can confirm that everything is properly installed by opening a\nterminal window and entering the following command:\nmongosh\nThis starts up the MongoDB shell. If it starts successfully, you see\nsome information appear on your terminal, followed by the\ntest>\nprompt. In the upcoming \u201cUsing Mongosh\u201d section, I show you\nhow to use the mongo shell.\nStarting MongoDB on macOS\nIf you installed MongoDB using Homebrew, you can use\nHomebrew to start and stop it. To start MongoD with Homebrew\nin macOS, enter the following command:\nbrew services start mongodb-community\nIf everything is installed correctly, you should see a message\ntelling you that it was successfully started. To confirm that\neverything is properly installed and running, enter the following\ncommand into a terminal:\nmongosh\nThis command starts the MongoDB shell, which I tell you about in\nthe next section.\nUsing Mongosh\nThe MongoDB shell allows you to execute commands on a\nMongoDB server from the command line. To start Mongosh and\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:826>\n", "text": "connect to the MongoDB server on your computer, just enter\nmongosh into a terminal.\nConnecting to MongoDB and\ncreating a database\nTo connect to a remote MongoDB server that you have access to,\nyou can use the -host and -port flags while starting Mongosh, like\nthis:\nmongosh -host mongouser@mongo.example.com -port 27017\nPort 27017 is the default port number for MongoDB.\nFollow these steps to try out Mongosh and learn more about\nMongoDB:\n1. Make sure that MongoDB is running by following the\ninstructions in the earlier section \u201cStarting MongoDB.\u201d\n2. Enter mongosh into a terminal window.\nThe Mongosh prompt appears.\n3. Enter help to see the commands that are available in\nthe shell.\n4. Enter show dbs to see the current list of available\ndatabases.\nWith a new installation of MongoDB, you see three databases:\nadmin, config, and local.\n5. Enter use mydb to create a new database named mydb\nand switch it to the active database in the shell.\n6. Enter show collections.\nCollections are where MongoDB stores documents. Since this\nis a new database, you won't have any collections yet.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:827>\n", "text": "A database holds one or more collections. A collection\nholds one or more documents. Documents have one or more\nfields.\nCreating a collection\nCreating a new collection and storing something in it can be done\nin one step:\n1. To create a new collection, just store some data. If the\ncollection doesn't already exist, it is created.\nFor example, enter the following command:\ndb.users.insertOne( { name : 'Chris Minnick' } )\nA document containing the field you specified (name) is\ninserted into the collection. If everything works correctly, you\nsee a confirmation message, as shown in Figure 8-5.\nMaking an id and listing\ndocuments\nWhen you add documents to a collection, MongoDB automatically\ncreates a field named and assigns it a unique value. The\n_id _id\nfield is set to a 12-byte that can be used to uniquely\nObjectId\nidentify the document. Use the following command to show all\ndocuments in your collection:\ndb.users.find()\nMongoDB responds with all documents in the specified collection,\nas shown in Figure 8-6.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:828>\n", "text": "FIGURE 8-5: Creating your first collection.\nFIGURE 8-6: Viewing the documents in a collection.\nFinding documents\nYou can use the method to find individual\ndb.collection.find()\ndocuments or documents that match a query. To query a\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:829>\n", "text": "collection using , pass a filter object to it as\ndb.collection.find()\nan argument.\nA filter object is a JavaScript or JSON object that specifies the\ndata to match in documents. For example, if you want to find all\nthe people in a collection who live in New York, you might\nusers\nuse the following command:\ndb.users.find({ \"state\" : \"NY\" })\nThe difference between a JSON object and a JavaScript\nobject is that property names in JSON are always in quotes.\nReturning fewer fields\nTo return only certain fields from documents, you can pass an\nobject containing the names of the fields to return as properties\nwith a value of 1 for each field to return. For example, to display\nonly the name and city fields, pass an object containing the name\nand city field names with values of 1 as the second argument to\n:\nfind()\ndb.users.find({ \"state\" : \"NY\" }, { name:1, city: 1} )\nWhen you run the preceding statement, the , name, and city\n_id\nfor all users in New York are returned. If you don't want to return\nthe field, pass it in the second argument with a value of :\n_id 0\ndb.users.find({\"state\" : \"NY\"}, {_id: 0, name:1, city: 1})\nNote that the field is the only one that's automatically\n_id\nreturned by , so it's the only one where it's possible or\nfind()\nnecessary to pass a value of 0. To omit fields other than _id from\nthe returned data, just don't include them in the fields object.\nSorting lists\nYou can sort the results returned by by chaining to\nfind() find()\na method. The method takes an object containing\nsort() sort()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:830>\n", "text": "the field you want to sort by and a value of either 1 (to sort in\nascending order) or \u20131 (to sort in descending order).\nFor example, to return a list of users in alphabetical order by their\nnames, you can use the following statement:\ndb.users.find().sort({\"name\":1})\nLimiting lists\nTo limit the number of results that are returned, chain the\nfind()\nmethod to the method. For example, to return a\nlimit()\nmaximum of ten documents from the users table, use the\nfollowing statement:\ndb.users.find().limit(10)\nMaking complex queries using operators\nYou're not limited to querying based only on exact matches, of\ncourse. To create more complex queries, you can pass an object\nas the value of the field you're querying, and this object can use\noperators.\nOperators in MongoDB start with the dollar sign ($) character. For\nexample, the long form of querying the users collection for users\nwhere the state is \"NY\" looks like this:\ndb.users.find({\"state\":{ $eq: \"NY\"}})\nThese are some of the operators you can use while querying:\nMatches documents where the value of the field equals\n$eq:\nthe specified value\nMatches documents where the value of the field doesn't\n$ne:\nmatch the specified value\nMatches documents where the value of the field is\n$gt:\ngreater than the specified value\nMatches documents where the value of the field is less\n$lt:\nthan the specified value\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:831>\n", "text": "Matches documents where the value of the field is\n$gte:\ngreater than or equal to the specified value\nMatches documents where the value of the field is less\n$lte:\nthan or equal to the specified value\nSpecifies an array of values to match\n$in:\nSpecifies an array of values to exclude\n$nin:\nReturns documents that have the specified field\n$exists:\nYou can also specify multiple operators in the query value object\nand they will be executed like they're connected by an AND\noperator. For example, to return users who are between the ages\nof 35 and 55, you can use the following statement:\ndb.users.find({\"age\": { $gte: 35, $lte: 55 }})\nAnother way to do an AND query is to use the operator. The\n$and\noperator takes an array of queries. Here's how you can\n$and\nrewrite the preceding query using :\n$and\ndb.users.find({ $and: [{ age: {$gte: 35}},\n{ age: {$lte: 55}}]})\nThere is also a operator, which can be used to specify multiple\n$or\nqueries where only one of them needs to be true and a\n$not\noperator that will negate the query you use as its value.\nLearning MongoDB Shell\ncommands\nOnce I show you how to use the MongoDB Shell, you'll find that\nit's often the quickest way to complete simple operations, such as\ncreating a collection or deleting a collection. Table 8-2 lists the\nmost commonly used MongoDB Shell commands.\nTABLE 8-2 Common MongoDB Shell Commands\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:832>\n", "text": "What It\nCommand Example\nDoes\nLists the\ndatabases\nshow dbs show dbs\non the\nserver\nSwitches\nto the\nuse db use mydata\nspecified\ndatabase\nLists the\nusers for\nshow users the show users\ncurrent\ndatabase\nLists the\nuser roles\nshow roles for the show roles\ncurrent\ndatabase\nReferences\nthe\ndb db\ncurrent\ndatabase\nInserts a\ndocument\ninto a\ncollection,\ncreating db.products.insertOne({ 'productName'\ndb.collection.insertOne()\nthe : 'duct tape' , 'price' : 5.99 })\ncollection\nif it\ndoesn't\nexist\ndb.collection.find() Returns all db.products.find({ 'price' : 5.99 })\ndocuments\nfrom a\ncollection\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:833>\n", "text": "What It\nCommand Example\nDoes\n(if no\nargument\nis passed)\nor queries\nthe\ncollection\nand finds\nmatching\ndocuments\nInserts\nmultiple db.products.insertMany(\ndb.collection.insertMany() documents [{\"productName\" : \"bolt\" } , {\ninto the \"productName\" : \"hammer\" }])\ncollection\nDeletes a\ndb.products.deleteOne({\"_id\" :\ndocument\ndb.collection.deleteOne() ObjectId(\"343234a64a3d3423c2395fa\")\nfrom the\n})\ndatabase\nDeletes\nmultiple\ndb.products.deleteMany({ \"outOfStock\"\ndb.collection.deleteMany() documents\n: true})\nfrom a\ndatabase\nUpdates a\ndb.products.updateOne( {\"name\" :\ndocument\ndb.collection.updateOne() \"hammer\" } , { $set : { \"price\" : 10 }\nin the\n})\ncollection\nUpdates\nmultiple\ndb.products.updateMany( {\"price\" : 5 }\ndb.collection.updateMany() documents\n, { $set : { \"price\" : 4.99 } })\nin the\ncollection\nDeletes a\ndb.collection.drop() db.products.drop()\ncollection\nDeletes a\ndb.dropDatabase() db.dropDatabase()\ndatabase\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:834>\n", "text": "What It\nCommand Example\nDoes\nClears the\ncls shell cls\nwindow\nExits the\nexit mongo exit\nshell\nWorking with users and roles\nYour MongoDB database has no users currently. You can verify\nthis by entering show users into the mongo shell. It should\nreturn an empty array.\nHaving at least one user who has access to your database is\nnecessary to be able to connect to it securely from another\nprogram (such as Node.js). Users have roles, which determine\nwhat they're able to do with the database.\nSeveral roles are built into MongoDB, including the \"read\" role,\nthe \"readWrite\" role, and the \"dbAdmin\" role. To view a list of the\nroles that can be assigned to users, enter show roles. The roles\nthat are important for being able to access a MongoDB from\nNode.js are read and readWrite.\nTo create a new user and assign them roles, you can pass a\nusername, a password, and a list of roles to .\ndb.createUser()\nMongoDB supports several different types of authentication, but\nfor simplicity, use username/password.\nLEARNING MORE ABOUT MongoDB\nI don't have enough space in this book to explain everything that can be done\nwith MongoDB, but what I cover here is enough to get you started with most\nof the operations you need in order to use MongoDB databases in Node.js. To\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:835>\n", "text": "read more about MongoDB, visit\nhttps://www.mongodb.com/docs/manual/tutorial/getting-started.\nCreate a user for the mydb database using the following\ncommand:\ndb.createUser({ user: \"mydbUser\", pwd: passwordPrompt(),\nroles: [{ role: \"readWrite\", db: \"mydb\"}]})\nThe method causes Mongosh to ask you for a\npasswordPrompt()\npassword for the user. After you enter a password, your new user\nis created. If you run show users now, you see your new user\nlisted, as shown in Figure 8-7.\nFIGURE 8-7: Seeing your new user.\nUsing MongoDB from Node.js\nTo connect to and use a MongoDB database in Node.js, you need\nthese three items:\nMongoDB server\nMongoDB Node.js driver\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:836>\n", "text": "Connection string\nInstalling the Node.js driver\nSince you already have the MongoDB server, follow these steps to\ncreate a new Node.js package and install the Node.js driver:\n1. Make a new project or a new folder in VS Code named\ndb-app.\n2. Initialize a new Node.js package in db-app by entering\nthe following line:\nnpm init -y\nUsing the flag causes to accept all the\n-y npm init\ndefault settings rather than prompting you for values for each\nsetting.\n3. Open package.json and add \"type\":\"module\" to it so that\nyou can use ES Modules in this project.\n4. Enter npm install mongodb --save into the terminal to\ninstall the mongodb driver.\nConnecting to a MongoDB server\nThe Node.js driver includes a MongoClient class that contains\nmethods for working with MongoDB. Here's how to create an\ninstance of MongoClient and use it to connect to your server:\n1. Create a new file named dbtest.js.\n2. Import MongoClient from the mongodb library:\nimport {MongoClient} from 'mongodb';\n3. Make a new file named db-config.js, containing the code\nfrom Listing 8-2.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:837>\n", "text": "On Windows, using as the host name may produce\nlocalhost\nan error. If it does for you, change to\nlocalhost:27017\nin Listing 8-2.\n0.0.0.0:27017\n4. Import into and deconstruct it:\ndbConfig dbtest.js\nimport { dbConfig } from './db-config.js';\nconst { url } = dbConfig;\n5. Create an instance of MongoClient and pass it the URL\nfor your server:\nconst client = new MongoClient(url);\n6. Use an async function to call the method of\nconnect()\nthe client, log a message, and then close the\nconnection:\nasync function app() {\ntry {\nawait client.connect();\nconsole.log('Connected to the server.');\n} catch (err) {\nconsole.log(err.stack);\n}\nclient.close()\n}\n7. Call the function:\napp()\napp();\nLISTING 8-2: Creating the Database\nConfiguration Object\nconst dbConfig = {\nurl: 'mongodb://localhost:27017',\ndbName: 'mydb',\n};\nexport { dbConfig };\nListing 8-3 shows what your file should look like at this\ndbtest.js\npoint.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:838>\n", "text": "LISTING 8-3: Connecting to a MongoDB\nServer\nimport { MongoClient } from 'mongodb';\nimport { dbConfig } from './db-config.js';\nconst { url } = dbConfig;\nconst client = new MongoClient(url);\nasync function app() {\ntry {\nawait client.connect();\nconsole.log('Connected to the server.');\n} catch (err) {\nconsole.log(err.stack);\n}\nclient.close()\n}\napp();\nIf everything is correct and your MongoDB server is running, you\nshould see in the terminal when you\nConnected to the server\nenter node dbtest.\nInserting documents into a\ncollection\nOnce you're connected to a server, you can use a database and\ninteract with it using methods that are like the ones you use to\ninteract with a database using mongo shell.\nFollow the next set of steps to connect to a database and\ndocument into a collection.\nIf you specify a database or collection that doesn't already\nexist on your server, MongoDB automatically creates it for\nyou.\n1. After the statement in , specify\nconsole.log() dbtest.js\nthe database to use by passing the variable\ndbName\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:839>\n", "text": "(defined in ) to :\ndb-config.js client.db()\nconst db = client.db(dbName);\n2. Specify the collection to use by passing the collection\nname (as a string) to :\ndb.collection()\nconst col = db.collection('people');\n3. Write an object to add to the collection.\npeople\nIt can be any valid JavaScript object, such as in this example:\nlet personDocument = {\nname: { first: 'Alan', last: 'Turing' },\nbirth: new Date(1912, 5, 23),\ndeath: new Date(1954, 5, 7),\ncontribs: ['Turing machine', 'Turing test', 'Turingery']\n};\n4. Use to the document into the\ncollection.insertOne()\ndatabase:\nawait col.insertOne(personDocument);\nListing 8-4 shows what your should look like now.\ndbtest.js\n5. Run .\ndbtest\nIf everything is correct, it outputs the\nConnected to the\nmessage and then inserts a document into the\nserver people\ncollection.\n6. Enter mongosh into the terminal to start the mongo\nshell.\n7. Switch to using the database (or whichever\nmydb\ndatabase you specified in ) by entering use\ndb-config.js\nmydb.\n8. Enter show collections to see the collections in the\ndatabase.\n9. List the documents in the collection by entering\npeople\nthe following command:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:840>\n", "text": "db.people.find()\nIf the document you specified in is listed,\ndbtest.js\ncongratulations! If not, make sure that your MongoDB server\nis running and return to to check your code\ndbtest.js\ncarefully.\nLISTING 8-4: Inserting a Document into a\nCollection\nimport { MongoClient } from 'mongodb';\nimport { dbConfig } from './db-config.js';\nconst { url, dbName } = dbConfig;\nconst client = new MongoClient(url);\nasync function app() {\ntry {\nawait client.connect();\nconsole.log('Connected to the server.');\nconst db = client.db(dbName);\nconst col = db.collection('people');\nlet personDocument = {\nname: { first: 'Alan', last: 'Turing' },\nbirth: new Date(1912, 5, 23),\ndeath: new Date(1954, 5, 7),\ncontribs: ['Turing machine', 'Turing test', 'Turingery'],\n};\nawait col.insertOne(personDocument);\n} catch (err) {\nconsole.log(err.stack);\n}\nclient.close();\n}\napp();\nGetting data\nJust as in a mongo shell, you can use MongoDB's\nmethod with the Node.js driver to get back\ncollection.find()\ndata from a collection. These are the two important things to\nremember about using the MongoDB driver's method to\nfind()\nget data from a collection:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:841>\n", "text": "It's asynchronous.\nIt returns a Cursor object.\nDatabase operations are asynchronous\nGetting data (as well as adding, updating, and deleting it, for that\nmatter) is an asynchronous operation. When using the MongoDB\nmethods, you have the choice of invoking them with callbacks,\nPromises, or async functions. Async functions are (in my opinion)\nthe easiest way to write and to understand async code, so that's\nwhat I'm using in these examples.\nUsing a Cursor object\nCursor objects manage the results of a query. They're iterable\nobjects on which you can use the following methods:\n: Gets the next result in the Cursor\nnext()\n: Converts the Cursor to an array\ntoArray()\n: Loops over each result\nforEach()\nFollow these steps to retrieve all the records from the\npeople\ncollection you created in the previous section and output them to\nthe console:\n1. After the statement in , use the\ninsertOne() dbtest.js\nmethod to query the collection and return a\nfind()\ncursor:\nconst cursor = await col.find();\n2. Use a loop to loop over the cursor and log\nforEach()\neach of its documents to the console:\nawait cursor.forEach(console.dir);\nYes, that's all there is to it. When you run this program now,\nanother document is added to the collection and then all the\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:842>\n", "text": "documents in the collection are output to the console, as shown\nin Figure 8-8.\nFIGURE 8-8: Logging documents to the console.\nUsing results in your program\nIf you need to hold the documents returned by a query in\nfind()\nmemory and work with the records (such as to create an HTTP\nresponse), convert the cursor to an array:\nconst allResults = await collection.find({}).toArray();\nUsing findOne()\nThe method uses a query object to find all\ncollection.findOne()\nmatching documents in a collection and returns the first matching\ndocument. Unlike the method,\ncollection.find() findOne()\ndoesn't return a cursor.\nExamining your Find options\nYou can optionally pass an options object as the second argument\nto or . These are a few of the more common find\nfind() findOne()\noptions:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:843>\n", "text": "limit: limits the result to the specified number of documents.\nprojection: specifies the fields to return using the field name\nwith a value of 0 or 1.\nskip: specifies a number of documents to skip ahead in the\nquery. This is useful for pagination.\nsort: specifies a sort order for the returned documents.\nUpdating data\nTo update documents in a collection, you can use the\nupdateOne()\nor methods. As with the Mongo Shell methods,\nupdateMany()\nand accept a filter document, which\nupdateOne() updateMany()\nspecifies which document or documents to update, and an update\ndocument, which specifies how to update the document or\ndocuments.\nUpdate options\nYou can pass an options object to or .\nupdateOne() updateMany()\nThe most commonly used update option is called . If\nupsert upsert\nis set to , a new document is created if no documents match\ntrue\nthe filter object.\nCombining update and insert\nIf you've run the listings in this chapter that person record into\nthe database, you should now have a collection named\npeople\nwith several records for Alan Turing. Listing 8-5 shows how to use\nand the upsert option to prevent documents with\nupdateOne()\nduplicate information from being created.\nBefore you run this code, you should drop the existing collection\nby going into the mongo shell (by entering mongosh into a\nterminal) and entering use mydb followed by\ndb.people.drop().\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:844>\n", "text": "LISTING 8-5: Using with the\nupdateOne()\nUpsert Option\nimport { MongoClient } from 'mongodb';\nimport { dbConfig } from './db-config.js';\nconst { url, dbName } = dbConfig;\nconst client = new MongoClient(url);\nasync function app() {\ntry {\nawait client.connect();\nconsole.log('Connected to the server.');\nconst db = client.db(dbName);\nconst col = db.collection('people');\nlet personDocument = {\nname: { first: 'Alan', last: 'Turing' },\nbirth: new Date(1912, 5, 23), // June 23, 1912\ndeath: new Date(1954, 5, 7), // June 7, 1954\ncontribs: ['Turing machine', 'Turing test', 'Turingery'],\n};\nawait col.updateOne(\n{ first: 'Alan', last: 'Turing' },\n{ $set: personDocument },\n{ upsert: true }\n);\nconst allResults = await col.find({}).toArray();\nconsole.log(allResults);\n} catch (err) {\nconsole.log(err.stack);\n}\nclient.close();\n}\napp();\nDeleting data\nTo delete documents, use either or\ncollection.deleteOne()\n. The method takes a query\ncollection.deleteMany() deleteOne()\ndocument and deletes the first document that matches the query.\nThe method takes a query document and deletes all\ndeleteMany()\ndocuments that match the query. Both methods return a result\nobject that contains a property that indicates how\ndeletedCount\nmany documents were deleted.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:845>\n", "text": "For example, the following code attempts to delete a single\ndocument. You can test whether the document to be deleted was\nfound by checking the value of :\nresult.deletedCount\nconst result = await people.deleteOne({last:'Turing'});\nif (result.deletedCount === 1) {\nconsole.log('Success');\n} else {\nconsole.log('No match was found');\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:846>\n", "text": "Chapter 9\nRiding on the Express Train\nIN THIS CHAPTER\nGetting started with Express\nMaking server-side routes\nUsing and creating middleware\nCreating an Express API server\nUsing a template engine to serve views\nBenefiting from the express application generator\n\u201cThe speed of light sucks.\u201d\n\u2014JOHN CARMACK\nExpress is the most popular Node.js web application framework.\nWhether you're building an API server or a web application server\nwith Node.js, Express greatly simplifies working with HTTP,\ntemplates, and routes.\nIn this chapter, I show you how to start working with Express and\nhow to use Express to create server-side web applications.\nInstalling Express\nTo install Express, you can use an existing Node.js package or\ncreate a new one (using npm init) and then enter npm install\nexpress.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:847>\n", "text": "The examples in this chapter use ES Module syntax, so\nyou need to add to your file.\n\"type\":\"module\" package.json\nOnce you have Express installed in your package, you're ready to\ncreate your first Express application. As usual, let's start with a\nsimple application, which is shown in Listing 9-1.\nLISTING 9-1: Hello Express\nimport express from 'express';\nconst app = express();\nconst port = 3000;\napp.get('/', (req,res) => {\nres.send('Hello World!');\n});\napp.listen(port, () => {\nconsole.log(`Listening on port ${port}.`);\n});\nIf you save this program and run it, you see it log a message to\nthe console, and when you send an HTTP GET request to it (by\nopening in your browser), it returns a\nhttp://localhost:3000\nmessage. There's nothing too exciting about this example, but it\ndoes demonstrate the basics of how Express works.\nThe first thing to notice is that, in order to use Express, you must\ncreate an instance of by running the method.\nexpress express()\nIt's a convention to use as the name of the object that's\napp\nreturned from . The app object has methods and\nexpress()\nproperties that you can use to simplify creating an app. In Listing\n9-1, the two methods you use are and .\nget() listen()\nThe method listens for HTTP GET requests to the URL\nget()\npassed as its first argument. When it receives a request, it calls\nthe handler function passed to its second argument and passes a\nrequest object and a response object to it.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:848>\n", "text": "The request and response objects (commonly named\nreq\nand ) passed to the handler function in (as well as\nres get()\nthe other routing methods I tell you about in the following\nsection) are the same request and response objects that I tell\nyou about in Chapter 5 of Book 7.\nServer-Side Routing with\nExpress\nOn a web server, routing refers to how the server responds to\nHTTP requests from a client. Server-side routing uses the path\nand the method passed in the request object to determine how to\nrespond.\nIntroducing routing methods\nExpress has built-in methods for supporting 23 different HTTP\nmethods, including the most commonly used ones, which are\nGET, POST, PUT, and DELETE, as well as less commonly used\nmethods such as PATCH, HEAD, OPTIONS, SEARCH, SUBSCRIBE,\nand CHECKOUT.\nIf you're building a web application that serves HTML pages, you'll\nlikely only use and for routing. If you're building an\nget() post()\nAPI server, you use , , (or ), and\nget() post() put() patch()\ndelete().\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:849>\n", "text": "The PUT and PATCH methods are often used\ninterchangeably, but there is a difference in how they're\nintended to be used. PUT should be used for operations that\nwill replace an entire resource (such as a document in a\nMongoDB collection). PATCH should be used for operations\nthat will replace only specified fields.\nUsing routing methods\nWhichever routing method you use, they all work the same way:\nEach method takes a path as its first argument and a handler\nfunction as its second argument.\nThe path argument can be a string representing the path, a path\npattern, a regular expression, or an array containing combinations\nof the other possible values.\nString paths\nTo simply match a single path, pass the path as a string that\nstarts with the root path ('/'). For example, if you want to handle\nHTTP GET requests to the path, pass .\n/users '/users'\nIn addition to directory names, string paths can also contain\nhyphens (\u2013) and dots (.).\nPath patterns\nYou can use certain characters in path strings to match patterns.\nFor example, to match a path that starts with the literal string\nfollowed by any number of additional characters, you can\n\"test\"\nuse the asterisk (*) character, like this:\napp.get('/test*', (req, res) => {\nres.send('test');\n});\nThese are the pattern-matching characters that can be used in\npath strings:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:850>\n", "text": ": specifies that the character it follows is optional. For\n?\nexample, the following snippet matches requests to and\n/test\n:\n/tests\napp.get('/tests?', (req, res) => {\nres.send('test');\n});\n: specifies that there must be at least one instance of the\n+\ncharacter it follows. For example, the following snippet\nmatches requests to , , , and so on:\n/tests /testss /testsss\napp.get('/tests+', (req, res) => {\nres.send('test');\n});\n: can be used to group characters. For example, the\n()\nfollowing snippet matches requests to as well as to :\n/test /t\napp.get('/t(est)?', (req, res) => {\nres.send('test');\n});\nPath regular expressions\nIf you need to match a more complex pattern than is possible\nwith path strings, you can use regular expressions for the path\nargument. For example, the following snippet matches any\nrequest that ends with :\ntest\napp.get(/.*test$/, (req, res) => {\nres.send('test');\n});\nPath parameters\nPath parameters can be used to match paths that have dynamic\nvalues and to capture the dynamic part of the path. For example,\nan API may have a route. With the\n/users/:userid get()\nfunction's path argument set to , a URL ending\n'/users/:userid'\nin will be matched by that route function.\n/users/99\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:851>\n", "text": "When you use a path parameter, the dynamic part of the URL is\navailable inside object. Listing 9-2 uses a path\nreq.params\nparameter and uses the value passed in the URL in the response.\nLISTING 9-2: Logging\nreq.params\nimport express from 'express';\nconst app = express();\nconst port = 3000;\napp.get('/log/:myArg', (req, res) => {\nconsole.log(req.params.myArg);\nres.send('Hello World! You requested ' + req.params.myArg);\n});\napp.listen(port, () => {\nconsole.log(`Listening on port ${port}.`);\n});\nUsing Express Middleware\nFunctions that have access to the request and response objects\nare called express middleware functions. When attached to an\nexpress app or a route, they do their work after a request comes\nin and before the response is sent. Middleware functions can be\nused for these tasks:\nExecuting any code\nMaking changes to the request and response objects\nEnding the request-response cycle\nCalling the next middleware function\nThe next() function\nThe middleware function passes control from the currently\nnext()\nrunning middleware function to the next middleware function.\nEvery middleware function has access to the middleware\nnext()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:852>\n", "text": "function and must either end the request-response cycle (such as\nby calling the function) or call .\nend() next()\nIf a middleware function doesn't call or end the\nnext()\nrequest-response cycle, the request is left hanging. A\nhanging request won't respond. The browser continues to\nwait for a response until the request times out.\nListing 9-3 shows the use of a middleware function that listens for\nrequests using any HTTP method and logs the requested path to\nthe console.\nLISTING 9-3: Logging Requests with\nMiddleware\nimport express from 'express';\nconst app = express();\nconst port = 3000;\napp.use((req, res, next) => {\nconsole.log(`Request URL: ${req.url}`);\nnext();\n});\napp.listen(port, () => {\nconsole.log(`Listening on port ${port}.`);\n});\nTypes of middleware\nSeveral categories of middleware are available, including these:\nApplication-level middleware\nRouter-level middleware\nError-handling middleware\nBuilt-in middleware\nThird-party middleware\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:853>\n", "text": "Application-level middleware\nApplication-level middleware is bound to the app object using\nor the , , , or another of\napp.use() app.get() app.post() app.put()\nExpress's HTTP method functions.\nApplication-level middleware functions can optionally take a\nmount path as their first argument. If a mount path is passed, the\nmiddleware function runs only when the request path matches\nthe specified mount path.\nIf a middleware function has no mount path, it runs on every\nrequest (if it was created using ) or on the type of HTTP\napp.use()\nrequest that matches the method the middleware was bound to\n(such as or ).\nget() post()\nListing 9-4 shows a middleware function that runs when GET\nrequests come in at . It adds a property to the\n/time currentTime\nresponse object before passing control to the next middleware\nfunction, which responds to the request with the current date and\ntime.\nLISTING 9-4: Using Middleware to Modify\nthe Object\nres\nimport express from 'express';\nconst app = express();\nconst port = 3000;\napp.get('/time', (req, res, next) => {\nres.currentTime = new Date();\nnext();\n});\napp.get('/time', (req, res) => {\nres.send(`Hello World! The time is ${res.currentTime}.`);\n});\napp.listen(port, () => {\nconsole.log(`Listening on port ${port}.`);\n});\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:854>\n", "text": "Router-level middleware\nRouter-level middleware works the same as application-level\nmiddleware, except that it's attached to an instance of\nRouter()\nrather than to an instance of .\nexpress()\nBy creating Router objects, you can better organize the routes in\nyour application. For example, you might have a customer route\nthat handles requests starting with the path and a\n/customer\nproduct router that handles requests starting with the\n/product\npath.\nListing 9-5 demonstrates the use of router-level middleware to log\ndifferent messages to the console depending on which router\nhandles the request.\nLISTING 9-5: Using Router-Level\nMiddleware\nimport express from 'express';\nimport { Router } from 'express';\nconst customerRouter = Router();\nconst productRouter = Router();\nconst app = express();\nconst port = 3000;\ncustomerRouter.get('/', (req, res, next) => {\nres.send('Customer list');\nnext();\n});\nproductRouter.get('/', (req, res, next) => {\nres.send('Product list');\nnext();\n});\napp.use('/customers', customerRouter);\napp.use('/products', productRouter);\napp.listen(port, () => {\nconsole.log(`Listening on port ${port}.`);\n});\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:855>\n", "text": "Error-handling middleware\nError-handling middleware takes an error object (usually called\n) as its first argument, followed by , , and . In\nerr req res next\nListing 9-6, an error-handling middleware function is defined to\ncatch errors and send back a custom error when they happen.\nLISTING 9-6: Using Error-Handling\nMiddleware\nimport express from 'express';\nimport { Router } from 'express';\nconst userRouter = Router();\nconst app = express();\nconst port = 3000;\nuserRouter.get('/admin', (req, res, next) => {\nthrow new Error('Nice try!');\n});\napp.use('/users', userRouter);\napp.use((err, req, res, next) => {\nconsole.error(err.stack);\nres.status(500).send('Something broke!');\n});\napp.listen(port, () => {\nconsole.log(`Listening on port ${port}.`);\n});\nBuilt-in middleware\nThe built-in middleware functions can be attached to the express\ninstance to perform their tasks on incoming requests. The built-in\nmiddleware functions include these:\n: Serves static assets (such as images, html\nexpress.static()\nfiles, and stylesheets) from a specified directory.\n: Parses requests containing JSON payloads to\nexpress.json()\nconvert them to JavaScript, passing the request to the next\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:856>\n", "text": "middleware function with a new body object containing the\nparsed data. By default, it works the same as the\nfunction, but can optionally be run in strict\nJSON.parse()\nmode, which parses only JSON arrays and objects.\n: Parses incoming requests containing\nexpress.urlencoded()\nURL-encoded payloads, passing the request to the next\nmiddleware function with a new body object containing the\nparsed data.\n: Parses the incoming request body into a Buffer\nexpress.raw()\nobject.\n: Parses the incoming request payloads into a\nexpress.text()\nstring.\nEach of the built-in middleware functions can take an optional\noptions object, which you can use to limit the requests that are\nparsed by that function. For example, the , ,\njson() urlencoded()\n, and functions can all take a option that causes\nraw() text() type\nthe middleware to handle only requests with the specified mime\ntype.\nThe mime type is passed by the client in the\ncontent-type\nheader. Examples of mime types are ,\ntext/plain\n, , and\napplication/x-www-form-urlencoded application/json\n.\napplication/octet-stream\nThird-party middleware\nThird-party middleware functions are middleware functions that\naren't part of Express and must be installed separately (using\nnpm\n) and loaded into your app. Third-party middleware\ninstall\nfunctions can be used at the app level or the router level.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:857>\n", "text": "Here are some examples of available third-party middleware\npackages:\nbody-parser: Contains middleware functions for parsing the\nrequest body\nThe body-parser package, which is one of the most\nwidely used Node.js packages, is practically required any time\nan app accepts data from HTTP requests.\ncompression: Compresses HTTP responses\ncookie-parser: Parses the cookie header and populates the\nproperty\nreq.cookie\ncors: Enables cross-origin resource sharing (CORS)\nmorgan: Logs HTTP requests\nhelmet: Sets various HTTP headers to help secure your app\nServing static files\nThe middleware function specifies a directory to\nexpress.static()\nserve static files from (such as images and css files). To use\n, attach it to the Express application using\nexpress.static()\n.\napp.use()\nIn Listing 9-7, specifies that the public directory\nexpress.static()\nis where static files are served from. To see how it works, create a\nsubdirectory of your package named and put an image file\npublic\ninto it (or into a subdirectory of it). If you request a file in the\ndirectory (for example, using the URL\npublic\n) in your browser, the request is\nhttp://localhost:3000/myImg.png\nhandled by and the server responds with the\nexpress.static()\nstatic file.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:858>\n", "text": "LISTING 9-7: Using\nexpress.static()\nimport express from 'express';\nconst app = express();\nconst port = 3000;\napp.use(express.static('public'));\napp.get('/', (req, res) => {\nres.send('Hello World! Try accessing /myImg.png');\n});\napp.listen(port, () => {\nconsole.log(`Listening on port ${port}.`);\n});\nAnalyzing a Complete Express\nServer\nTo see how middleware and routes work together in an Express\napp, let's look at a more realistic example of an Express server.\nThe app in Listing 9-8 listens for HTTP requests to .\n/users\nLISTING 9-8: An Express API Server\nimport express from 'express';\nimport { Router } from 'express';\nimport { promises as fs } from 'fs';\nimport { v4 as uuidv4 } from 'uuid';\nimport helmet from 'helmet';\nimport cors from 'cors';\nimport morgan from 'morgan';\nconst userRouter = Router();\nconst app = express();\nconst port = 3000;\nconst __dirname = process.cwd();\napp.use(morgan('combined'));\napp.use(express.json());\napp.use(helmet());\napp.use(cors());\nuserRouter.post('/', async (req, res, next) => {\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:859>\n", "text": "try {\nconst user = req.body;\nuser.id = uuidv4();\nawait fs.writeFile(\n`${__dirname}/users/${user.id}.json`,\nJSON.stringify(user)\n);\nres.status(201).send(user);\n} catch (err) {\nnext(err);\n}\n});\nuserRouter.get('/', async (req, res, next) => {\ntry {\nconst users = await fs.readdir(`${__dirname}/users`);\nres.send(users);\n} catch (err) {\nnext(err);\n}\n});\nuserRouter.get('/:id', async (req, res, next) => {\ntry {\nconst user = await\nfs.readFile(`${__dirname}/users/${req.params.id}.json`);\nres.send(JSON.parse(user));\n} catch (err) {\nnext(err);\n}\n});\napp.use('/users', userRouter);\napp.use((err, req, res, next) => {\nconsole.error(err.stack);\nres.status(500).send('Something broke!');\n});\napp.listen(port, () => {\nconsole.log(`Listening on port ${port}.`);\n});\nIf the server receives a POST request, the body of the request is\ngiven a unique ID and then written to a file.\nIf the server receives a GET request to , it returns an array\n/users\nof the names of all the JSON documents that were previously\ncreated (using POST requests).\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:860>\n", "text": "If the server receives a GET request to , it returns the\n/users/[id]\nspecific JSON document that matches the ID that was passed to it\nin the URL.\nAll other requests result in an error, and the morgan middleware\nlogs each request to the console.\nInstalling the server and\ndependencies\nFollow these steps to install the app shown in Listing 9-8:\n1. Enter the code from Listing 9-8 into a file (or find\nListing070908.js in the code download for this book).\n2. Install the app's dependencies all at one time with the\nfollowing command:\nnpm install express uuid helmet cors morgan\n3. Create a directory named users in the same folder as\nthe app file.\nSetting up a REST client\nNow that you have the API server from Listing 9-8 installed, you\ncan test it out by using a REST client. Several good stand-alone\napplications exist that can help you test and debug API servers.\nThese include Postman (available at ) and\nwww.postman.com\nSwagger ( ).\nhttps://swagger.io\nIn this section, you install and use a VS Code extension to test an\nAPI server.\n1. If you don't already have it, install and enable the\nREST Client extension into VS Code.\nThe installation page for the REST Client extension is shown in\nFigure 9-1.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:861>\n", "text": "Installing VS Code extensions is covered in Chapter 2\nof Book 1.\n2. Make a file named rest.http in your VS Code project.\nThis holds the HTTP requests that you'll run using the REST\nClient extension.\nFIGURE 9-1: Install the REST Client extension.\n3. In , create a POST request that sends a JSON\nrest.http\ndocument to the server at .\nhttp://localhost:3000/users\nFor example, the following snippet does the trick:\nPOST http://localhost:3000/users\nContent-Type: application/json\n{\n\"name\": \"John Doe\",\n\"email\": \"jdoe@example.com\"\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:862>\n", "text": "The blank line between the Content-Type header and\nthe JSON object is required so that the server can know where\nthe header stops and the body begins.\n4. After the JSON object in , add three # symbols\nrest.http\non a line by themselves to indicate that the request is\nfinished.\n5. Create a GET request to http://localhost:3000/users,\nfollowed by ###:\nGET http://localhost:3000/users\n###\n6. Create a placeholder for a GET request for a specific\nuser's JSON document:\nGET http://localhost:3000/users/#id\n###\nBecause the property is generated dynamically by the\nuser.id\nserver, you won't know a valid user ID to look up until after\nyou complete the first POST.\nTesting the API server\nAfter you have the server and its dependencies installed and\nyou've created some sample requests, follow these steps to test\nout the API server:\n1. Start the server (by entering node followed by the\nname of your program).\n2. Click the Send Request link (shown in Figure 9-2) for\nthe POST request in .\nrest.http\nA new window opens in VS Code and shows the response\nfrom the server. If everything worked, you see a response with\na 201 status code, as shown in Figure 9-3.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:863>\n", "text": "FIGURE 9-2: The rest.http file, containing Send Request links.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:864>\n", "text": "FIGURE 9-3: A response with a 201 status code.\n3. Open the subdirectory of your project and verify\nusers\nthat a new JSON document has been created.\n4. Scroll to the bottom of the server's response and copy\nthe value of the property from the JSON data\nid\n(without the quotes).\n5. Paste the user's ID in place of the string in the third\n#id\nrequest in .\nrest.http\n6. Click the Send Request link above the GET request that\nyou just modified.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:865>\n", "text": "The server responds with a 200 status code, followed by other\nheader properties, followed by a JSON object containing the\nuser's data.\n7. Click the Send Request link above the POST request\nagain.\nSince each POST triggers the creation of a unique ,\nuser.id\nyou can use the same object to create additional records\nwithout overwriting the previous records.\n8. Click the Send Request link above the GET request to\n.\n/users\nThe response will have a 200 status and a body containing an\narray of the filenames of every user file that's been created.\nServing a View\nRather than build a client-side JavaScript application that connects\nto a Node.js API server, you can use Node.js instead to serve\nHTML documents in response to HTTP requests. In its simplest\nform, this is just a matter of creating routes that return static\nHTML, as shown in Listing 9-9.\nLISTING 9-9: Serving static HTML Files\nfrom Node.js\nimport express from 'express';\nconst app = express();\nconst port = 3000;\napp.use(express.static('public'));\napp.listen(port, () => {\nconsole.log(`Listening on port ${port}.`);\n});\nWhen the server in the preceding listing is running, it responds to\nHTTP GET requests with matching static files from the public\ndirectory. To see it in action, create a directory named in\npublic\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:866>\n", "text": "the same directory as the server and place a file (such as\n) into it. Start the server and go to\nindex.html\n, and will be returned to you.\nhttp://localhost:3000 index.html\nA static file server is easy enough to write, but the point of using\nNode.js is to be able to create dynamic server-side applications. If\nyou want to serve static HTML to a browser and combine it with\ndynamic data, you need to use some sort of HTML template.\nBenefiting from a template engine\nA template engine is a program that helps you create HTML\ntemplates that can have dynamic data injected into them. Just as\nthere are many different client-side view libraries available\n(including React.js, Vue.js, and Svelte), there are many different\nNode.js template engines that you can use with Node.js and\nExpress, including these (and many others):\npug\nEmbedded JavaScript templates (ejs)\nHandlebars.js\nMustache\nTwig\nSquirrelly\nEta\ncombyne.js\nNunjucks\nYou can see an even longer list of available template engines,\nalong with links to them, at\n.\nhttps://expressjs.com/en/resources/template-engines.html\nIntroducing Pug\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:867>\n", "text": "Pug (formerly known as Jade) is one of the most popular view\nengines. Pug is a white-space-sensitive syntax for writing\ntemplates that compile to HTML. Listing 9-10 shows an example\nof a Pug template.\nLISTING 9-10: A Pug Template\ndoctype html\nhtml(lang=\"en\")\nhead\ntitle= \"My App\"\nbody\nh1 Welcome to the app\n#container.col\nif loggedIn\np Congratulations!\nelse\np Please log in to continue\nTo use pug templates, install pug in any JavaScript project and\ninclude it. To compile a pug template, use the\npug.compile()\nmethod and pass it a string containing pug code.\nAlternatively, you can install the pug-cli package and compile\ntemplates from the command line. Listing 9-11 shows an HTML\npage that could be generated from Listing 9-10.\nLISTING 9-11: The Generated HTML from\nListing 9-10\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<title>My App</title>\n</head>\n<body>\n<h1>Welcome to the app</h1>\n<div class=\"col\" id=\"container\"><p>Please log in to continue</p></div>\n</body>\n</html>\nJust as you can use Vite to make setting up the dependencies and\ntoolchain for a client-side application easy, the easiest way to use\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:868>\n", "text": "a template engine with Node.js is to bootstrap a project using the\nExpress application generator, which I talk about in the next\nsection.\nUsing the Express Application\nGenerator\nThe Express application generator tool can be used to quickly\ngenerate the boilerplate code for an Express application. Follow\nthese steps to install, run, and build an application with the\nExpress application generator:\n1. Install and run the application generator to make an\napp named that uses the Pug template engine \u2014\nmyapp\nuse the following npx command:\nnpx express-generator --view=pug myapp\nNpx asks you whether it's okay to proceed. After you enter\nyes, express-generator installs and then creates some files\nand directories, as shown in Figure 9-4.\n2. Change the working directory to the new app directory\nand install the app's dependencies:\ncd myapp\nnpm install\n3. Start the app to see what it does:\nnpm start\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:869>\n", "text": "FIGURE 9-4: Generating an Express application.\n4. Go to http://localhost:3000 in your browser.\nThe default app's home page opens, as shown in Figure 9-5.\nFIGURE 9-5: The default generated app's home page.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:870>\n", "text": "If you look in the directory created by the express application\ngenerator in VS Code, you see the directories and files shown in\nFigure 9-6.\nYou can probably guess the purpose of most of these directories\nand files just by looking at their names \u2014 for example:\nThe routes used by the app are in separate files in the\nroutes\ndirectory.\nThe templates for the views that are served from these routes\nare in the directory.\nviews\nThe directory contains static assets.\npublic\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:871>\n", "text": "FIGURE 9-6: The default generated app's structure.\nThere's nothing special or required about this organization\nof files, although it is quite common for an Express app to\nhave each of these directories \u2014 my advice is to use this\nstructure as a starting point and then change it or add to it\nas it becomes necessary.\nTo find out what this application does, open . The first\napp.js\nthing you may notice (depending on whether there's a new\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:872>\n", "text": "version of Express application generator) is that the generated\napplication uses CommonJS modules.\nThere's no built-in way to generate an application that\nuses ES Module syntax with Express application generator;\nhowever, an unofficial package named express-generator-\nesmodules uses ES Modules.\nAfter the imports, you can see where the app instance is created,\nfollowed by a list of function calls to configure and start\napp.use()\nup various middleware functions, as shown in Figure 9-7.\nFIGURE 9-7: Calls to app.use() in app.js.\nThese function calls tell you everything you need to\napp.use()\nknow about what this app can do. Lines 22 and 23 in the code\nshown in Figure 9-7 tell you that the app currently responds to\nrequests at the root (/) directory and at the directory.\n/users\nIf you open in your browser while\nhttp://localhost:3000/users\nthe server is running, you see the app shown in Figure 9-8.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:873>\n", "text": "FIGURE 9-8: Viewing the /users route.\nTo see how this lovely page is generated, start by opening the\nfile. It will look something like the code in\n/routes/users.js\nListing 9-12.\nLISTING 9-12: The Users Route File\nvar express = require('express');\nvar router = express.Router();\n/* GET users listing. */\nrouter.get('/', function(req, res, next) {\nres.send('respond with a resource');\n});\nmodule.exports = router;\nNothing very exciting there. If you open the other file in routes,\nindex.js, you see the code shown in Listing 9-13.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:874>\n", "text": "LISTING 9-13: The index.js Route File\nvar express = require('express');\nvar router = express.Router();\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\nres.render('index', { title: 'Express' });\n});\nmodule.exports = router;\nThis file is a bit more interesting. In the callback function passed\nto the function, it calls . The\nrouter.get() res.render()\nfunction renders the specified template (index)\nres.render()\nusing the properties in the object passed as its second argument.\nTo see how this works, open . You see the Pug\nviews/index.pug\ntemplate shown in Listing 9-14.\nLISTING 9-14: The index.pug Template\nextends layout\nblock content\nh1= title\np Welcome to #{title}\nThe first line of index.pug specifies that this template extends the\nlayout, which refers to the layout.pug file. Open layout.pug, and\nyou can see the code shown in Listing 9-15.\nLISTING 9-15: The Template\nlayout.pug\ndoctype html\nhtml\nhead\ntitle= title\nlink(rel='stylesheet', href='/stylesheets/style.css')\nbody\nblock content\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:875>\n", "text": "The template creates the shell of a basic HTML\nlayout.pug\ndocument and imports a stylesheet. In the element, it uses\nbody\nthe directive. The directive in Pug indicates a part of\nblock block\na template that a child template ( , in this case) can\nindex.pug\nreplace.\nThe word after , , is the name of the block. If a child\nblock content\ntemplate (one that extends ) contains a block with the\nlayout.pug\nname of , the content from the child replaces the content\ncontent\nblock from the parent template.\nIn the case of and , that's exactly what\nindex.pug layout.pug\nhappens. Following the first line of ( ),\nindex.pug extends layout\nthe template defines a block named and creates an\ncontent <h1>\nelement. The element's content (the text between and\n<h1> <h1>\nwill be set to the value of the property passed to the\n</h1> title\ntemplate by . After the h1 element, a element is\nres.render() <p>\ncreated with its content set to a dynamic welcome message.\nNEXT STEPS\nAfter you understand how a dynamic web application created using Express\nand pug works, try experimenting with the default Express application\ngenerator boilerplate. Here are some ideas to get you started:\nCreate another route, called products, and make a new template that\nlists some fake products.\nModify the layout.pub template to generate a navigation menu so that\nyou can easily switch between all the other routes in the application.\nConnect to a MongoDB database from the application and use data\nfrom MongoDB collections to populate a list of users and a list of\nproducts to display on their respective pages.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:876>\n", "text": "Chapter 10\nRegistration and\nAuthentication\nIN THIS CHAPTER\nStarting the project by making and configuring the\ndirectory\nCreating the basic structure for the app\nLaying out and testing the routes\nUsing Mongoose\nImplementing user registration and authentication\nUsing access tokens\nImplementing user login and accessing secure routes\n\u201cIf you're going to make connections which are innovative \u2026 you\nhave to not have the same bag of experiences as everyone else\ndoes.\u201d\n\u2014 STEVE JOBS\nMost apps with an API server running in Node.js and a client\nrunning in a browser need certain functionality to be complete.\nOn the server side, the client should have a way to authenticate\nitself, and the client should be able to work with the server's data.\nOn the client side, users must have a way to interact with the API\nthrough a user interface. This typically includes the ability for new\nusers to create accounts, for users to log in and log out, and for\nthe application to have the ability to restrict the use of the server-\nside data to logged-in users.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:877>\n", "text": "In this chapter, I tell you how to put all these pieces together into\na fully functional client-server web app.\nIf you read this chapter, you can connect many of the topics I\npresent to you in JavaScript All-in-One For Dummies to program\nuser registration and login functionality for an app based on the\nSoliloquy app I show you how to start building in Chapter 1 of\nBook 5.\nIn this chapter, I guide you step-by-step through the code.\nVisit this book's website at\nor my GitHub\nwww.dummies.com/go/javascriptallinonefd\nrepository at\nto\nhttps://github.com/chrisminnick/javascriptaio\ndownload all the listings from this chapter.\nThe finished app \u2014 which can be implemented with vanilla\nJavaScript, React.js, Vue.js, Svelte, or any other front-end library\n\u2014 allows new users to sign up, log in, create new posts, edit\nposts, delete posts, and log out.\nMaking and Configuring the\nDirectory\nTo get started with the API server part, you need a new project\ndirectory, a new Node.js package, a new Git repository, a\nREADME file, and a .env file. Follow these steps to start the\nproject:\n1. Create a new directory, making sure it isn't a\nsubdirectory of another Node.js project, called\nsoliloquy.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:878>\n", "text": "2. Run npm init -y in the project directory to create a new\nNode.js package.\n3. Open and add \"type\":\"module\" to it to enable\npackage.json\nES Modules.\n4. Set the value of in to \"soliloquy-\n\"name\" package.json\nbackend\".\n5. Set the value of in to \"server.js\".\n\"main\" package.json\n6. Create a script in and set its value to\nstart package.json\nnode server.js.\nIf you have nodemon installed, you can set the value\nof your start script to so you won't need to\nnodemon server.js\nrestart the server manually when you make changes to the\napp.\n7. Save and close .\npackage.json\n8. Make a file named .env in the root of your project.\nThe file is where you store some variables that are\n.env\nspecific to the server instance and that shouldn't be checked\ninto your code repository.\n9. Make a file named and then add as its\n.gitignore .env\nfirst line and as its second line, like this:\nnode_modules\n.env\nnode_modules\n10. Create a file named and enter something like\nREADME.md\nthe following two lines into it:\n# Soliloquy Server\nfrom JavaScript All-In-One For Dummies\n11. Enter git init into the terminal to initialize a Git\nrepository.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:879>\n", "text": "Going forward, stage your files and commit them to\nthe repository often, even though I won't specifically say at\nwhat point you should do so.\nAdding the App and Server\nModules\nIn this section, you create the basic structure for your app,\nincluding the Express app and the main file that will run when the\nserver starts. Follow these steps:\n1. Run the following command to install the\ndependencies you need for this section:\nnpm install dotenv express\n2. Create a new file named app.js and open it for editing\nin VS Code.\n3. Import the express framework into :\napp.js\nimport express from 'express';\n4. Create an express app instance:\nconst app = express();\n5. Export the app:\nexport default app;\nAt this point, your file should look like Listing 10-1.\napp.js\n6. Make a new file named server.js and open it for editing.\n7. Import into and run its method\ndotenv server.js config()\nto import and set the environment variables from .env:\nimport dotenv from 'dotenv';\ndotenv.config();\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:880>\n", "text": "8. Open and add a new variable named\n.env SERVER_PORT\nand set its value to :\n3000\nSERVER_PORT = 3000\n9. Import into :\napp server.js\nimport app from './app.js';\n10. Set a constant in for the port, along with a\nserver.js\ndefault port number:\nconst port = process.env.SERVER_PORT || 3000;\n11. Call the method of to start the server:\nlisten() app\napp.listen(port, () => {\nconsole.log(`Server is running on port ${port}.`);\n});\nYour file should now match Listing 10-2.\nserver.js\nLISTING 10-1: Setting Up Express\nimport express from 'express';\nconst app = express();\nexport default app;\nLISTING 10-2: The Finished server.js File\nimport dotenv from 'dotenv';\ndotenv.config();\nimport app from './app.js';\nconst port = process.env.SERVER_PORT || 3000;\napp.listen(port, () => {\nconsole.log(`Server is running on port ${port}.`);\n});\nIf you enter npm start into the terminal, the server should start\nand you'll see the message. If so, move on to the\nconsole.log()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:881>\n", "text": "next section!\nMaking Some Basic Routes\nThe next step in building your app is to lay out the routes it will\nneed. The app will have two main areas of functionality: user (for\nhandling registration, login, and authentication) and posts (for\nhandling fetching, posting, updating, and deleting posts). You will\ndefine each of these using . Follow these steps:\nexpress.Router()\n1. Create a directory in your project named routes.\n2. Create a file named posts.js and one named user.js\ninside the directory.\nroutes\n3. Import Express into both and :\nposts.js user.js\nimport express from 'express';\n4. Create a router object in both and :\nposts.js user.js\nconst router = express.Router();\n5. In , define Express middleware functions to\nposts.js\nhandle the following HTTP methods and routes:\nPOST to for creating a new post\n/\nGET to for getting all posts\n/\nGET to for getting a single post\n/:id\nPUT to for updating a single post\n/:id\nDELETE to for deleting a single post\n/:id\nFor now, just create placeholders for each of these. Here's\nwhat the first one can look like:\nrouter.post('/', (req, res) => {\nres.send(`You requested ${req.url} using the ${req.method}\nmethod`);\n});\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:882>\n", "text": "6. After the five routes are created, export the router\nfrom as a default export:\nrouter/posts.js\nexport default router;\nYour file should now match Listing 10-3.\nrouter/posts.js\nLISTING 10-3: The Skeleton for\nroutes/posts.js\nimport express from 'express';\nconst router = express.Router();\n// create a new post\nrouter.post('/', (req, res) => {\nres.send(`You requested ${req.url} using the ${req.method} method`);\n});\n// get all posts\nrouter.get('/', (req, res) => {\nres.send(`You requested ${req.url} using the ${req.method} method`);\n});\n// get a single post\nrouter.get('/:id', (req, res) => {\nres.send(`You requested ${req.url} using the ${req.method} method`);\n});\n// update a post\nrouter.put('/:id', (req, res) => {\nres.send(`You requested ${req.url} using the ${req.method} method`);\n});\n// delete a post\nrouter.delete('/:id', (req, res) => {\nres.send(`You requested ${req.url} using the ${req.method} method`);\n});\nexport default router;\nNext, you make placeholders for the user routes. For the user\nroutes, you need the following items:\nPOST to for creating a new account\n/signup\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:883>\n", "text": "POST to for logging in a user\n/login\nAnd then follow these steps:\n1. Create the two user routes in and have\nroutes/user.js\nthem send back the same response you used for the\nposts routes.\n2. Export routes from as a default export.\nuser.js\nYour file should now match Listing 10-4.\nrouter/user.js\nLISTING 10-4: The Skeleton for\nroutes/user.js\nimport express from 'express';\nconst router = express.Router();\n// create a new user\nrouter.post('/signup', (req, res) => {\nres.send(`You requested ${req.url} using the ${req.method} method`);\n});\n// login a user\nrouter.post('/login', (req, res) => {\nres.send(`You requested ${req.url} using the ${req.method} method`);\n});\nexport default router;\nBefore you can test out these routes, you need to import them\ninto and set them up using . Follow these steps:\napp.js app.use()\n1. Import from :\npostsRoutes /routes/posts.js\nimport postsRoutes from './routes/posts.js';\n2. Import from :\nuserRoutes /routes/users.js\nimport userRoutes from './routes/user.js';\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:884>\n", "text": "3. Use the middleware to parse JSON sent\nexpress.json()\nin the body of requests:\napp.use(express.json());\n4. Register the user and posts routes to listen at\n/api/user\nand /api/posts:\napp.use('/api/posts', postsRoutes);\napp.use('/api/user', userRoutes);\nAt this point, your should match Listing 10-5.\napp.js\nLISTING 10-5: Using the Routes in app.js\nimport express from 'express';\nimport postsRoutes from './routes/posts.js';\nimport userRoutes from './routes/user.js';\nconst app = express();\napp.use(express.json());\napp.use('/api/posts', postsRoutes);\napp.use('/api/user', userRoutes);\nexport default app;\nTesting Your Routes\nAfter the routes are hooked up, you can try them out. You use the\nRest Client extension in VS Code (which I tell you how to install in\nChapter 9 of Book 7).\nMake a new directory in your project named and create two\napi\nfiles in it: and . Listing 10-6 shows the\nposts.http user.http\nrequests you should put into , and Listing 10-7 shows\nuser.http\nrequests you can put into .\nposts.http\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:885>\n", "text": "LISTING 10-6: User API Requests\nPOST http://localhost:3000/api/user/signup HTTP/1.1\n###\nPOST http://localhost:3000/api/user/login HTTP/1.1\n###\nLISTING 10-7: Posts API Requests\nPOST http://localhost:3000/api/posts HTTP/1.1\n###\nGET http://localhost:3000/api/posts HTTP/1.1\n###\nGET http://localhost:3000/api/posts/1 HTTP/1.1\n###\nPUT http://localhost:3000/api/posts/1 HTTP/1.1\n###\nDELETE http://localhost:3000/api/posts/1 HTTP/1.1\n###\nWhen you click the Send Request link above any one of these\nrequests while the server is running on Port 3000, the server\nshould return a message telling you the requested URL and the\nHTTP method, as shown in Figure 10-1.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:886>\n", "text": "FIGURE 10-1: Testing the routes.\nIn a real-life app, you shouldn't be able to access any of the\nendpoints (other than the sign-up and login endpoints) without\nauthenticating yourself. In the next few sections, I tell you how to\nimplement user registration, login, authentication, and logout\nfunctionality.\nMaking a Schema with\nMongoose\nIn Chapter 8 of Book 7, I tell you all about MongoDB, and I\ndescribe how MongoDB collections, unlike SQL databases, don\u2019t\nneed to have a strict set of rules, called a schema, that regulate\nwhat can be stored in them.\nHowever, having a schema is often desirable, because it helps to\ndocument your application and makes writing code that uses a\ndatabase\u2019s collections more predictable and safer.\nTo implement a schema with Node.js and MongoDB, you can use\na library called Mongoose. Mongoose is an object data modeling\n(ODM) library for MongoDB. The job of an ODM is to manage\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:887>\n", "text": "relationships between various data and to provide schema\nvalidation for NoSQL databases.\nIf you\u2019ve worked with SQL databases, you may have heard\nof object relationship modeling (ORM) libraries. An ODM\nserves the same function as an ORM, but for NoSQL\ndatabases.\nThe two methods of Mongoose that you use to create the schema\nand to use the schema are and\nmongoose.Schema()\n, respectively.\nmongoose.model()\nUsing mongoose.Schema and\nmongoose.model\nThe method is a constructor that takes an\nmongoose.Schema()\nobject as its argument and returns a definition of the fields in a\ncollection. The object you pass to contains all\nmongoose.Schema()\nthe fields that can be in the documents stored in the collection,\nalong with the rules for using those fields.\nThe definition of a document (or an object) is also known\nas its shape.\nThese are the rules you can specify for a document field:\ntype: The data type of the value of the field \u2014 for example,\nString, Number, Date, Buffer, Boolean, or Array\ndefault: The default value for the field\nmin: The minimum value of a numeric field\nmax: The maximum value of a numeric field\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:888>\n", "text": "required: Sets whether a field must be present in every\ndocument\nFor example, here's how you might start creating a schema for a\ncollection called :\npaperclips\nconst paperclipSchema = mongoose.Schema({\naquiredDate: {type: Date, required: true},\nsize: {type: Number},\ncolor: {type: String}\n});\nTo use a schema, you pass the object returned by\nto . returns\nmongoose.Schema() mongoose.model() Mongoose.model()\na model that you can use to interact with the collection and that\nwill enforce the rules of the schema.\nInstalling Mongoose and\nconnecting to a database\nSince Mongoose is a third-party library, the first thing to do is to\ninstall it. Enter npm install mongoose into the terminal to\ndownload and install the library.\nOnce the library is installed, follow these steps to connect to a\ndatabase using Mongoose:\n1. Import into :\nmongoose app.js\nimport mongoose from 'mongoose';\n2. To connect to your local MongoDB server (and create a\ndatabase), use in , as shown in\nmongoose.connect() app.js\nListing 10-8.\n3. Start (or restart) the app (using npm start).\nIf your MongoDB server is running, you see the\nConnected to\nmessage appear after the\ndatabase! Server is running on\nmessage, as shown in Figure 10-2.\nport 3000.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:889>\n", "text": "FIGURE 10-2: Successfully connected to the database.\nLISTING 10-8: Connecting to MongoDB in\napp.js\nimport express from 'express';\nimport mongoose from 'mongoose';\nimport postsRoutes from './routes/posts.js';\nimport userRoutes from './routes/user.js';\nconst app = express();\n// Connecting to the database\nmongoose\n.connect('mongodb://localhost:27017/social-network', {\nuseNewUrlParser: true,\n})\n.then(() => {\nconsole.log('Connected to database!');\n})\n.catch(() => {\nconsole.log('Connection failed!');\n});\napp.use(express.json());\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:890>\n", "text": "app.use('/api/posts', postsRoutes);\napp.use('/api/user', userRoutes);\nexport default app;\nIf you're running the server on Windows, you may need to\nchange the MongoDB connection string to use\n0.0.0.0\ninstead of .\nlocalhost\nCreating the User model\nA schema describes the fields that are in a document. The\ndata model provides an interface to the database and uses\nthe schemas to make sure data coming in or going out of the\ndatabase conforms to the schemas.\nFollow these steps to create the User schema and model.\n1. Make a new directory named models at the root of your\nproject.\n2. Make a file in the directory named user.js.\nmodels\n3. Import mongoose into :\n/models/user.js\nimport mongoose from 'mongoose';\n4. Use to define the user schema:\nmongoose.Schema()\nconst userSchema = mongoose.Schema({\nemail: { type: String, required: true },\npassword: { type: String, required: true},\n});\n5. Pass the name of the collection and the schema\nreturned by to to\nmongoose.Schema() mongoose.model()\ncreate the user model:\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:891>\n", "text": "const userModel = mongoose.model('User', userSchema);\n6. Export :\nuserModel\nexport default userModel;\nNow you have a user model that can be used to perform\ndatabase operations on the User collection. The finished\nfile is shown in Listing 10-9.\n/models/user.js\nLISTING 10-9: The Finished userModel\nModule\nimport mongoose from 'mongoose';\n// Creating the user schema\nconst userSchema = mongoose.Schema({\nemail: { type: String, required: true },\npassword: { type: String, required: true },\n});\nconst userModel = mongoose.model('User', userSchema);\nexport default userModel;\nCreate the post model\nThe post model controls what can be stored in the Post collection.\nListing 10-10 shows the Posts model, which should be in\n.\nmodels/post.js\nLISTING 10-10: The Post Model\nimport mongoose from 'mongoose';\n// Creating the post schema\nconst postSchema = mongoose.Schema({\ntext: { type: String, required: true },\n});\nexport default mongoose.model('Post', postSchema);\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:892>\n", "text": "Implementing User\nRegistration\nWhether you're building a social media app, a reminders app, a\nweather app, a news app, or any other kind of app that involves\nserver-side data, you need to implement user registration and a\nlogin system.\nHaving users who can log in to an app makes it possible for the\nservice to have multiple users and remember user information\nand recall it the next time the user visits the app or the website.\nUnderstanding the basics of\nauthentication\nA basic user authentication system must have the following\ncomponents:\nA way for new user accounts to be created\nA way for the server to store and uniquely identify each user\nA secret (such as a password) that the user knows and can\nuse to authenticate themselves (known as logging in) with the\nservice\nA way for the service to verify that the user is authorized to\naccess specific routes\nIn the following sections, you implement each of these\ncomponents using Node.js and MongoDB.\nProgramming the user sign-up\nroute\nIn this section, I show you how to write the internal functions of\nthe route. The sign-up route needs to\n/api/user/signup\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:893>\n", "text": "Receive an email address and password passed to it in the\nrequest object\nDetermine whether a user with the same email address\nalready exists in the database\nEncrypt the password\nSave the new user document into the User collection\nReturn a status code and a message to the client\n201 Created\nOpen in VS Code and follow these steps:\n/routes/user.js\n1. Import the User model:\nimport User from '../models/user.js';\n2. In the callback passed to the sign-up route, query the\nUser collection, using the email address passed in the\nbody of the request, to see whether any existing users\nhave that email address. If you find an existing user,\nreturn a 409 Conflict status code by using the\nstatus()\nmethod, and then send a message and end the\nresponse by using :\njson()\nUser.findOne({ email: req.body.email }, async (err, user) => {\nif (err) throw err;\nif (user) {\nres.status(409).json({\nmessage: 'User already exists!',\n});\n}\nif (!user) {\n// save the user\n}\n});\nBefore moving on to telling you how to save the new user's\ninformation, I need to tell you a bit about how to store\npasswords.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:894>\n", "text": "Understanding password security\nA user's password (or another unique key) is the main form of\nsecurity for this application. Security of the password depends on\nseveral factors, including\nHow difficult the password is to guess\nHow the password is transmitted to the server\nHow the password is stored on the server\nThe first factor in password security \u2014 how difficult it is to guess\n\u2014 can be addressed by requiring a minimum password length and\nby enforcing rules about the characters that must be in the\npassword. You can start this process by adding as a\nminlength: 8\nrule in the User schema. Other validation rules need to be\nprogrammed in the client application.\nTo transmit any information between a server and a client, you\nshould always use https rather than http. The https protocol\nencrypts data traveling between the server and client so that if it's\nintercepted along the way, it's unreadable.\nFor the third factor \u2014 how the data is saved \u2014 the most\nimportant factor is that you should never save plain-text\npasswords in the database. Instead, you create an encrypted\nversion of the password called a hash.\nUnderstanding hashes\nA hash is a string that's derived from encoding an input string in a\nway that it's impossible to determine the input string from the\nhash string. When a hash, as it\u2019s called, is stored in the database,\nthe program can apply the same hash function to the data that\nthe user submits in the Password field and then compare the\nresulting hash to what's in the database.\nFigure 10-3 illustrates how generating hashes and comparing\nhashes works.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:895>\n", "text": "\u00a9 John Wiley & Sons, Inc.\nFIGURE 10-3: Using a one-way hash.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:896>\n", "text": "However, even hashing a password isn't good enough. The\nproblem is that people often choose insecure passwords. For\nexample, a popular-but-insecure password is . Every time\ntest123\nyou apply the same one-way hash function to , you'll get\ntest123\nthe same result, which might look something like this:\nda39a3ee5e6b4b0d3255bfef95601890afd80709\nDatabases of hashes that result from various common passwords\nhave been created, and anyone who intercepts the preceding\nhash can easily look up the input string that created it.\nAdding salt to hashing\nTo solve this problem, you can add a salt to the hash. A salt is a\nstring (that should be random) that's concatenated to the input\nstring before the generation of the hash. By adding a random\nstring (or salt) to the password, you create a much more secure\nhash. Unless a potential attacker knows what the salt is, there's\nno way they can figure out what the password is.\nThe details of how one-way encryption works are beyond\nthe scope of this book \u2014 the important takeaway, however, is\nthat you should never use a hash function without a salt.\nHashing and saving\nTo create the hash, you use the bcrypt library.\nFollow these steps to install bcrypt and use it to hash the\npassword string:\n1. Install bcrypt into the project:\nnpm install bcrypt\n2. Import bcrypt into :\n/routes/user.js\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:897>\n", "text": "import bcrypt from 'bcrypt';\n3. In the callback for the route, if no existing user\n/signup\nis returned from the query, generate a salt:\nfindOne()\nconst result = await bcrypt.getSalt(10);\n4. Generate the hash from the salt and the password:\nconst hashedPassword = await bcrypt.hash(req.body.password,\nsalt);\n5. Use the User model to create the new User object that\nwill be saved to the database:\nconst newUser = new User({\nemail: req.body.email,\npassword: hashedPassword,\n});\n6. Save the new user to the database:\nawait newUser.save();\n7. Respond with a status code:\n201 Created\nres.status(201).json({\nmessage: 'User created!',\n});\nListing 10-11 shows the completed sign-up route.\nLISTING 10-11: The Sign-Up Route\nrouter.post('/signup', (req, res) => {\nUser.findOne({ email: req.body.email }, async (err, user) => {\nif (err) throw err;\nif (user) {\nres.status(409).json({\nmessage: 'User already exists!',\n});\n}\nif (!user) {\nconst salt = await bcrypt.genSalt(10);\nconst hashedPassword = await bcrypt.hash(req.body.password, salt);\nconst newUser = new User({\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:898>\n", "text": "email: req.body.email,\npassword: hashedPassword,\n});\nawait newUser.save();\nres.status(201).json({\nmessage: 'User created!',\n});\n}\n});\n});\nTechnically, you don't need to have the\nif (!user) { \u2026 }\ncondition, since the condition will guard\nif (user) { \u2026 }\nagainst duplicate users being inserted. However, I sometimes\nchoose to be more verbose than necessary, to make my code\nmore understandable.\nTesting user registration\nTo test user registration, open in VS Code and\n/api/user.http\nreplace the POST request to with the request in\n/api/user/signup\nListing 10-12.\nThe blank line between the header and the body is\nrequired and you'll get an error back from the server if you\ndon't have it.\nLISTING 10-12: A Request for Testing User\nRegistration\nPOST http://localhost:3000/api/user/signup HTTP/1.1\ncontent-type: application/json\n{\n\"email\": \"testuser@test.com\",\n\"password\": \"testing123\"\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:899>\n", "text": "}\n###\nStart the server (with ) and click the Send Request link\nnpm start\nabove the request. If everything is correct, the server responds\nwith a status code, as shown in Figure 10-4. If you\n201 Created\nsend the request again with the same email address, you get\nback a status code, as shown in Figure 10-5.\n409 Conflict\nFIGURE 10-4: User created successfully.\nFIGURE 10-5: User already exists.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:900>\n", "text": "Handling Authentication\nIn this section, I tell you how to log a user in and how client\napplications authenticate themselves to perform requests after\nthe initial user login. The first thing you need to do is to build the\nlogin route. The login route's handler takes a JSON object\ncontaining an email address and password, compares these items\nwith what's in the database, and then either logs in the user or\nreturns an authentication failure message. Follow these steps to\nmake the login route:\n1. Change the callback passed to the login router to an\nasync function:\nrouter.post('/login', async (req, res) => {\n2. In the callback function passed to the login route, start\na try/catch block:\nrouter.post('/login', async (req, res) => {\ntry {\n// login code here\n} catch (err) {\nres.status(500).json({\nmessage: err.message,\n});\n}\n});\n3. In the try block, query the User collection for a user\nwith a matching email address:\nconst user = await User.findOne({ email: req.body.email });\n4. If there is no matching user, return a 401\nUnauthorized status code and a message:\nif (!user) {\nres.status(401).json({\nmessage: 'Login failed!',\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:901>\n", "text": "});\n}\n5. If a matching user is in the collection, use the\nmethod to compare the hashed\nbcrypt.compare()\npassword of that user with a hash of the password that\nwas passed in the request object:\nconst isMatch = await bcrypt.compare(req.body.password,\nuser.password);\n6. If there isn't a match, return a status\n401 Unauthorized\ncode:\nif (!isMatch) {\nres.status(401).json({\nmessage: 'Login failed!',\n});\n}\nNotice that the response from the server doesn't\ndistinguish between a bad email address and a bad password.\nThis is a standard best practice that increases the security of\nthe system. If you return separate messages, you're giving\npotential attackers information about whether a username\nexists \u2014 and making their jobs easier.\n7. If the password is correct, generate and send a\n200 OK\nsuccess status code:\nres.status(200).json({\nuserId: user._id\n});\nListing 10-13 shows what your login route should look like at this\npoint.\nLISTING 10-13: Logging In Users\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:902>\n", "text": "router.post('/login', async (req, res) => {\ntry {\nconst user = await User.findOne({ email: req.body.email });\nif (!user) {\nres.status(401).json({\nmessage: 'Login failed!',\n});\n}\nif (user) {\nconst isMatch = await bcrypt.compare(req.body.password, user.password);\nif (!isMatch) {\nres.status(401).json({\nmessage: 'Incorrect password',\n});\n}\nres.status(200).json({\nuserId: user._id,\n});\n}\n} catch (err) {\nres.status(500).json({\nmessage: 'Internal server error',\n});\n}\n});\nWith the route shown in Listing 10-13, users can log in. However,\na critical piece is still missing \u2014 namely, how does the client\napplication authenticate itself for future HTTP requests without\nrequiring the user to enter their password every time the browser\nsends an HTTP request?\nOne possibility is to store the user's password in the client\napplication so that the user doesn't have to reenter it to retrieve\ndata from the server. This is a bad idea because a potential\nattacker could access that password and have access to the\nsystem forever (or until the user changes their password).\nGenerating and Using Tokens\nOne common way for a client application to be able to make HTTP\nrequests on behalf of an authenticated user is by using a JSON\nWeb Token (JWT).\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:903>\n", "text": "The JSON Web Token (JWT) is a standard for transmitting digitally\nsigned information as a JSON object. JWT is commonly used for\nauthenticating subsequent requests after the user logs in and for\nimplementing single sign-on.\nWithout going into too much detail, here's how JWT tokens work:\nThe user logs in to a service using a username and password.\nThe server generates a JWT token using data provided by the\nclient, digitally signs it, and returns it to the client as part of\nthe successful login response.\nThe client uses the JWT token to authenticate itself and give\nthe user access to routes, services, and resources that require\nauthentication.\nThe token sent by a server serves as a key to whatever resources\nthe logged-in user has permission to view. If someone were to\nintercept or otherwise find out the token returned by your bank's\nwebsite when you log in, they could access any information you\ncan access.\nFor this reason, several important security measures need to be\ntaken, including these:\nJWT tokens must expire, and shorter expiration times are\nbetter.\nClient applications must handle and store (or not store) tokens\nsecurely.\nRecognizing that tokens must\nexpire\nThe expiration time of the token is specified when the server\ngenerates it. If tokens never expired, anyone who has a token\nwould be able to use it anytime they like, just like a password. If\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:904>\n", "text": "a token is good for only 5 minutes, it limits the opportunity that\nanyone who steals a token has for causing damage.\nHowever, because a short expiration time means that the user\nneeds to log in again, user convenience needs to be balanced\nwith the need for security. If your app doesn't store any\npersonally identifiable information (PII), it may be possible to use\na long expiration time.\nIn the case of a bank website, on the other hand, a short\ntoken expiration time is critical, but only a part of the security\nmeasures that must be in place.\nSending a refresh token\nA technique that can be used to change the balance between the\nuser's convenience and the security of a token is a refresh token.\nA refresh token is a separate token that's sent along with the\naccess token, and, unlike the access token, the refresh token has\na long expiration time. The only thing a refresh token is good for,\nhowever, is to generate a new access token.\nBy using a refresh token, you can limit the expiration time for the\naccess token. When the access token expires, the client can use\nthe refresh token to generate a new access token. This is how\napps that allow you to stay logged in typically work.\nHandling tokens securely\nHow and whether client applications should store access tokens\nand refresh tokens is a hotly debated topic in web security. The\ngist of the problem is that if it's possible for a malicious website in\nyour browser to obtain the access token set by another website,\nthat's a serious security problem.\nBrowsers have built-in security mechanisms to ensure that data\nstored by one website can be accessed only by that website. For\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:905>\n", "text": "example, data in local storage can be read only by applications\nfrom the domain that set that data. However, there is a type of\nvulnerability websites can have, called a cross-site scripting\nvulnerability.\nUnderstanding XSS attacks\nIn a cross-site scripting (or XSS) attack, the attacker injects\nJavaScript code into the client application using a vulnerability,\nsuch as a form that doesn't properly sanitize user input. Browsers\nhave no way of knowing that JavaScript code injected into a page\nis any different from the JavaScript code that's supposed to be\nthere. The malicious JavaScript code injected into the page has\nfull access to everything the code you wrote can access \u2014\nincluding making authorized HTTP requests and accessing local\nstorage.\nThese are the two main schools of thought regarding the secure\nhandling of access tokens in web browsers:\nStore tokens in local storage. If someone can inject code\ninto your application, you have a bigger problem that needs to\nbe fixed.\nNever store tokens in a browser, and use HttpOnly\ncookies instead. In this standard, the server and client send\nthe token in such a way that it can't be read by client-side\nJavaScript.\nFeelings on both sides of the argument about how to\nhandle tokens run strong. However, if you want to research\nthis topic more, search Google or YouTube for how to store\ntokens in the browser or visit .\nhttps://jwt.io\nFinishing the Login Route\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:906>\n", "text": "The library you use to generate the access token is called\njsonwebtoken. Follow these steps to install jsonwebtoken and\ngenerate a token on a successful login:\n1. Install jsonwebtoken:\nnpm install jsonwebtoken\n2. Open and create the following variable:\n.env\nACCESS_TOKEN_SECRET = \"secret\"\nThe value of the secret should be at least 32 characters long.\nYou can use a tool such as the one at\nto\nhttps://onlinestringtools.com/generate-random-string\ngenerate the secret.\n3. Back in , import the object from the\nroutes/user.js jwt\nlibrary:\njsonwebtoken\nimport jwt from 'jsonwebtoken';\n4. At the beginning of , import and\n/routes/user.js dotenv\nrun its function to import :\nconfig() .env\nimport dotenv from 'dotenv';\ndotenv.config();\n5. Create a new function in to generate\nroutes/user.js\naccess tokens:\nfunction generateAccessToken(username) {\nreturn jwt.sign( username, process.env.ACCESS_TOKEN_SECRET,\n{\nexpiresIn: '1800s',\n});\n}\nThis function takes a username passed to it and signs it using\nthe secret you specified in . The third argument passed to\n.env\nsets the length of time the token remains valid. In\njwt.sign()\nthis case, I've chosen 1800 seconds (30 minutes). It's unlikely\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:907>\n", "text": "that anyone will want to use a social media app where they're\nthe only user for longer than 30 minutes.\n6. Call the ) function from inside the\ngenerateAccessToken(\nlogin route's handler, passing an object containing the\nuser's email address, before the status code is\n200 OK\nreturned:\nconst accessToken = generateAccessToken({user:\nreq.body.email});\n7. Add the access token to the response object's body:\nres.status(200).json({\naccessToken: accessToken,\nuserId: user._id,\n});\nListing 10-14 shows the completed file. Make sure\nroutes/user.js\nyour file matches mine before moving on to the next section.\nLISTING 10-14: The routes/user.js File\nwith the Login Route\nimport dotenv from 'dotenv';\ndotenv.config();\nimport express from 'express';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt';\nimport User from '../models/user.js';\nconst router = express.Router();\nfunction generateAccessToken(username) {\nreturn jwt.sign(username, process.env.ACCESS_TOKEN_SECRET, {\nexpiresIn: '1800s',\n});\n}\nrouter.post('/signup', (req, res) => {\nUser.findOne({ email: req.body.email }, async (err, user) => {\nif (err) throw err;\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:908>\n", "text": "if (user) {\nres.status(409).json({\nmessage: 'User already exists!',\n});\n}\nif (!user) {\nconst salt = await bcrypt.genSalt(10);\nconst hashedPassword = await bcrypt.hash(req.body.password, salt);\nconst newUser = new User({\nemail: req.body.email,\npassword: hashedPassword,\n});\nawait newUser.save();\nres.status(201).json({\nmessage: 'User created!',\n});\n}\n});\n});\n// Logging in a user\nrouter.post('/login', async (req, res) => {\ntry {\nconst user = await User.findOne({ email: req.body.email });\nif (!user) {\nres.status(401).json({\nmessage: 'Login failed!',\n});\n}\nif (user) {\nconst isMatch = await bcrypt.compare(req.body.password, user.password);\nif (!isMatch) {\nres.status(401).json({\nmessage: 'Incorrect password',\n});\n}\nconst accessToken = generateAccessToken({ user: req.body.email });\nres.status(200).json({\naccessToken: accessToken,\nuserId: user._id,\n});\n}\n} catch (err) {\nres.status(500).json({\nmessage: 'Internal server error',\n});\n}\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:909>\n", "text": "});\nexport default router;\nTesting the login route\nOpen and modify the login request to pass a body\napi/user.http\ncontaining an email address and a password:\nPOST http://localhost:3000/api/user/login HTTP/1.1\ncontent-type: application/json\n{\n\"email\": \"testuser@test.com\",\n\"password\": \"testing123\"\n}\n###\nWith the server running, enter a unique email address (it doesn't\nhave to be real, of course) into the body of the sign-up request\nand click the Send Request link to create a new user.\nIf the new user is successfully created, put the same username\nand password into the body of the test login route and click the\nSend Request link. You should get back a status code, an\n200 OK\nobject containing the from the User collection, and an access\n_id\ntoken, as shown in Figure 10-6.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:910>\n", "text": "FIGURE 10-6: Getting an access token.\nLooking at an access token\nTake a close look at the following access token (which matches\nthe one shown in Figure 10-6):\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoidGVzdHVzZ\nXI0QHRlc3QuY29tIiwiaWF0IjoxNjcxMjgwMjQ4LCJleHAiOjE2NzEyODI\nwNDh9.Z8UYR3Eg8utIuNQEUS5SqJdZ9azQey-vm6jbDocgqFI\nAlthough an access token looks like it's encrypted, it's not. JSON\nweb tokens are JSON objects. The reason it looks like a garbled\nmess of characters is that the JSON object has been encoded\nusing Base64 format.\nDecoding Base64 is simple. The easiest method is just to drop it\ninto an online tool like the one at .\nhttps://base64decode.org\nWhen I decode this token, I get the following result:\n{\"alg\":\"HS256\",\"typ\":\"JWT\"}\n{\"user\":\"testuser4@test.com\",\n\"iat\":1671280248,\"exp\":1671282048}\n[series of unprintable characters]\nWhen its decoded, you can see that the access token includes\nthese three parts:\nAn object containing information about the token\nitself: It includes the algorithm that was used to sign the\ntoken and the type of token (which is JWT).\nThe actual token: The first property of the token is the data\nthe server passed to the function ( ).\njwt() testuser4@test.com\nThe second property is , which stands for Issued At Time\niat\n\u2014 it gives the time (in UNIX time) that the token was issued.\nThe third property is , which gives the time the token\nexp\nexpires. If you do the math, you'll find that the value for the\nproperty is 1800 higher than the property's value.\nexp iat\nThe digital signature: This is a hash that the server can use\nto confirm that the token is authentic.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:911>\n", "text": "Using an access token\nOnce you have an access token, you can use it to access secured\nroutes. In this section, I show you how to create a secured route\nand then test it out using an access token. Follow these steps:\n1. Open , import dotenv, and run\nroutes/posts.js\n:\ndotenv.config()\nimport dotenv from 'dotenv';\ndotenv.config();\n2. Import jwt from jsonwebtoken:\nimport jwt from 'jsonwebtoken';\n3. Import the Post model:\nimport Post from '../models/post.js';\n4. Create a new middleware function named\nvalidateToken() in containing the code\nroutes/posts.js\nfrom Listing 10-15.\n5. Pass the middleware function to the\nvalidateToken()\nrouter for creating a new document in the Posts\ncollection, as shown in Listing 10-16.\n6. Add a new request to that passes an\napi/posts.http\naccess token using the Authorization header and an\nobject containing a text property, as shown in Listing\n10-17.\n7. Use the login route to generate a token, and then\npaste that token after in the POST request to\nBearer\n.\n/api/posts\nWhen you click the Send Request link, the token is validated\nand a new document is inserted into the database, as shown\nin Figure 10-7.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:912>\n", "text": "LISTING 10-15: The Function for\nValidating Tokens\nfunction validateToken(req, res, next) {\nconst authHeader = req.headers['authorization'];\nconst token = authHeader.split(' ')[1];\nif (token == null) res.sendStatus(400).send('Token not present');\njwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {\nif (err) {\nres.status(403).send('Token invalid');\n} else {\nreq.user = user;\nnext();\n}\n});\n}\nLISTING 10-16: The Create New Post\nRoute\n// Creating a new post\nrouter.post('', validateToken, (req, res, next) => {\nconst post = new Post({\ntext: req.body.text,\n});\npost.save().then((createdPost) => {\nres.status(201).json({\nmessage: 'Post added successfully',\npost: {\n\u2026createdPost,\nid: createdPost._id,\n},\n});\n});\n});\nLISTING 10-17: Creating a New Post\nPOST http://localhost:3000/api/posts HTTP/1.1\ncontent-type: application/json\nAuthorization: Bearer\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiY2hyaXNAbWlubmljay5jb20iLCJp\nYXQiOjE2Njc3NzIxMzgsImV4cCI6MTY2Nzc3MjQzOH0.qA74AMbkYP9O3cA0s9fyAdKEbqmPphQpb\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:913>\n", "text": "Xq2Z9XDrQY\n{\n\"text\": \"test post 1\"\n}\n###\nFIGURE 10-7: New post created!\nNEXT STEPS\nI'm out of space in this book, but if you want to see the other necessary\nroutes for this server-side application as well as how to access your new API\nfrom a client application, you can download the latest code from my GitHub\nrepository at https://github.com/chrisminnick/javascriptaio.\nIf you have any questions, comments, or feedback on this app or on this book\nin general, you can email me at chris@minnick.com. Best wishes!\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:914>\n", "text": "Index\nSymbol and Numerics\n&& operator, conditional rendering with, 288\u2013289\n+ (addition) operator, 83, 86\u201387\n&& (And) operator, 87\u201388\n* (asterisk), 228, 700\n(backslash), 70, 71\n` (backtick character), 53, 70\u201371\n: (colon), 375\n+ (concatenation operator), 71\n{} (curly braces), 78\n$ (dollar sign), 685\u2013686\n-- (decrement) operator, 86\u201387\n/ (division) operator, 83, 86\u201387\n{{}} (double curly braces), 372\n\u201c (double quote), 71\n== (equality) operator, 85\u201386\n** (exponentiation) operator, 86\u201387\n> (greater than) operator, 85\u201386\n>= (greater than or equal to) operator, 85\u201386\n++ (increment) operator, 86\u201387, 97\n!= (inequality) operator, 85\u201386\n< (less than) operator, 85\u201386\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:915>\n", "text": "<= (less than or equal to) operator, 85\u201386\n* (multiplication) operator, 83, 86\u201387\n! (negation operator), 302\n! (Not) operator, 87\u201388\n|| (Or) operator, 87\u201388\n. (period), 79\n% (remainder) operator, 86\u201387\n? (question mark), 700\n\u201c (quotation mark), 70\n' (single quote), 71\n[] (square braces), 375\n!== (strict inequality) operator, 85\u201386\n=== (strict equality) operator, 85\u201386\n- (subtraction) operators, 83, 86\u201387\n\u2026 (three dots), 122\u2013123\n=== (triple equals operator), 132\nstatus code, 217\n200\nstatus code, 217\n301\nstatus code, 218\n400\nstatus code, 218\n401\nstatus code, 218\n404\nstatus code, 218\n500\nA\nevent, 187\nabort\nabove the fold content, 238\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:916>\n", "text": "absolute path, 622\nabstraction, 168\nacceptance testing, 547\naccess tokens\nabout, 750\u2013751\nusing, 751\u2013753\nAccess-Control-Allow-Methods HTTP headers, 634\nAccess-Control-Allow-Origin HTTP headers, 634\nproperty, 250\nactiveElement\nmethod, 184, 186\u2013190, 193\u2013194, 199, 200\u2013\naddEventListener()\n202, 256, 328, 413, 415\nadding\napp server, 723\u2013724\nelements to the DOM, 254\u2013255\nglobal styles, 292\u2013293\nlocal styles, 293\nsalt to hashing, 738\nserver modules, 723\u2013724\nstyle, 509\u2013510\nstyle to components, 387\u2013393, 447\u2013449\nworkspaces, 669\naddition (+) operator, 83, 86\u201387\nmethod, 643\naddJS()\nmethod, 649\naddListener()\nfunction, 140\naddNumbers()\nAdvanced Research Projects Agency Network (ARPANET), 628\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:917>\n", "text": "method, 256\nafter()\nmethod, 473\nafterUpdate()\nmethod, 37, 199, 248, 372\u2013373\nalert()\nanalyzing complete Express server, 707\u2013712\nAnd (&&) operator, 87\u201388\nanonymous functions\ndeclaring, 150\nwriting as arrow functions, 152\nAPI server\nExpress, 709\ntesting, 711\u2013712\nAPIs\nabout, 563\nbuilt-in browser, 242\u2013243\ncustom, 243\nselecting, 352\u2013353\nfunction, 189\u2013190\napp()\nmethod, 251, 254\u2013255, 256\nappend()\nmethod, 703\napp.get()\napplication generator tool (Express), 715\u2013720\napplication-level middleware, 703\nmethod, 157\napply()\nmethod, 703\napp.post()\nmethod, 703\napp.put()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:918>\n", "text": "apps\nadding app server, 723\u2013724\nconfiguring, 349\nmounting multiple, 349\u2013350\nSvelte, 427\u2013430\nmethod, 703, 717\u2013718\napp.use()\nApress, 62\narguments\nabout, 140\ndynamic, 375\npassing\nabout, 145\u2013148, 584\nto directives, 375\nto event handlers, 329\u2013330\nfunctions as, 146\u2013147\nto listeners, 642\u2013644\nto transitions, 470\nusing return value as, 149\narguments object, 146\narithmetic operators, 86\nARPANET (Advanced Research Projects Agency Network), 628\nconstructor, 108\nArray()\narray literal notation, 109\narray methods\nlooping with, 117\u2013121\nupdates and, 442\u2013445\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:919>\n", "text": "method, 147, 291\nArray.map()\narrays\nabout, 79, 105\u2013107\naccessing elements, 110\u2013111\ncreating, 108\u2013110\ndeleting elements, 111\u2013112\ndestructuring, 122\nfiltering, 121\nlooping with array methods, 117\u2013121\nmapping, 119\u2013121\nmodifying, 111\nprogramming with array methods, 112\u2013116\nreducing, 118\u2013119\nslicing, 116\nsplicing, 116\nspreading, 122\u2013123\nusing directive with, 382\u2013383\nv-for\narrow functions\ndefining methods using, 332\u2013333\nknowing limits of, 154\nsimplifying, 152\u2013153\nusing as event handlers, 643\u2013644\nwriting anonymous functions as, 152\nASCII, 605\u2013606\nassignment operators, 85\nassignments, triggering reactivity with, 442\nassociativity, 84\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:920>\n", "text": "asterisk (*), 228, 700\nfunctions\nasync\nabout, 206\u2013210\ncatching exceptions with, 659\nconverting promise chains to, 208\u2013209\nunblocking code with, 238\nasynchronicity, of database operations, 693\nasynchronous JavaScript\nabout, 197\u2013198\ncallback function, 200\u2013202\nevents, 199\u2013200\npromises, 202\u2013210\nreading, 198\u2013199\nusing AJAX, 210\u2013222\nwriting, 197\u2013222\nasynchronous JavaScript and XML (AJAX)\nabout, 210\u2013211\ncalling other methods, 213\u2013214\nResponse\nobject, 215\u2013216\nfetch init\ngetting data with Fetch API, 211\u2013213\ngetting JSON data, 222\nhandling errors, 214\u2013215\nfetch()\nHypertext Transfer Protocol (HTTP), 216\u2013218\nmaking requests with CORS, 218\u2013220\nsending JSON data, 222\nworking with JSON data, 220\u2013222\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:921>\n", "text": "asynchronous requests, waiting for, 479\u2013481\nattaching modifiers, to event listeners, 464\u2013465\nattributes\ndifferent in JSX, 284\u2013285\nevent, 328\nstyle, 293\u2013294\nproperty, 255\nattributes\ninterface, 242\nAudioTrack\nauthentication. See registration and authentication\nautomated build toolchain, 514\nautomating build script, 513\u2013522\nblock, 479\u2013481\n#await\nB\nb (backspace), 71\nBabel, transpilation with, 283\nbackpressure, 598\u2013599\nbackslash (), 70, 71\nbackspace (b), 71\nbacktick character (`), 53, 70\u201371\nbang (converting) operator, 76\nbase classes, 169\u2013170\nBase64, 607, 750\nbcrypt library, 738\u2013739\nmethod, 256\nbefore()\nmethod, 473\nbeforeUpdate()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:922>\n", "text": "Berners-Lee, Tim, 383\nbidirectional connection, 667\ndata type, 74\u201375\nbigInt\ndirective, creating two-way bindings with, 466\u2013468\n:bind\nmethod, 158, 161\u2013162, 308, 331\nbind()\nbinding\ndata to templates, 398\u2013400\nexpressions, 372\nforms to events and data, 419\u2013420\nNode.js, 563, 564\nselect inputs, 467\u2013468\nBlink, 235\nmethod, 213\u2013214\nblob()\nblock comments, 51\u201352\nblock-scoped variables, 80\nmethod, 248\nblur()\nproperty, 250\nbody\n, 706\nbody-parser\n, 210\nbookLoad()\nBoole, George, 75\nBoolean data type, 75\u201376\nfunction, 141\nBoolean()\nBootstrap, 292\nbootstrapping, with vue-create, 344\u2013346\nstatement, 102\u2013103\nbreak\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:923>\n", "text": "breakpoints\ndefined, 660\nsetting, 544\u2013546, 669\u2013671\nbrowser chrome, 234\nbrowser engine, 235\nbrowser windows, running code in, 35\u201340\nmethod, 607\u2013609, 610\nBuffer.alloc()\nmethod, 610\nBuffer.compare()\nmethod, 610\nBuffer.concat()\nmethod, 609, 610\nBuffer.from()\nmethod, 610\nBuffer.isBuffer()\nbuffers\nabout, 603\u2013604\ncontent, 605\u2013606\ncreating, 607\u2013609\ndecoding, 606\u2013607\nencoding compared with decoding, 604\niterating over, 611\nmethods, 609\u2013611\nbuild script, automating, 513\u2013522\nbuilt-in browser APIs, 242\u2013243\nbuilt-in components, in JSX, 284\u2013285\nbuilt-in directives, 373\u2013375\nbuilt-in elements, 451\u2013452\nbuilt-in events, triggering, 193\u2013194\nbuilt-in matchers (Jest), 551\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:924>\n", "text": "built-in middleware, 704\u2013705\nbuilt-in objects, methods of, 142\nbyte, 605\nC\nmethod, 157\ncall()\ncallback functions, 117\u2013118, 146, 200\u2013202\ncallback pattern, Node.js, 584\u2013586\ncallbacks, opening files with, 614\u2013616\ncalling\nfunctions, 117, 140, 372\nmethods, 213\u2013214\nResponse\ncamelCase\nin JavaScript, 32\nin JSX, 284\n, 243\nCanvas API\noption, 188\ncapture\ncarriage return (r), 71\ncase-sensitivity, of JavaScript, 31\nfunction, 128\nCat()\nfunction, 203, 657\u2013658\ncatch()\ncatching\nexceptions\nwith functions, 659\nasync\nwith promises, 656\u2013659\nPromise rejection, 657\u2013658\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:925>\n", "text": "Chacon, Scott, 62\nchaining functions, 121, 165\u2013166\nchaining streams, 600\u2013602\nChakra, 237\nevent, 187\nchange\nchanging\narray lengths, 111\nreactive data, 400\u2013403\nfunction, 72\ncharAt\nCheat Sheet (website), 6\nchild, passing functions to, 159\u2013165\nproperty, 250, 255\nchildren\nchildren props, composition using, 323\u2013324\nChrome, debugging in, 542\u2013546\nChrome DevTools, debugging in, 667\u2013672\nchunking, 588\nclass fields syntax, 175\nkeyword, 169\u2013170\nclass\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:926>\n", "text": "classes\nabout, 167\u2013168\nabstraction, 168\nbase, 169\u2013170\ncomponents of, 307\u2013308\nconstructors, 171\u2013173\ncreating\nmethods in, 173\u2013174\nobjects with, 128\u2013129\ndefining event handlers in, 330\u2013332\nderived, 170\u2013171\nencapsulation, 168\ninheritance, 169\nmethods, 173\u2013177\npolymorphism, 169\npracticing with, 177\u2013179\nproperties, 173\u2013177\nproperty, 255\nclassList\nmethod, 248\nclearInterval()\nmethod, 248\nclearTimeout()\nevent, 187\nclick\nclient, 16\u201317\nmethod, 248\nclose()\nclosing files, using Promises, 616\u2013617\ncommand, 687\ncls\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:927>\n", "text": "code\ndocumenting, 51\u201354\nediting in Sources panel, 544\nrunning\nin browser windows, 35\u201340\non command line, 570\nin console, 33\u201334\nunblocking with and , 238\nasync defer\nwriting through testing, 552\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:928>\n", "text": "code listing\nadding styles, 509\u2013510\nwith map rendering, 528\u2013529\nApp.js\nassigning arrays to trigger reactivity, 444\u2013445\nasynchronous JavaScript user interface, 200\nautomatically refreshing stock price, 478\u2013479\nbinding\nattributes to data, 398\u2013399\nclass methods before passing them as attributes, 330\u2013\n331\ninputs to data, 466\u2013467\nmethods in constructor, 331\u2013332\nselect inputs, 467\u2013468\nbookstore and , 160\u2013161\nshoppingCart\nbreaking into modules, 506\nindex.js\ncalculating dog's age in human years, 549\ncalling from bookstore, 162\nshoppingCart.displayCart()\ncatching\nerrors with , 214\nfetch()\nexceptions with / , 659\nasync await\nPromise rejections, 658\nthrown exceptions, 656\nchanging maximum number of listeners, 646\u2013647\nclass component, 307\nclearing intervals in , 316\ncomponentWillUnmount()\ncommenting templates, 453\u2013454\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:929>\n", "text": "compiled JSX, 282\u2013283\ncomponents\ncreated using Composition API, 352\ncreated using Options API, 351\nwith a , 384\n<slot>\ncomposing components, 322\u2013323\nErrorMessage\nconditional rendering\nwith &&, 288\u2013289\nwith conditional operator, 290\nwith element variables, 287\u2013288\nof elements, 455\ninside in expressions, 455\u2013456\nconditionally defining functions using expressions, 151\nconfiguring\nBabel presets, 524\nWebpack to use , 523\nbabel-loader\nconnecting\nto MongoDB in , 732\napp.js\nto MongoDB server, 690\nconstructor for vehicles, 135\ncontrolling styles programmatically, 392\nconverting buffers to strings, 618\ncopying\nfiles using writable streams, 596\nfiles with and , 620\nreadFile() writeFile()\n, 430\ncounter/svelte\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:930>\n", "text": "counting with , 380\nv-for\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:931>\n", "text": "creating\nand accessing objects, 403\nref\nand appending element nodes, 254\n, 525\nApp.js\nclasses with public, private, and static fields, 178\u2013179\ncomponents that use , 323\nprops.children\nconflicting styles, 388\ncontext, 490\ndatabase configuration object, 690\nduplex streams with , 598\npipe()\nglobal styles within scoped styles, 448\u2013449\nJavaScript modules, 577\nlists from arrays, 291\nlists from arrays of objects, 456\u2013457\nmethods in classes, 173\nnew post route, 752\nnew posts, 753\nnumbered lists from arguments, 146\nobjects using , 130\nObject.create()\npersistent state, 318\u2013319\npromise chain, 202\nreactive state objects, 400\nreactive state with , 401\n<script setup>\nreadable stores, 484\nstatic members, 176\nstreaming counters, 593\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:932>\n", "text": "style modules, 295\ntransform streams, 600\nuncontrolled inputs, 338\nand using CSS modules, 390\u2013391\nwritable stores, 484\nCSS Modules file, 296\ndefault , 348\nmain.js\ndefault vue-create file, 347\nindex.html\ndefining\ncustom directives in object, 377\ndirectives\nevent handler functions using arrow function syntax, 333\nfunctions using function expressions, 151\nmultiple props, 441\nnamed event handler functions, 329\nnamed slots, 461\nprops, 440\nprops using , 396\u2013397\ndefineProps()\nprops without assigning them to objects, 397\nand using props with , 397\u2013398\nsetup()\ndirective, 376\nv-play\ndemonstrating JavaScript expressions in templates, 372\nderiving class from base class, 172\nfunction, 533\ndetectEdgeCollision\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:933>\n", "text": "detecting\ncollisions, 532\nkeyboard combinations, 418\ndisplaying\nbookstore and cart, 163\u2013164\nreadable store's value, 489\nenabling Reactivity Transform, 404\u2013405\ncomponent, 367\nErrorButton\nExpress API server, 707\u2013708\nextending\nclasses to create specific classes, 321\n, 641\nEventEmitter\n, 314\nReact.PureComponent\nfetching\ndata inside , 312\u2013313\ncomponentDidMount()\nlists using lifecycle method, 364\nonMounted()\nfiles\ncontaining modules, 224\ncontaining named exports and default export, 226\nthat export several modules, 576\nfinding out whether items are directories, 624\nfinished file, 724\nserver.js\nfinished module, 734\nuserModel\nfiring built-in events, 192\u2013193\nflashlight component, 302\nforwarding events, 465\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:934>\n", "text": "function component example, 305\nfunction components with timer, 319\u2013320\nfunctions\nthat takes arrays, 147\nthat throws errors, 655\nfor validating tokens, 752\nwithout context, 156\nGamelet.js with comments, 51\u201352\ngenerated HTML, 715\ngenerated HTML templates, 504\nfunction, 508\ngenerateMap()\ngenerating HTML lists from arrays, 120\u2013121\ngetting\nabsolute path to files, 622\ndata , 476\u2013477\nonMount()\nfile information, 624\u2013625\nand using function, 486\nunsubscribed()\nvalues of uncontrolled inputs from object, 338\u2013\nWindow\n339\nhandling\nerrors, 367\u2013368\nforwarded events, 466\nHello Express, 698\nhigh-level view of Bing.com, 299\nHTML contact form for testing application server, 662\nHTML document, 39\nHTML page, 48\u201349\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:935>\n", "text": "importing\ncore modules using ECMAScript modules, 566\nmodules, 576\nmodules into HTML files, 230\nstyle modules, 295\nand using components, 370\u2013371\nand using core modules, 565\nand using CSS Modules, 296\nfile for Svelte app, 427\nindex.html\nRoute file, 719\nindex.js\ntemplate, 719\nindex.pug\ninserting documents into collections, 692\niterating over buffers, 611\nIt's Alive!, 630\nJavaScript files, 38, 505\nJavaScript Name Creator program, 30\nJSON data, 221\nJSON document, 675\u2013676\ntemplate, 720\nlayout.pug\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:936>\n", "text": "listening for\nchunks, 591\nand handling click events, 161\nkey events, 464\nlogging\nbefore and after updates, 473\nand displaying squares of numbers, 474\nreferences to tacos with events, 640\u2013641\n, 701\nreq.params\nrequests, 649\nrequests with middleware, 702\nin users, 743\nlooping over arrays, 382\u2013383\nfile for Svelte app, 428\nmain.js\nmethod handlers receiving event objects, 415\u2013416\nmounting multiple apps, 350\nfunction, 507\nmoveBall()\nnamed function module, 225\nnaming slots, 386\nnested callbacks, 201\nnested calls, 207\nsetTimeout\nNode.js web server, 568\u2013569\nobjects with nested properties, 130\u2013131\n's component, 526\nobstacle\noverriding methods in classes, 174\nwith ECMAScript modules enabled, 580\npackage.json\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:937>\n", "text": "passing\narguments to listeners with , 642\nemit()\narguments using inner functions, 330\ncontent to slots, 460\nkey attributes, 457\u2013458\nmultiple props, 441\nobjects into function, 143\nobjects to functions, 156\u2013157\nprops, 301, 441\nthree aliases and objects to , 382\nv-for\nby value, 143\nposts API requests, 729\nPosts model, 734\nprinting properties of objects, 131\nPug template, 714\npushing data into streams, 592\nputting together app components, 267\u2013268\nrandom movie picker app, 153\nrandom number guessing game, 101\nrandom number guessing game with , 102\ndo\u2026while\nreading\ndirectory files and logging filenames, 623\nfiles asynchronously and logging it, 617\nfrom files at higher level in file structure, 621\nfiles synchronously, 619\nREADME file for Gamelet, 54\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:938>\n", "text": "registering 11 event listeners, 645\nremoving event listeners, 647, 648\nrendering\nlists of posts, 434\nthe root component, 524\nwith state data, 311\nreplacing promise chains with async functions, 209\nrequest for testing user registration, 740\nresponding to requests with requests, 631\nrewriting using async/await, 208\ngetSquare\nroot component, 428\u2013429\nfile with login route, 747\u2013749\nroutes/user.js\nrouting with JavaScript, 258\u2013259\nsample file, 582\n.env\nsample HTML page, 496\nsample JSON arrays of objects, 290\u2013291\nobject with complete build script, 521, 522\nscripts\nseeing properties, 653\nError\nselecting\nelements with method, 253\nquerySelectorAll()\nwith method, 252\ngetElementById()\nserver without streaming, 588\u2013589\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:939>\n", "text": "serving\nbuffers as images, 606\u2013607\nstatic HTML files from Node.js, 713\nsetting\napplication options to specify global error handler,\nconfig\n349\nevent listeners, 188\u2013189\nglobal properties, 349\nstate in constructor, 310\nup Express, 724\nsign-up route, 739\nsimple components with pure HTML templates, 370\nsimple counter component written in Svelte, 439\nsimple React component, 282\nsimple streaming server, 590\nsimple web application for learning about debugging, 660\u2013661\nsingle-file component using attribute, 360\u2013361\nsetup\nsingle-file component's script element, 358\nsingle-file Todo app, 359\nskeleton\nfor , 726\nroutes/posts.js\nfor , 727\nroutes/user.js\nspecifying\nattribute values using expressions, 286\nfallback content for slots, 386\nstarter template for single-file component, 358\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:940>\n", "text": "starting\nfile, 499\npackage.json\ntimers on mounts, 472\u2013473\nstatic navigation bar mockup, 266\nstatic search box mockup, 267\nstreaming\nin flowing mode, 594\u2013595\nin paused mode, 595\nsubscribing to stores, 485\nsupporting both callbacks and promises, 586\nsynchronous JavaScript user interface, 199\nsynchronous program, 198\ntargeting\ncontent to named slots, 460\nnamed slots, 386\u2013387\ntesting\nfor collisions with obstacles, 511\ndog-age calculator, 549\nfor edge collisions, 510\nmap component, 554\ntext expressions escape HTML, 458\nunhandled promise rejection, 656\u2013657\nupdating data with 1-way binding, 419\ncustom hook, 324\u2013325\nuseGitHubRepos\nuser API requests, 728\nUsers Route file, 718\u2013719\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:941>\n", "text": "using\n$ syntax, 488\narray methods, 443\narrow functions as event handlers, 643\nblock, 480\u2013481\n#await\ncallback functions, 147\nclass, 129\ncomputed properties, 406\u2013407\nconstructor function, 128\ncontrolled inputs, 336\u2013337\ncustom elements, 452\u2013453\ncustom hooks, 325\ndifferent transitions for entering and leaving, 470\ndynamic loading, 229\nelement variables, 287\nenvironment variables, 583\nerror-handling middleware, 704\nevent bubbling to detect events on multiple elements,\n191\n, 707\nexpress.static()\nblock, 658\u2013659\nfinally()\nto display properties of objects, 99\nfor\u2026in\nand , 616\nfs.open() fs.close()\nand with Promises, 616\u2013617\nfs.open() fs.close()\n, 490\u2013491\ngetContext()\nglobal and scoped styles, 389\u2013390\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:942>\n", "text": "@html to render HTML in text expressions, 459\ninline event handlers, 412\ninline JavaScript, 36\u201337\nJavaScript modules, 578\nmethod handlers, 413\nmiddleware to modify objects, 703\nres\nmultiple conditions with &&, 289\nstream, 599\nPassThrough\npromises to load data with , 203\u2013204\nXMLHttpRequest()\nprops to create more reusable components, 322\nreactive context, 491\u2013492\nreactive state objects, 401\nreactive statements, 445\u2013446\nReactivity Transform, 405\ntop optimize rendering of function\nReact.memo()\ncomponents, 314\ninside templates, 403\u2013404\nrefs\nas event handler, 162\nremoveBook\nrouter-level middleware, 703\nroutes in , 728\napp.js\nsame function in multiple objects, 159\nscoped CSS, 388\u2013389\nshorthand version of , 399\nv-bind\nslots to render children, 460\nand with stores, 489\nstart() stop()\nstate in class components, 308\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:943>\n", "text": "state in function components, 306\nstores to provide and update preferences, 486\u2013487\nstyle attribute, 294\nstatement, 94\nswitch\ntemplate literal string, 71\nthis constructor, 172\nin class\nin event handlers, 642\u2013643\nthis\nto wait for state change to be applied, 474\u2013475\ntick()\ntransform involving user input, 601\u2013602\ntransform streams, 600\nwith upsert option, 695\u2013696\nupdateOne()\nto perform side effects, 317\nuseEffect\nwith objects, 381\nv-for\n, , and , 379\nv-if v-else-if v-else\ndirective, 420\nv-model\nviewing properties of object, 329\nSyntheticBaseEvent\nwritten using function components, 334\nVolumeSlider\nwatching values to trigger side effects, 409\nwrapping\ncomponents around other components, 324\nstatements and function calls in arrow functions, 416\nwriting log messages to files, 597\ncoding, with Git, 55\u201362\ncollections\ncreating, 682\ninserting documents into, 691\u2013692\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:944>\n", "text": "collisions\ndetecting, 531\u2013534\ntesting for, 510\u2013511\ncolon (:), 375\ncombining operators, 89\ncommand line\nrunning code on, 570\nsetting environment variables from, 582\ncommand-line debugger, 663\u2013667\ncommands\nread-evaluate-print loop (REPL), 573\u2013575\nrerunning in console, 34\u201335\ncomma-separated value (CSV) files, 109\u2013110\ncomments, documenting Svelte with, 453\u2013454\nCommonJS module, 575\u2013576\nmethod, 610\ncompare()\ncomparing objects, 132\u2013134\ncomparison operators, 85\u201386\ncompilation, 11\u201312\ncomplex data type, 78\u201379\ncomplex queries, using operators, 685\u2013686\ncomponent hierarchy, designing, 265\u2013266\ncomponent lifecycle\nabout, 309\u2013316\nfetching data in Svelte, 476\u2013481\nfollowing, 362\u2013366\nSvelte lifecycle, 471\u2013476\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:945>\n", "text": "method, 309, 312\u2013313, 316\u2013317, 318\ncomponentDidMount()\nmethod, 313, 315\ncomponentDidUpdate()\ncomponents\nadding style to, 387\u2013393, 447\u2013449\nbuilding with, 437\u2013449\nerror handling in, 366\u2013368\nidentifying contents of, 439\u2013447\nnaming, 362\nVue, 357\u2013368\nwriting, 437\u2013439\nmethod, 315\u2013316, 319\u2013320, 365\u2013366\ncomponentWillUnmount()\ncomposing, with slots, 383\u2013387, 459\u2013461\ncomposition\nof components, 321\u2013325\nwith custom hooks, 324\u2013325\nusing children props, 323\u2013324\nusing explicit props, 322\u2013323\nComposition API, 352\n, 706\ncompression\nfunction, 406\ncomputed()\ncomputing properties, 405\u2013408\nmethod, 72, 112\nconcat()\nconcatenation operator (+), 71\nconcatenation operators, 86\u201387\nconditional code, creating with return, 149\u2013150\nconditional operators, conditional rendering with, 289\u2013290\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:946>\n", "text": "conditional rendering\nabout, 88\nwith JavaScript, 378\nJSX, 286\u2013290\nusing directives, 378\u2013379\nconfiguring\napps, 349\ndev server, 515\u2013518\ndirectories, 722\u2013723\nGit, 57\u201360\nJest, 547\u2013548\nVisual Studio Code (VS Code), 43\u201350\nWebpack for React, 522\u2013524\nconnecting\nto databases, 731\u2013733\nwith interfaces, 242\nto MongoDB server, 689\u2013691\nConnection HTTP headers, 634\nconsole\nrerunning commands in, 34\u201335\nrunning code in, 33\u201334\nproperty, 248\nconsole\nmethod, 593\nconsole.log()\n, creating constants with, 66\u201368\nconst\nconstants, creating with , 66\u201368\nconst\nconstructing store, 483\u2013490\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:947>\n", "text": "constructor function, 108, 128\nmethod, 309\u2013310\nconstructor()\nconstructors, 171\u2013173\ncontent, buffer, 605\u2013606\nContent-Length HTTP headers, 634\ncontent-type HTTP headers, 634\ncontext\nfunctions and, 155\u2013165\nsetting of functions, 157\u2013158\nstatement, 102\u2013103\ncontinue\ncontrolled inputs\ndefined, 335\nusing, 335\u2013337\nconverting\nto Boolean, 75\u201376\nnested callbacks to async functions, 207\u2013208\npromise chains to async functions, 208\u2013209\nto React, 522\u2013534\nto streams, 589\u2013590\nbetween strings and numbers, 74\nUI to React, 524\u2013529\n, 706\ncookie-parser\ncopying\nJavaScript code, 15\u201322\nobjects, 132\u2013134\nstatic assets, 519\u2013520\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:948>\n", "text": "core modules, 564\u2013566\n, 706\ncors\nCORS, making requests with, 218\u2013220\nfunction, 348, 349\ncreateApp()\nmethod, 251\ncreateAttribute()\nmethod, 251\ncreateComment()\nmethod, 251, 254\u2013255\ncreateElement()\nmethod, 251\ncreateEvent()\nmethod, 641\ncreateInterface()\nmethod, 593\u2013594\ncreateReadStream()\nmethod, 278\u2013279\ncreateRoot()\nmethod, 630\u2013631\ncreateServer()\nmethod, 251\ncreateTextNode()\nmethod, 687\u2013688\ncreateUser()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:949>\n", "text": "creating\nabout, 495\narrays, 108\u2013110\nbasic routes, 725\u2013728\nbuffers, 607\u2013609\ncollections, 682\nwith components, 437\u2013449\nconditional code with return, 149\u2013150\nconstants with , 66\u201368\nconst\ncreating modules, 506\u2013512\ncustom events, 194, 640\u2013641\ndatabases, 681\u2013682\ndirectories, 722\u2013723\nduplex streams, 598\u2013599\nelements to the DOM, 254\u2013255\nexpressions, 82\nforms with React, 324\u2013339\nIDs, 682\u2013683\ninstances, 170\nlists, 290\u2013291\nloops, 97\u2013103, 456\u2013458\nmanaging dependencies with npm, 497\u2013503\nmethods in classes, 173\u2013174\nmodules, 506\u2013512\nNode.js modules, 575\u2013580\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:950>\n", "text": "objects\nabout, 127\u2013130\nwith class, 128\u2013129\nwith method, 130\nObject.create()\nusing constructor functions, 128\nusing literal notation, 127\noptions request, 635\nprojects in Visual Studio Code (VSC), 25\u201327\nReact components, 297\u2013325\nReact UI, 265\nreactive data, 432\u2013434\nreactive statements, 445\u2013446\nreadable stores, 484\nreadable streams, 592\u2013595\nreasons for tools, 496\u2013497\nrequests with CORS, 218\u2013220\nscaffolding in Svelte, 425\u2013426\nschema with Mongoose, 730\u2013734\nsource maps, 542\u2013544\nstatic version in React, 266\u2013268\nstrings with template literal notation, 70\u201371\nstyle modules, 295\ntransition animations, 468\u2013469\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:951>\n", "text": "two-way bindings\nwith directive, 466\u2013468\n:bind\nwith , 420\nv-model\nuncaught Promise rejection, 656\u2013657\nunidirectional transitions, 470\nuser model, 733\u2013734\nvariables with , 63\u201366\nlet\nweb servers, 630\u2013638\nwritable stores, 484\nwritable streams, 596\u2013597\nwriting\ndev script, 505\u2013506\nfiles, 503\u2013505\ncross-site scripting (XSS), 218, 745\u2013746\nCSS\nglobal, 387\u2013388\nmodules, 390\u2013391\nscoped, 388\u2013389\ndirective in, 391\u2013393\nv-bind\nCSS Modules file, 296\nCSV (comma-separated value) files, 109\u2013110\ncurly braces ({}), 78\ncursor objects, 693\u2013694\ncustom APIs, 243\ncustom directives, 376\u2013377\ncustom elements, 452\u2013453\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:952>\n", "text": "custom events, creating, 640\u2013641\ncustom hooks, composition with, 324\u2013325\nD\ndashes, in JavaScript, 32\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:953>\n", "text": "data\nabout, 63\narrays, 79\nbinding\nforms to events and, 419\u2013420\nto templates, 398\u2013400\ncomplex data type, 78\u201379\ncreating\nconstants with , 66\u201368\nconst\nvariables with , 63\u201366\nlet\ndeleting, 696\nfetching in Svelte, 476\u2013481\ngetting\nabout, 222, 693\u2013694\nwith Fetch API, 211\u2013213\nto node modules, 580\u2013584\nobjects, 78\u201379\nreactivity and, 395\u2013410\nrefreshing, 477\u2013479\nreturning, 149\u2013150\nsending, 222\ntypes of, 68\u201377\nupdating, 695\u2013696\nusing in React, 327\u2013339\nvariable scope, 80\ndata flow, implementing inverse, 269\u2013270\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:954>\n", "text": "method, 350\ndata()\ndata storage, networking and, 239\u2013240\ndata types\nin NoSQL databases, 676\u2013677\nprops, 300\u2013301\nrecognizing, 300\u2013304\nin relational databases, 676\ndatabases\nabout, 673\nconnecting to, 731\u2013733\ncreating, 681\u2013682\nMongoDB, 674\u2013681, 688\u2013696\nMongosh, 681\u2013688\nDate HTTP headers, 634\ncommand, 686\ndb\ncommand, 687\ndb.collectiondeleteMany()\ncommand, 687\ndb.collection.deleteOne()\ncommand, 687\ndb.collection.drop()\ncommand, 687\ndb.collection.find()\nmethod, 684\ndb.collection.find()\ncommand, 687\ndb.collection.insertMany()\ncommand, 686\ndb.collection.insertOne()\ncommand, 687\ndb.collection.updateMany()\ncommand, 687\ndb.collection.updateOne()\ncommand, 687\ndb.dropDatabase()\nevent, 187\ndblclick\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:955>\n", "text": "debugging. See error handling and debugging\ndeclaring\nanonymous function, 150\nvariables, 64\nfunction, 141\ndecodeURI()\nfunction, 141\ndecodeURIComponent()\ndecoding\nbuffers, 606\u2013607\nencoding compared with, 604\ndecrement (--) operator, 86\u201387\ndeep copy, 123\ndefault exports, 225\u2013226\ndefault parameters, setting, 147\u2013148\n, finding value of, 644\u2013645\ndefaultMaxListeners\n, unblocking code with, 238\ndefer\nfunction, 396\u2013397\ndefineProps()\ndefining\nevent handlers in class components, 330\u2013332\nfunction expressions, 150\u2013152\nfunctions, 140\nmethods using arrow syntax, 332\u2013333\nmodules, 224\nprops\nabout, 440\nwith , 396\u2013397\n<script setup>\nwith function, 397\u2013398\nsetup()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:956>\n", "text": "method, 217\nDELETE\ndelete operator, 112\nmethod, 696\ndeleteMany()\nmethod, 696\ndeleteOne()\ndeleting\narray elements, 111\u2013112\ndata, 696\nobject properties, 138\ndependencies\nabout, 497\ninstalling, 709\nmanaging with npm, 497\u2013503\nnpm, 501\ndeployment, 518\u2013519\nderived classes\nabout, 170\u2013171\noverriding methods in, 174\nfunction, 549, 550\ndescribe()\ndesigning\ncomponent hierarchy, 265\u2013266\nelements, 298\u2013299\ntemplates, 451\u2013461\ndestructuring arrays, 122\ndetecting collisions, 531\u2013534\ndetermining location, of states, 269\ndev scripts, writing, 505\u2013506\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:957>\n", "text": "dev server, configuring, 515\u2013518\ndevelopers, Node.js for, 561\u2013562\ndevelopment environment, starting, 22\u201329\nproperty, 248\ndevicePixelRatio\ndirectives\nbuilt-in, 373\u2013375\nconditional rendering using, 378\u2013379\ncreating two-way binding with directive, 466\u2013468\n:bind\ncustom, 376\u2013377\ndynamic arguments, 375\nlistening for events with directive, 463\u2013466\non:\nmodifiers, 375\u2013376\npassing arguments to, 375\nshorthand names, 375\nusing transition animations, 468\u2013470\ndirectories\nconfiguring, 722\u2013723\ncreating, 722\u2013723\nfinding, 624\ngetting information, 623\u2013625\nlisting files in, 623\nproperty, 594\n_dirname\ndisk space, troubleshooting, 50\nmethod, 192, 194, 256\ndispatchEvent()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:958>\n", "text": "dispatching\nevents programmatically, 192\u2013194\nsynthetic events, 328\u2013329\nmethod, 163\u2013164\ndisplayBookstore()\nmethod, 161\ndisplayCart()\nfunction, 149\ndisplayWeatherForecast()\nfolder, 520\u2013522\ndist\ndivision (/) operator, 83, 86\u201387\ninterface\nDocument\nabout, 242, 249\nadding elements to the DOM, 254\u2013255\ncreating elements to the DOM, 254\u2013255\nelement methods, 256\u2013257\nelement nodes, 255\u2013256\nfamily tree, 249\nmethods, 250\u2013251\nproperties, 249\u2013250\nselecting\nelement nodes, 251\nwith method, 252\ngetElementById()\nusing selectors, 252\u2013253\nvisualizing, 249\ndocumenting\ncode, 51\u201354\nSvelte with comments, 453\u2013454\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:959>\n", "text": "documents\nfinding, 684\u2013686\ninserting into collections, 691\u2013692\nlisting, 682\u2013683\ndollar sign ($), 685\u2013686\nfunction, 200\u2013202\ndoLogin()\nDOM\nadding elements to the, 254\u2013255\ncreating elements in the, 254\u2013255\nupdating, 354\u2013355\nfunction, 118\ndoMath()\nfunction, 208\ndoProcessing()\ndot notation, 79, 130\u2013131\ndouble curly braces ({{}}), 372\ndouble quote (\u201c), 71\nloops, 101\u2013102\ndo\u2026while\nmethod, 173\u2013174\ndrink()\nmethod, 155, 156, 157\ndrive()\nduplex streams, creating, 598\u2013599\ndynamic arguments, 375\ndynamic modules, loading, 229\ndynamically typed language, 68\nE\nECMA International, 14\u201315\nECMAScript, 14\u201315, 575\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:960>\n", "text": "editing code, in Sources panel, 544\neffects\nperforming on unmounting, 319\u2013320\nrunning, 317\u2013319\nEich, Brendan, 14\nelement methods, interface, 256\u2013257\nDocument\nelement nodes\ninterface, 255\u2013256\nDocument\nselecting, 251\nelement variables, conditional rendering with, 287\u2013288\nelements, designing, 298\u2013299\nembedded script, 237\nmethod, 640\nemit()\nemitting once, 649\nenabling reactivity, 304\nencapsulation, 168\nfunction, 141\nencodeURI()\nfunction, 141\nencodeURIComponent()\nencoding, decoding compared with, 604\nargument, 620\nencoding\nmethod, 636, 702\nend()\nend-to-end testing, 547\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:961>\n", "text": "engines\nbrowser, 235\nJavaScript, 237\nrendering, 235\u2013238\ntemplate, 713\u2013714\n, setting environment variables with, 582\u2013583\n.env\nenvironment variables, 581\u2013583\nequality (==) operator, 85\u201386\nmethod, 610\nequals()\nerror handling and debugging\nin Chrome, 542\u2013546\nin components, 366\u2013368\ndebugging Node.js programs, 660\u2013672\nerror types, 651\u2013652\nexceptions versus errors, 654\nhandling exceptions, 655\u2013659\nNode.js's object, 653\u2013654\nError\nobject (Node.js), 653\u2013654\nError\nerror-handling middleware, 703\u2013704\ncomponent, 322\u2013323\nErrorMessage\nerrors\nexceptions compared with, 654\nhandling with async/await, 210\nlinting, 537\u2013540\ntroubleshooting, 50\ntypes of, 651\u2013652\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:962>\n", "text": ", reading, 654\nerror.stack\nES modules, 577\u2013579\nESbuild, 515\nescaping characters, 70\nESLint\ninstalling, 536\u2013537\nintegrating into build script, 540\u2013541\nrunning, 537\nfunction, 141\neval()\nevent attributes, 185, 328\nevent handlers\nabout, 435\u2013436\nbasic, 464\ndefining in class components, 330\u2013332\npassing\narguments to, 329\u2013330\nfunctions from function components, 333\u2013334\nproperties of, 185\u2013186\nin React, 328\u2013334\nusing arrow functions as, 643\u2013644\nevent listeners\nattaching modifiers to, 464\u2013465\nremoving, 194\nevent modifiers\nabout, 416\u2013417\ndetecting combinations, 419\nkey modifiers, 417\u2013418\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:963>\n", "text": "event object, 190\nproperty, 248\nevent\nevent targets, selecting, 186\nEventEmitter\nabout, 640\ncreating custom events, 640\u2013641\nextending, 641\npassing arguments to listeners, 642\u2013644\n, 416\u2013417\nevent.preventDefault()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:964>\n", "text": "events\nabout, 181, 639\nasynchronous JavaScript and, 199\u2013200\nbinding forms to data and, 419\u2013420\ndispatching programmatically, 192\u2013194\nemitting once, 649\nevent loop, 183\u2013184\nclass, 640\u2013644\nEventEmitter\nforwarding, 465\u2013466\nhandling multiple, 466\nJavaScript runtime model, 182\u2013183\nlistening for, 184\u2013195\nlistening for with directive, 463\u2013466\non:\n, 644\u2013647\nmaxListeners\nremoving listeners, 647\u2013648\nresponding to, 411\u2013420\nsetting listeners with , 411\u2013416\nv-on\nSynthetic, 328\u2013329\nusing event modifiers, 416\u2013419\nusing in React, 327\u2013339\ninterface, 242\nEventTarget\nmethod, 112\nevery()\nexceeding maximum listeners for emitters, 645\u2013646\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:965>\n", "text": "exceptions\ncatching\nwith functions, 659\nasync\nwith promises, 656\u2013659\nerrors compared with, 654\nhandling, 655\u2013659\nexcluding files, from linting, 541\ncommand, 687\nexit\nfunction, 549, 551\nexpect()\nexpectations, 551\nexpiration, of tokens, 744\u2013745\nexponentiation (**) operator, 86\u201387\nexporting\nmodules, 224\u2013226\nprops, 440\u2013442\nrenaming exports, 228\nExpress\nanalyzing complete server, 707\u2013712\ninstalling, 697\u2013698\ninstalling dependencies, 709\ninstalling Express API server, 709\nmiddleware, 701\u2013707\nserver-side routing with, 699\u2013701\nserving views, 712\u2013715\nusing application generator tool, 715\u2013720\nmethod, 698, 703, 704\u2013705\nexpress()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:966>\n", "text": "expressions\nabout, 30, 81\nbuilding, 82\nclass, 170\nin JSX, 285\u2013286\ntext, 458\u2013459\nwatch, 546\nmethod, 725\u2013728\nexpress.Router()\nmethod, 706\u2013707\nexpress.static()\nextending , 641\nEventEmitter\nF\nfallback content, specifying, 385\u2013386\nfat arrow syntax, 119\nAPI\nFetch\nabout, 242\ngetting data with, 211\u2013213\nerrors\nfetch()\nabout, 218\nhandling, 214\u2013215\nobject, 215\u2013216\nfetch init\nmethod, 211, 215\u2013216, 222, 407, 655\nfetch()\nfetching data, in Svelte, 476\u2013481\nfields\ndefining, 174\u2013177\nreturning, 684\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:967>\n", "text": ", 243\nFile API\nfile descriptor, 615\nfile system\ngetting file and directory information, 623\u2013625\nimporting module, 613\u2013614\nfs\nreading files, 614\u2013619\nusing paths, 621\u2013623\nwriting files, 619\u2013620\nfiles\nclosing using Promises, 616\u2013617\nexcluding from linting, 541\ngetting information, 623\u2013625\nlisting in directories, 623\nopening using Promises, 616\u2013617\nreading, 614\u2013619\nwriting, 503\u2013505, 619\u2013620\nwriting to using Promises, 616\u2013617\nmethod, 112, 121\nfilter()\nfilter object, 684\nfiltering arrays, 121\nblock\nfinally()\nabout, 210\nusing, 658\u2013659\nmethod, 684, 685, 694\nfind()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:968>\n", "text": "finding\ndirectories, 624\ndocuments, 684\u2013686\nvalue of , 644\u2013645\ndefaultMaxListeners\nmethod, 694\nfindOne()\nfinishing login route, 746\u2013753\nfixing linting errors, 537\u2013540\nflow\nabout, 91\nchoosing a path, 91\u201396\ncreating loops, 97\u2013103\nflowing mode, 594\u2013595\nmethod, 194, 248\nfocus()\nfollowing component lifecycle, 362\u2013366\nloops, 97\u201398\nfor\nmethod, 112, 693\u2013694\nforEach()\nloops, 98\u201399\nfor\u2026in\nform feed (f), 71\nforms\nbinding to events and data, 419\u2013420\ncreating with React, 324\u2013339\nproperty, 250\nforms\nloops, 100\nfor\u2026of\nforwarding events, 465\u2013466\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:969>\n", "text": "module\nfs\nimporting, 613\u2013614\nreading readable streams from, 593\u2013594\nmethod, opening files with, 614\u2013616\nfs.open()\nmethod, reading from files with, 614\u2013617\nfs.read()\nmethod, 623\nfs.readdir()\nmethod, 671\u2013672\nfs.readFile()\nmethod, 624\u2013625\nfs.stat()\nmethod, writing to disks with, 619\u2013620\nfs.write()\nmethod, 620\nfs.writeFile()\nproperty, 248\nfullScreen\nfunction bodies, writing, 148\nfunction calls, stacking, 182\nfunction components\nabout, 304\u2013306\npassing event handler functions from, 333\u2013334\nusing lifecycle in, 316\u2013320\nfunction definition, 140\nfunction expressions, defining, 150\u2013152\nkeyword, 332\u2013333\nfunction\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:970>\n", "text": "functions\nabout, 139\u2013141\n, 140\naddNumbers()\nanonymous, 150, 152\n, 189\u2013190\napp()\n, 206\u2013210\nasync\n, 141\nBoolean()\ncallback, 117\u2013118, 146, 200\u2013202\ncalling, 117, 140, 372\n, 128\nCat()\n, 203, 657\u2013658\ncatch()\nchaining, 165\u2013166\n, 72\ncharAt\n, 406\ncomputed()\ncontext and, 155\u2013165\n, 348, 349\ncreateApp()\ndeclaration scope and hoisting, 150\ndeclaring anonymous, 150\n, 141\ndecodeURI()\n, 141\ndecodeURIComponent()\n, 396\u2013397\ndefineProps()\ndefining function expressions, 150\u2013152\n, 549, 550\ndescribe()\n, 149\ndisplayWeatherForecast()\n, 200\u2013202\ndoLogin()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:971>\n", "text": ", 118\ndoMath()\n, 208\ndoProcessing()\n, 141\nencodeURI()\n, 141\nencodeURIComponent()\n, 141\neval()\n, 549, 551\nexpect()\n, 508\u2013509\ngenerateMap()\n, 490\u2013491\ngetContext()\n, 655\u2013656\ngetData()\n, 145, 148, 149\ngetLocalWeather()\n, 226, 227\u2013228\ngetStateInfo()\n, 657\ngetUserById()\n, 354\u2013355\nh()\n, 188\nhandleClick()\n, 648\nhandleEvent()\n, 229\nimport()\n, 141\nisFinite()\n, 141\nisNaN()\n, 550\u2013551\nit()\nknowing limits of arrow functions, 154\n, 208\nloadBook()\n, 348, 349\nmount()\n, 507\u2013508\nmoveBall()\nnaming, 144\u2013145\nnumber, 73\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:972>\n", "text": ", 141\nNumber()\n, 472\u2013473, 476\u2013477, 478\nonMount()\n, 190\nonMouseMove()\n, 73, 86, 141\nparseFloat()\n, 73, 86, 141, 142\nparseInt()\npassing\narguments, 145\u2013148\nto child, 159\u2013165\nbetween objects, 158\u2013159\nobjects to, 156\u2013157\nfrom one objects to another, 158\u2013159\nas props, 330\u2013334\nby reference, 143\nby value, 142\u2013143\n, 188\npassive\n, 153\npickAMovie()\n, 414\npostData()\n, 360, 391\u2013393, 400\u2013403\nreactive()\n, 391\u2013393, 400\u2013404\nref()\n, 161\u2013162\nremoveBook()\n, 72\nreplace\n, 719\nres.render()\nreturning data, 149\u2013150\n, 253\nreverseOrder()\n, 719\nrouter.get()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:973>\n", "text": "setting context of, 157\u2013158\n, 358\u2013361, 377, 396, 397\u2013398, 401\nsetup()\n, 88\nshowLogInScreen()\n, 188\nsignal\nsimplifying arrow functions, 152\u2013153\n, 72, 109\u2013110, 142\nsplit()\n, 117\u2013118\nsquareIt()\n, 488\u2013490\nstart()\nas stateless, 305\n, 488\u2013490\nstop()\nstring, 71\u201372\n, 139\u2013140, 141\nString()\n, 72\nsubstring\n, 171, 172, 175, 176, 307\nsuper()\n, 549, 550\u2013551\ntest()\n, 203\nthen()\n, 72\ntoLowerCase\n, 73\ntoUpperCase\n, 142\ntrim()\n, 141\nuneval()\nusing\nmethods of built-in objects, 142\ntop-level, 141\n, 408\u2013410\nwatch()\n, 414\nwindow.alert()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:974>\n", "text": "writing\nabout, 144\u2013154\nanonymous functions as arrow functions, 152\nfunction bodies, 148\nmethods, 154\u2013155\nfunction-scoped variables, 80\nG\nGecko, 235\nfunction, 508\u2013509\ngenerateMap()\ngenerating tokens, 744\u2013746\nproperty, 245\ngeolocation\nmethod, 698, 699, 701\nget()\nmethod, 17, 217\nGET\nmethod, 256\ngetAttribute()\nfunction, 490\u2013491\ngetContext()\nfunction, 655\u2013656\ngetData()\nmethod, 309, 310, 313\ngetDerivedStateFromProps()\nmethod, 186, 251, 252\ngetElementById()\nmethod, 251, 256, 511\ngetElementsByClassName()\nmethod, 251, 256\ngetElementsByTagName()\nfunction, 145, 148, 149\ngetLocalWeather()\nmethod, 645\ngetMacListeners()\nmethod, 168\ngetProducts()\nmethod, 313, 314\u2013315\ngetSnapshotBeforeUpdate()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:975>\n", "text": "function, 226, 227\u2013228\ngetStateInfo()\nfunction, 602\ngetUserApproval()\nfunction, 657\ngetUserById()\nGit, coding with, 55\u201362\nGitHub, 62\nfile, 276\n.gitignore\nglobal CSS, 387\u2013388\nglobal styles, adding, 292\u2013293\nglobals, using in templates, 373\nglobal-scoped variables, 80\nGoogle Chrome, 15\ngraphing operator, 84\ngreater than (>) operator, 85\u201386\ngreater than or equal to (>=) operator, 85\u201386\nGrunt, 518\u2013519\nGulp, 518\u2013519\nH\nfunction, 354\u2013355\nh()\nfunction, 188\nhandleClick()\nfunction, 648\nhandleEvent()\nhandler functions, specifying, 329\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:976>\n", "text": "handling\nauthentication, 741\u2013743\ndependencies with npm, 497\u2013503\nerrors in components, 366\u2013368\nerrors with async/await, 210\nexceptions, 655\u2013659\nerrors, 214\u2013215\nfetch()\nmultiple events, 466\nhanging request, 702\nmethod, 256\nhasAttribute()\nhashes, 736\u2013737\nhashing\nadding salt to, 738\nsaving and, 738\u2013739\nproperty, 250\nhead\nheaping objects, 183\n, 706\nhelmet\nmethod, 176\nherd()\nhigh-level languages, 10\u201311\ninterface, 257\u2013259\nHistory\nhoisting function declaration, 150\nhot reloading, 277\u2013278, 515\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:977>\n", "text": "HTML\nimporting modules into, 229\u2013230\nincluding JavaScript files in, 37\u201340\nJSX as not, 282\nrunning inside script elements, 36\u201337\nwriting output with JSX, 283\u2013284\nwriting templates, 369\u2013371\nHTML event attributes\nabout, 185\nrunning JavaScript from, 35\u201336\nHTTP headers, 633\u2013634\nHTTP request, 632\u2013633\nHTTP server, 561\nHypertext Transfer Protocol (HTTP)\nabout, 216\u2013217\nrequest method, 217\nstatus codes, 217\u2013218\nI\nicons, explained, 5\u20136\nproperty, 255\nid\nidentifying\ncomponent contents, 439\u2013447\nrender blocking, 237\u2013238\nstate, 268\ntypes of streams, 592\nIDs, creating, 682\u2013683\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:978>\n", "text": "statements, 91\u201393\nif\u2026else\nAPI, 243\nImageCapture\nproperty, 250\nimages\nimmutable values, 67\nimplementing\ninverse data flow, 269\u2013270\nuser registration, 734\u2013741\nimplicit headers, 637\nfunction, 229\nimport()\nstatement, 227\u2013228\nimport\nimporting\nmodule, 613\u2013614\nfs\nmodule objects, 228\u2013229\nmodules, 227\u2013228\nmodules into HTML, 229\u2013230\nimports, renaming, 228\nmethod, 112, 610\nincludes()\nincreasing maximum number of listeners, 646\u2013647\nincrement (++) operator, 86\u201387, 97\nmethod, 308\nincrementCount()\nAPI, 243\nIndexedDB\n, refactoring, 506\u2013507\nindex.js\nmethod, 72, 112\nindexOf()\ninequality (!=) operator, 85\u201386\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:979>\n", "text": "inheritance\nabout, 169\nin object-oriented programming, 321\u2013322\ninitializing\nprojects\nabout, 497\u2013499\nwith Vite, 271\u2013278\nreactive data, 400\u2013403\nvariables, 64\ninline handlers\nabout, 411\u2013413\nchoosing between method handlers and, 414\u2013416\ninline styling, 293\nproperty, 248\ninnerHeight\nproperty, 255\ninnerHTML\nproperty, 248\ninnerWidth\nevent, 187\ninput\ninput types, using directive with various, 420\nv-model\ninserting documents into collections, 691\u2013692\nInspect interface (Chrome DevTools), 672\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:980>\n", "text": "installing\ndependencies, 709\nESLint, 536\u2013537\nExpress, 697\u2013698\nExpress API server, 709\nGit, 56\u201357\nJest, 547\u2013548\nLive Server, 47\u201350\nmodule bundler, 514\u2013515\nMongoDB, 677\u2013680\nMongoose, 731\u2013733\nNode.js, 43\nNode.js driver, 689\nVisual Studio Code (VSC), 23\u201324\nVolar, 346\nVue DevTools, 353\u2013355\ninstances, creating, 170\nintegrating ESLint into build script, 540\u2013541\nintegration testing, 547\ninterfaces\nconnecting with, 242\nWeb, 241\u2013243\ninterfacing, with web browsers, 234\u2013235\nInternet, 15\u201316\ninvoking functions, 117\nfunction, 141\nisFinite()\nfunction, 141\nisNaN()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:981>\n", "text": "function, 550\u2013551\nit()\niterating, over buffers, 611\nJ\nJavaScript. See also asynchronous JavaScript\nabout, 9\u201312\nconditional rendering with, 378\ncopying, 15\u201322\nexpressions in JSX, 285\u2013286\nhistory of, 12\u201315\nincluding files in HTML, 37\u201340\nreading, 15\u201322\nrerunning commands in console, 34\u201335\nrunning\ncode in browser window, 35\u201340\ncode in console, 33\u201334\nfrom HTML event attributes, 35\u201336\nsingle-threadedness of, 183\u2013184\nstarting development environment, 22\u201329\ntesting, 535\u2013555\nusing in templates, 371\u2013373\nwriting programs in, 29\u201332\nJavaScript engine, 237\nJavaScript Object Notation (JSON)\ngetting data, 222\nsending data, 222\nworking with, 220\u2013222\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:982>\n", "text": "JavaScript runtime model, 182\u2013183\nJavaScriptCore, 237\nJest\nhow it works, 550\u2013551\ninstalling and configuring, 547\u2013548\nmethod, 112, 121, 622\njoin()\nmethod, 213, 606\u2013607\njson()\nJSX\nconditionally rendering, 286\u2013290\ncreating lists, 290\u2013291\nfundamentals of, 281\u2013282\nJavaScript expressions in, 285\u2013286\nas not HTML, 282\nstyling React apps and components, 292\u2013296\ntranspiling with Babel, 283\nusing built-in components, 284\u2013285\nwriting, 281\u2013296\nwriting HTML output with, 283\u2013284\nas XML, 282\u2013283\nK\nkey modifiers, 417\u2013418\nevent, 187, 418\nkeydown\nkeys, specifying, 383\nevent, 187, 418\nkeyup\nkeywords, 30\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:983>\n", "text": "L\nproperty, 244\nlanguage\nmethod, 112\nlastIndexOf()\nlaunching VS Code terminal, 272\u2013274\nleft-associativity, 84\nmethod, 610\nlength()\nproperty, 110\nlength\nless than (<) operator, 85\u201386\nless than or equal to (<=) operator, 85\u201386\n, creating variables with, 63\u201366\nlet\nlevels, of programming language, 10\nlexical scoping, 332\nlibuv library, 563\u2013564\nlifecycle\ncomponent, 309\u2013316\nSvelte, 471\u2013476\nmethod, 685\nlimit()\nlimitations, of , 402\u2013403\nreactive()\nlimiting lists, 685\nline comments, 51\nlinters, using, 536\u2013541\nmethod, 698\nlisten()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:984>\n", "text": "listeners\npassing arguments to, 642\u2013644\nremoving, 647\u2013648\nsetting with , 411\u2013416\nv-on\nlistening\nfor events, 184\u2013195\nfor events with directive, 463\u2013466\non:\non multiple targets, 190\u2013191\nlisting\ndocuments, 682\u2013683\nfiles in directories, 623\nlists\ncreating, 290\u2013291\nlimiting, 685\nrendering engine, 379\u2013383\nsorting, 684\u2013685\nliteral notation, creating objects using, 127\nLive Server, installing, 47\u201350\nfunction, 208\nloadBook()\nloading\ndynamic modules, 229\nwithout streams, 588\u2013589\nlocal styles, 293\nproperty, 248\nlocalStorage\nlocal-versus-global installs, 503\nproperty, 248\nlocation\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:985>\n", "text": "log points, setting, 671\u2013672\nlogical operators, 87\u201388\nlogin route\nfinishing, 746\u2013753\ntesting, 749\u2013750\nloops\nwith array methods, 117\u2013121\ncreating, 97\u2013103, 456\u2013458\nevent, 183\u2013184\nloosely typed language, 68\nM\nmachine code, processor-specificity of, 10\nmacOS\ninstalling MongoDB on, 680\nstarting MongoDB on, 681\nfile, 348\nmain.js\nmethod, 112, 119\u2013121\nmap()\nmapping arrays, 119\u2013121\nMarkdown files, 53\u201354\nmethod, 256\nmatches()\n, 644\u2013647\nmaxListeners\nmessages, queuing, 183\nmetadata, in file, 500\npackage.json\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:986>\n", "text": "method handlers\nabout, 413\u2013414\nchoosing between inline handlers and, 414\u2013416\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:987>\n", "text": "methods\n, 184, 186\u2013190, 193\u2013194, 199, 200\u2013202,\naddEventListener()\n256, 328, 413, 415\n, 643\naddJS()\n, 649\naddListener()\n, 256\nafter()\n, 473\nafterUpdate()\n, 37,199, 248, 372\u2013373\nalert()\n, 251, 254\u2013255, 256\nappend()\n, 703\napp.get()\n, 157\napply()\n, 703\napp.post()\n, 703\napp.put()\n, 703, 717\u2013718\napp.use()\narray, 112\u2013116, 117\u2013121\n, 147, 291\nArray.map()\n, 256\nbefore()\n, 473\nbeforeUpdate()\n, 158, 161\u2013162, 308, 331\nbind()\n, 213\u2013214\nblob()\n, 248\nblur()\nBuffer, 609\u2013611\n, 607\u2013609, 610\nBuffer.alloc()\n, 610\nBuffer.compare()\n, 610\nBuffer.concat()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:988>\n", "text": ", 609, 610\nBuffer.from()\n, 610\nBuffer.isBuffer()\nof built-in objects, 142\n, 157\ncall()\n, 248\nclearInterval()\n, 248\nclearTimeout()\n, 248\nclose()\n, 610\ncompare()\n, 309, 312\u2013313, 316\u2013317, 318\ncomponentDidMount()\n, 313, 315\ncomponentDidUpdate()\n, 315\u2013316, 319\u2013320, 365\u2013366\ncomponentWillUnmount()\n, 72, 112\nconcat()\n, 593\nconsole.log()\n, 309\u2013310\nconstructor()\n, 251\ncreateAttribute()\n, 251\ncreateComment()\n, 251, 254\u2013255\ncreateElement()\n, 251\ncreateEvent()\n, 641\ncreateInterface()\n, 593\u2013594\ncreateReadStream()\n, 278\u2013279\ncreateRoot()\n, 630\u2013631\ncreateServer()\n, 251\ncreateTextNode()\n, 687\u2013688\ncreateUser()\ncreating in classes, 173\u2013174\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:989>\n", "text": "defined, 140\ndefining, 174\u2013177\ndefining using arrow syntax, 332\u2013333\n, 217\nDELETE\n, 696\ndeleteMany()\n, 696\ndeleteOne()\n, 192, 194, 256\ndispatchEvent()\n, 163\u2013164\ndisplayBookstore()\n, 161\ndisplayCart()\ninterface, 250\u2013251\nDocument\n, 173\u2013174\ndrink()\n, 155, 156, 157\ndrive()\nelement, 256\u2013257\n, 640\nemit()\n, 636, 702\nend()\n, 610\nequals()\n, 112\nevery()\n, 698, 703, 704\u2013705\nexpress()\n, 725\u2013728\nexpress.Router()\n, 706\u2013707\nexpress.static()\n, 211, 215\u2013216, 222, 407, 655\nfetch()\n, 112, 121\nfilter()\n, 684, 685, 694\nfind()\n, 694\nfindOne()\n, 194, 248\nfocus()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:990>\n", "text": ", 112, 693\u2013694\nforEach()\n, 614\u2013616\nfs.open()\n, 614\u2013617\nfs.read()\n, 623\nfs.readdir()\n, 671\u2013672\nfs.readFile()\n, 624\u2013625\nfs.stat()\n, 619\u2013620\nfs.write()\n, 620\nfs.writeFile()\n, 17, 217\nGET\n, 698, 699, 701\nget()\n, 256\ngetAttribute()\n, 309, 310, 313\ngetDerivedStateFromProps()\n, 186, 251, 252\ngetElementById()\n, 251, 256, 511\ngetElementsByClassName()\n, 251, 256\ngetElementsByTagName()\n, 645\ngetMacListeners()\n, 168\ngetProducts()\n, 313, 314\u2013315\ngetSnapshotBeforeUpdate()\n, 602\ngetUserApproval()\n, 256\nhasAttribute()\n, 176\nherd()\n, 112, 610\nincludes()\n, 308\nincrementCount()\n, 72, 112\nindexOf()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:991>\n", "text": ", 112, 121, 622\njoin()\n, 213, 606\u2013607\njson()\n, 112\nlastIndexOf()\n, 610\nlength()\n, 685\nlimit()\n, 698\nlisten()\n, 112, 119\u2013121\nmap()\n, 256\nmatches()\n, 730\u2013731\nmongoose.model()\n, 730\u2013731\nmongoose.Schema()\nmounting, 309\u2013313\n, 169\nmove()\nnaming, 115\n, 693\u2013694, 702\nnext()\n, 130\nObject.create()\n, 640, 642\u2013643, 649\non()\n, 366\nonBeforeMount()\n, 366\nonBeforeUnmount()\n, 366\nonBeforeUpdate()\n, 649\nonce()\n, 473, 485\u2013486\nonDestroy()\n, 366\nonErrorCaptured()\n, 362\u2013366\nonMounted()\n, 365\u2013366\nonUnmounted()\n, 365\nonUpdated()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:992>\n", "text": ", 248\nopen()\n, 158\u2013159\noperate()\noverriding in derived classes, 174\n, 291\n.parse()\n, 217\nPATCH\n, 699\npatch()\n, 590, 592, 598\u2013599, 600\npipe()\n, 376\nplay()\n, 112, 113\u2013116, 442\u2013445\npop()\n, 217\nPOST\n, 699\npost()\n, 251, 254\u2013255, 256\nprepend()\n, 195, 375\u2013376\npreventDefault()\n, 199, 248\nprompt()\nproperties and, 173\u2013177\n, 112, 113\u2013116, 442\u2013445, 592\npush()\n, 258\npushState()\n, 217\nPUT\n, 699\nput()\n, 251, 256\nquerySelector()\n, 251, 256\nquerySelectorAll()\n, 595\nread()\n, 592\nReadable()\n, 624\nreaddir()\n, 585, 617\u2013618\nreadFile()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:993>\n", "text": ", 618\u2013619\nreadFileSync()\n, 111, 112, 118\u2013119\nreduce()\n, 256\nremove()\n, 648\nremoveAllListeners()\n, 194\nremoveEventListener()\n, 647\u2013648\nremoveListener()\n, 278\u2013279, 307, 309, 310\u2013311, 313\u2013314, 354\u2013355\nrender()\n, 602\nreplaceName()\n, 258\nreplaceState()\n, 622\nresolve()\nof response object, 636\u2013637\n, 113\nreverse()\n, 703\nRouter()\nrouting, 699\u2013701\n, 248\nscroll()\n, 248\nscrollTo()\n, 484, 486, 487, 488\u2013490\nset()\n, 637\u2013638\nsetHeader()\n, 248, 479\nsetInterval()\n, 308\nsetState()\n, 207\u2013208, 248\nsetTimeout()\n, 126\nsharpen()\n, 113, 114\u2013115\nshift()\n, 313\u2013314\nshouldComponentUpdate()\n, 72, 110, 113, 116\nslice()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:994>\n", "text": ", 113\nsome()\n, 113, 684\u2013685\nsort()\n, 113, 116\nsplice()\n, 222\nstringify()\n, 483, 484, 485, 487\nsubscribe()\n, 510\u2013511\ntestEdgeCollision()\n, 214\ntext()\n, 474\u2013476\ntick()\n, 693\u2013694\ntoArray()\n, 610\ntoJSON()\n, 86, 113, 605, 606\u2013607, 609, 610\ntoString()\nunmounting, 315\u2013316\n, 113\nunshift()\n, 485\u2013486, 487\nunsubscribe()\n, 484, 486, 487\nupdate()\n, 695\u2013696\nupdateMany()\n, 695\u2013696\nupdateOne()\nupdating, 313\u2013315\n, 316\u2013317, 318\u2013319, 320, 362\nuseEffect()\n, 305\u2013306, 316\nuseState()\ninterface, 247\u2013248\nWindow\n, 484\nwritable()\n, 596\u2013597, 598\u2013599, 610, 637\nwrite()\n, 636, 637\u2013638\nwriteHead()\nwriting, 154\u2013155\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:995>\n", "text": ", 203\u2013204\nXMLHttpRequest()\nMicrosoft, 14\nmiddleware, 701\u2013707\nminification, 519\nmodes, read, 594\u2013595\nmodifiers\nattaching to event listeners, 464\u2013465\ndirective, 375\u2013376\nmodifying\narrays, 111\nobjects, 130\u2013131\nReact projects, 277\u2013278\nmodule bundler, installing, 514\u2013515\nmodule objects, importing, 228\u2013229\nmodules. See also Node.js\nabout, 223\ncreating, 506\u2013512\nCSS, 390\u2013391\ndefining, 224\nexporting, 224\u2013226\nimporting\nabout, 227\u2013228\ninto HTML, 229\u2013230\nloading dynamic, 229\npackages compared with, 580\nstyle, 295\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:996>\n", "text": "MongoDB\nabout, 674\nconnecting to, 681\u2013682\nconnecting to server, 689\u2013691\ninstalling, 677\u2013680\nrelational compared with NoSQL databases, 674\u2013677\nshell commands, 686\u2013687\nstarting, 680\u2013681\nusing from Node.js, 688\u2013696\nMongoose\ncreating schema with, 730\u2013734\ninstalling, 731\u2013733\nmethod, 730\u2013731\nmongoose.model()\nmethod, 730\u2013731\nmongoose.Schema()\nMongosh\nconnecting to MongoDB, 681\u2013682\ncreating\ncollections, 682\ndatabases, 681\u2013682\nIDs, 682\u2013683\nfinding documents, 684\u2013686\nlisting documents, 682\u2013683\nMongoDB shell commands, 686\u2013687\nusers and roles, 687\u2013688\nmonitoring scripts, 569\n, 706\nmorgan\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:997>\n", "text": "function, 348, 349\nmount()\nmounting\nabout, 472\u2013473\nmethods, 309\u2013313\nmultiple apps, 349\u2013350\nroot components, 348\u2013350\nevent, 187\nmousedown\nevent, 187\nmouseenter\nevent, 187\nmouseleave\nevent, 187\nmousemove\nevent, 187\nmouseout\nevent, 187\nmouseover\nevent, 187\nmouseup\nevent, 187\nmousewheel\nmethod, 169\nmove()\nfunction, 507\u2013508\nmoveBall()\nMozilla Developer Network, 417\nmultiple style blocks, 389\u2013390\nmultiplication (*) operator, 83, 86\u201387\nN\nnamed exports, 225\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:998>\n", "text": "naming\ncomponents, 362\nconstants, 67\u201368\nfunctions, 144\u2013145\nmethods, 115\nslots, 386\u2013387\nvariables, 66\nNaN data type, 77\ninterface\nNavigator\nabout, 242, 243\nproperties of-245, 244\nquirks of, 244\nnegation operator (!), 302\nNetscape, 14\nnetworking\nabout, 239, 627\ncreating web servers, 630\u2013638\ndata storage, 239\u2013240\nwith Node.js, 627\u2013638\nsecurity for, 628\u2013630\ntroubleshooting, 50\nnew line (n), 71\nmethod, 693\u2013694, 702\nnext()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:999>\n", "text": "Node.js\nabout, 559\ncallback pattern, 584\u2013586\ncomponents of, 562\u2013564\ncore modules, 564\u2013566\ncreating modules, 575\u2013580\ndebugging programs, 660\u2013672\nobject, 653\u2013654\nError\ngetting data to modules, 580\u2013584\nhow it works, 560\u2013562\ninstalling, 43\nnetworking with, 627\u2013638\nuses for, 566\u2013567\nusing MongoDB from, 688\u2013696\nusing read-evaluate-print loop (REPL), 570\u2013575\nworking with, 567\u2013570\nNode.js driver, installing, 689\nfolder\nnode_modules\nabout, 275, 347\nusing, 502\u2013503\nnon-simple request, 219\u2013220\nNoSQL databases, 674\u2013677\nNot (!) operator, 87\u201388\nnotation, for square brackets, 131\nnpm\nmanaging dependencies with, 497\u2013503\nupdating, 503\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1000>\n", "text": "number data type, 73\u201374\nfunction, 141\nNumber()\nnumber functions, 73\nnumber inputs, 467\nnumbers\nconverting between strings and, 74\nnumber inputs and, 467\nusing directive for, 380\nv-for\nO\nmethod, creating objects with, 130\nObject.create()\nobject-oriented programming, inheritance in, 321\u2013322\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1001>\n", "text": "objects\nabout, 78\u201379, 125\u2013127\ncomparing, 132\u2013134\ncopying, 132\u2013134\ncreating\nabout, 127\u2013130\nwith class, 128\u2013129\nwith method, 130\nObject.create()\nusing constructor functions, 128\nusing literal notation, 127\ndeleting properties of, 138\nevent, 190\nheaping, 183\nmodifying, 130\u2013131\npassing functions between, 158\u2013159\npassing to functions, 156\u2013157\nprototypes, 134\u2013137\nrequest, 632\u2013633\nresponse, 633\u2013636\nusing directive with, 380\u2013382\nv-for\ndirective, listening for events with, 463\u2013466\non:\nmethod, 640, 642\u2013643, 649\non()\nmethod, 366\nonBeforeMount()\nmethod, 366\nonBeforeUnmount()\nmethod, 366\nonBeforeUpdate()\nmethod, 649\nonce()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1002>\n", "text": "option, 188\nonce\nattribute, 328\nonClick\nproperty, 185\nonclick\nmethod, 473, 485\u2013486\nonDestroy()\nmethod, 366\nonErrorCaptured()\nproperty, 244\nonLine\nfunction, 472\u2013473, 476\u2013477, 478\nonMount()\nmethod, 362\u2013366\nonMounted()\nfunction, 190\nonMouseMove()\nmethod, 365\u2013366\nonUnmounted()\nmethod, 365\nonUpdated()\nmethod, 248\nopen()\nopening\narray elements, 110\u2013111\nfiles using Promises, 616\u2013617\nfiles with and callbacks, 614\u2013616\nfs.open()\nmethod, 158\u2013159\noperate()\noperational errors, 651, 652\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1003>\n", "text": "operators\nabout, 30, 81\narithmetic, 86\nassignment, 85\ncombining, 89\ncomparison, 85\u201386\ncomplex queries using, 685\u2013686\nconcatenation, 86\u201387\ndelete, 112\nlogical, 87\u201388\nprecedence of, 83\u201384\nshort-circuit, 88\nternary, 92\u201393\ntypes of, 83\u201389\nopinionated code formatter, 44\noptimizing\nautomating build script, 513\u2013522\nconverting to React, 522\u2013534\nOptions API, 350\u2013351\noptions request, creating, 635\nOr (||) operator, 87\u201388\nouter function, 146\noverriding methods in derived classes, 174\nP\npackage management, 497\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1004>\n", "text": "file\npackage.json\nabout, 276\ncomponents of, 500\u2013502\nsetting module type in, 579\u2013580\nfile, 276\npackage-lock.json\npackages, modules compared with, 580\nparameters\nfor method, 186\u2013190\naddEventListener()\nof functions, 140\npath, 701\nrest, 145\u2013146\nsetting default, 147\u2013148\nparentheses, operators and, 84\u201385\nmethod, 291\n.parse()\nfunction, 73, 86, 141\nparseFloat()\nfunction, 73, 86, 141, 142\nparseInt()\nparsing , 212\u2013213\nResponse\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1005>\n", "text": "passing\narguments\nabout, 145\u2013148, 584\nto directives, 375\nto event handlers, 329\u2013330\nto listeners, 642\u2013644\nto transitions, 470\ncallback functions to array methods, 117\u2013118\nevent handler functions from function components, 333\u2013334\nfunctions\nas arguments, 146\u2013147\nto child, 159\u2013165\nbetween objects, 158\u2013159\nas props, 330\u2013334\nobjects to functions, 156\u2013157\nprops, 396\u2013398, 440\u2013442\nby reference, 143\nby value, 142\u2013143\npassing arguments, 140\nfunction, 188\npassive\nstream, 599\nPassThrough\npassword security, 736\nmethod, 699\npatch()\nmethod, 217\nPATCH\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1006>\n", "text": "paths\nchoosing, 91\u201396, 454\u2013456\nparameters, 701\npatterns, 700\nregular expressions, 700\nstring, 699\nusing, 621\u2013623\npatterns, path, 700\npaused mode, 595\nproperty, 244\npdfViewerEnabled\nperforming effects on unmounting, 319\u2013320\nperiod (.), 79\npermission issues, troubleshooting, 50\nproperty, 245\npermissions\npersonally identifiable information (PII), 744\nfunction, 153\npickAMovie()\nPII (personally identifiable information), 744\nmethod, 590, 592, 598\u2013599, 600\npipe()\nmethod, 376\nplay()\npolyfill, 211\npolymorphism, 169\nmethod, 112, 113\u2013116, 442\u2013445\npop()\npopping, 113\u2013114\nargument, 620\nposition\nmethod, 699\npost()\nmethod, 217\nPOST\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1007>\n", "text": "function, 414\npostData()\nPostman, 709\nPosts model, 734\npracticing, with classes, 177\u2013179\nprecedence, of operators, 83\u201384\nprefix notation, 97\nmethod, 251, 254\u2013255, 256\nprepend()\nPrettier, 44\u201347\nmethod, 195, 375\u2013376\npreventDefault()\npreventing\ndefault actions, 195\nrender blocking, 237\u2013238\nprimitive data types, 69\nprivate members, 175\u2013176\nPro Git, 62\nprogrammer errors, 651, 652\nprogramming\nwith array methods, 112\u2013116\nsign-up route, 735\u2013736\nweb browsers, 241\u2013259\nprogramming language, JavaScript as a, 10\u201312\nprojects\ncreating in Visual Studio Code (VSC), 25\u201327\ninitializing, 497\u2013499\ninitializing with Vite, 271\u2013278\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1008>\n", "text": "promises\nabout, 202\u2013203\ncatching exceptions with, 656\u2013659\nconverting chains to async functions, 208\u2013209\nwriting, 203\u2013206\nmethod, 199, 248\nprompt()\nproperties\n, 250\nscripts\n, 248\nscrollX\n, 248\nscrollY\n, 250\nstylesheets\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1009>\n", "text": "properties (props)\n, 250\nactiveElement\n, 255\nattributes\n, 250\nbody\n, 250, 255\nchildren\n, 255\nclassList\ncomposition using explicit, 322\u2013323\ncomputing, 405\u2013408\n, 248\nconsole\nas a data type, 300\u2013301\ndefining\nabout, 174\u2013177, 440\nwith , 396\u2013397\n<script setup>\nwith function, 397\u2013398\nsetup()\n, 248\ndevicePixelRatio\n, 594\n_dirname\ninterface, 249\u2013250\nDocument\n, 248\nevent\nof event handlers, 185\u2013186\nexporting, 440\u2013442\n, 250\nforms\n, 248\nfullScreen\n, 245\ngeolocation\n, 250\nhead\n, 255\nid\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1010>\n", "text": ", 250\nimages\n, 248\ninnerHeight\n, 255\ninnerHTML\n, 248\ninnerWidth\n, 244\nlanguage\n, 110\nlength\n, 248\nlocalStorage\n, 248\nlocation\nmethods and, 173\u2013177\ninterface, 244\u2013245\nNavigator\nof objects, 138\n, 185\nonclick\n, 244\nonLine\npassing\nabout, 396\u2013398, 440\u2013442\nfunctions as, 330\u2013334\n, 244\npdfViewerEnabled\n, 245\npermissions\nusing, 440\u2013442\ninterface, 247, 248\nWindow\n, 323\nprops.children\nprototypes, 134\u2013137\nobjects, function and, 401\u2013402\nproxy reactive()\nfolder, 275, 347\npublic\npublic members, 175\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1011>\n", "text": "Pug, 714\u2013715\nmethod, 112, 113\u2013116, 442\u2013445, 592\npush()\npushing, 113\u2013114\nmethod, 258\npushState()\nmethod, 699\nput()\nmethod, 217\nPUT\nQ\nmethod, 251, 256\nquerySelector()\nmethod, 251, 256\nquerySelectorAll()\nquestion mark (?), 700\nqueuing messages, 183\nquotation mark (\u201c), 70\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1012>\n", "text": "R\nReact\napps\nstructure of, 274\u2013276\nstyling, 292\u2013296\ncomponents\nabout, 297\u2013298\nclass components, 307\u2013308\ncomposing, 321\u2013325\ndata types, 300\u2013304\ndesigning elements, 298\u2013299\nfunction components, 304\u2013306\nlifecycle of, 309\u2013316\nreturning valid values, 300\nusing lifecycle in function components, 316\u2013320\nconfiguring Webpack for, 522\u2013524\nconverting to, 522\u2013534\nconverting UI to, 524\u2013529\ncreating forms with, 334\u2013339\nevent handling in, 328\u2013334\nusing data and events in, 327\u2013339\nVue compared with, 343\u2013344\nlibrary, 270\nReact\nReact Testing Library, 553\u2013555\nlibrary, 270, 278\u2013279\nReactDOM\nreacting, to state changes with , 408\u2013410\nwatch()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1013>\n", "text": "reactive data\nchanging, 400\u2013403\ncreating, 432\u2013434\ninitializing, 400\u2013403\nfunction, 360, 391\u2013393, 400\u2013403\nreactive()\nreactive shortcuts, 487\u2013488\nreactive statements, creating, 445\u2013446\nreactivity\ndata and, 395\u2013410\nwith state, 301\u2013304\nSvelte, 483\u2013492\ntriggering with assignments, 442\nReactivity Transform, 404\u2013405\nReactJS\nabout, 263\u2013264\nbuilding React UI, 265\u2013270\ncomponent-based nature of, 270\u2013271\ndeclarative nature of, 271\ndistilling thinking in, 264\ninitializing projects with Vite, 271\u2013278\nas JavaScript, 271\n, 278\u2013279\nReactDOM\nVirtual DOM (VDOM), 278\u2013279\nmethod, 595\nread()\nreadable stores, creating, 484\nreadable streams, creating, 592\u2013595\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1014>\n", "text": "method, 624\nreaddir()\nread-evaluate-print loop (REPL)\nabout, 570\ncommands, 573\u2013575\nplaying with Node.js, 570\u2013573\nmethod, 585, 617\u2013618\nreadFile()\nmethod, 618\u2013619\nreadFileSync()\nreading\n, 654\nerror.stack\nfiles, 614\u2013619\nJavaScript code, 15\u201322\nreadable streams from module, 593\u2013594\nfs\n, 501\u2013502\nsemver\nstack frames, 654\nsynchronous code, 198\u2013199\nREADME file, 52\u201353\nrecognizing data types, 300\u2013304\nmethod, 111, 112, 118\u2013119\nreduce()\nreducer function, 118\u2013119\nreducing arrays, 118\u2013119\nfunction, 391\u2013393, 400\u2013404\nref()\nref object, 403\u2013404\nrefactoring , 506\u2013507\nindex.js\nreference, passing by, 143\nrefresh tokens, sending, 745\u2013746\nrefreshing data, 477\u2013479\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1015>\n", "text": "registration and authentication\nabout, 721\u2013722\nadding app and server modules, 723\u2013724\ncreating\nbasic routes, 725\u2013728\nand configuring directory, 722\u2013723\nschema with Mongoose, 730\u2013734\nfinishing login route, 746\u2013753\ngenerating and using tokens, 744\u2013746\nhandling authentication, 741\u2013743\nimplementing user registration, 734\u2013741\ntesting routes, 728\u2013730\nregular expressions, path, 700\nrelational databases, 674\u2013677\nremainder (%) operator, 86\u201387\nRemember icon, 6\nmethod, 256\nremove()\nmethod, 648\nremoveAllListeners()\nfunction, 161\u2013162\nremoveBook()\nmethod, 194\nremoveEventListener()\nmethod, 647\u2013648\nremoveListener()\nremoving\nevent listeners, 194\nlisteners, 647\u2013648\nrenaming exports/imports, 228\nrender blocking, identifying and preventing, 237\u2013238\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1016>\n", "text": "method, 278\u2013279, 307, 309, 310\u2013311, 313\u2013314, 354\u2013355\nrender()\nrendering engine, 235\u2013238\nrendering lists, 379\u2013383\nREPL (read-evaluate-print loop)\nabout, 570\ncommands, 573\u2013575\nplaying with Node.js, 570\u2013573\nfunction, 72\nreplace\nmethod, 602\nreplaceName()\nmethod, 258\nreplaceState()\nrequest method, 217\nrequest object, 632\u2013633\nrequests, making with CORS, 218\u2013220\nrerunning commands, in console, 34\u201335\nevent, 187\nreset\nmethod, 622\nresolve()\nresponding, to events, 411\u2013420\nresponse body, 635\u2013636\nmethods\nResponse\ncalling, 213\u2013214\nparsing, 212\u2013213\nresponse object\nabout, 633\u2013636\nmethods of, 636\u2013637\n, 213\u2013214\nResponse.blob()\n, 637\nresponse.statusCode\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1017>\n", "text": ", 637\nresponse.statusMessage\n, 214\nResponse.text()\nfunction, 719\nres.render()\nREST client, setting up, 709\u2013711\nrest parameters, 145\u2013146\nrestricted JavaScript, in templates, 372\u2013373\nstatement, 267, 329, 584\nreturn\nreturn value, using as an argument, 149\nreturning\ndata, 149\u2013150\nfields, 684\nvalid values, 300\nmethod, 113\nreverse()\nfunction, 253\nreverseOrder()\nright-associativity, 84\nroles, working with, 687\u2013688\nroot components, mounting, 348\u2013350\nmethod, 703\nRouter()\nfunction, 719\nrouter.get()\nrouter-level middleware, 703\u2013704\nroutes\ncreating basic, 725\u2013728\ntesting, 728\u2013730\nrouting methods, 699\u2013701\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1018>\n", "text": "running\ncode\nin browser windows, 35\u201340\non command line, 570\nin console, 33\u201334\neffects, 317\u2013319\nESLint, 537\nHTML inside script elements, 36\u201337\nJavaScript from HTML event attributes, 35\u201336\nruntime environments, web browsers as, 561\nS\nsalt, adding to hashing, 738\nsandbox, 21, 561\nsaving, hashing and, 738\u2013739\nscaffolding Vue.js applications, 344\u2013348\nschema, creating with Mongoose, 730\u2013734\nscope, 80, 150\nscoped CSS, 388\u2013389\nscript elements, running HTML inside, 36\u201337\n, defining props with, 396\u2013397\n<script setup>\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1019>\n", "text": "element, 358, 446\u2013447\n<script>\nscripts\nbuild, 513\u2013522\ndev, 505\u2013506\nmonitoring, 569\nnpm, 500\nin Svelte components, 439\u2013440\nproperty, 250\nscripts\nmethod, 248\nscroll()\nmethod, 248\nscrollTo()\nproperty, 248\nscrollX\nproperty, 248\nscrollY\nSDLC (systems development life cycle), 513\u2013514, 535\nsecurity\nnetworking and, 628\u2013630\npassword, 736\nevent, 187\nselect\nselect inputs, binding, 467\u2013468\nselecting\nelement nodes, 251\nevent targets, 186\nwith method, 252\ngetElementById()\nbetween method and inline handlers, 414\u2013416\npaths, 454\u2013456\nusing selectors, 252\u2013253\nselectors, selecting using, 252\u2013253\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1020>\n", "text": ", reading, 501\u2013502\nsemver\nsemver versioning, 502\nsending refresh tokens, 745\u2013746\nserver\ndefined, 627\nJavaScript on the, 22\nserver modules, adding, 723\u2013724\nserver-side routing, with Express, 699\u2013701\nserver-side services, 22\nservices, value of, 21\u201322\nserving\nstatic files, 706\u2013707\nviews, 712\u2013715\nmethod, 484, 486, 487, 488\u2013490\nset()\nmethod, 637\u2013638\nsetHeader()\nmethod, 248, 479\nsetInterval()\nmethod, 308\nsetState()\nmethod, 207\u2013208, 248\nsetTimeout()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1021>\n", "text": "setting\nparameters, 186\u2013190\naddEventListener()\nbreakpoints, 544\u2013546, 669\u2013671\ncontext, 490\u2013492\ncontext of functions, 157\u2013158\ndefault parameters, 147\u2013148\nenvironment variables from command line, 582\nenvironment variables with , 582\u2013583\n.env\nlisteners with , 411\u2013416\nv-on\nlog points, 671\u2013672\nmodule type in , 579\u2013580\npackage.json\nwatch expressions, 671\nsetup, of REST client, 709\u2013711\nfunction, 358\u2013361, 377, 396, 397\u2013398, 401\nsetup()\nshallow copy, 122\u2013123\nmethod, 126\nsharpen()\nshell commands, MongoDB, 686\u2013687\nmethod, 113, 114\u2013115\nshift()\nshifting, 114\u2013115\nshort-circuit operators, 88\nshorthand names, directive, 375\nmethod, 313\u2013314\nshouldComponentUpdate()\ncommand, 686\nshow dbs\ncommand, 686\nshow roles\ncommand, 686\nshow users\nfunction, 88\nshowLogInScreen()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1022>\n", "text": "side effect, 317, 408\nfunction, 188\nsignal\nsign-up route, programming, 735\u2013736\nsimple request, 218\u2013219\nsimplifying arrow functions, 152\u2013153\nsingle quote ('), 71\nsingle-file components, 357\u2013361\nsingle-threadedness, of JavaScript, 183\u2013184\nmethod, 72, 110, 113, 116\nslice()\nslicing arrays, 116\nslots\ncomposing with, 383\u2013387, 459\u2013461\nnaming, 386\u2013387\nsoftware incompatibility, troubleshooting, 50\nmethod, 113\nsome()\nmethod, 113, 684\u2013685\nsort()\nsorting lists, 684\u2013685\nsource code, 6\nsource maps, building, 542\u2013544\nSources panel\nabout, 542\nediting code in, 544\nspecial characters, 71\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1023>\n", "text": "specifying\nfallback content, 385\u2013386\nhandler functions, 329\nkeys, 383\nspeed, of Node.js, 566\u2013567\nSpiderMonkey, 237\nmethod, 113, 116\nsplice()\nsplicing arrays, 116\nfunction, 72, 109\u2013110, 142\nsplit()\nspreading arrays, 122\u2013123\nsquare braces ([]), 375\nsquare brackets, notation for, 131\nfunction, 117\u2013118\nsquareIt()\nfolder, 275\u2013276, 347\u2013348\nsrc\nstack frames, reading, 654\nstacking function calls, 182\nstandard library, 564\nfunction, 488\u2013490\nstart()\nstarting\ndevelopment environment, 22\u201329\nfunctions, 488\u2013490\nMongoDB, 680\u2013681\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1024>\n", "text": "state\ndefined, 301\ndetermining location of, 269\nidentifying, 268\nreactivity with, 301\u2013304\nstateless, functions as, 305\nstatements\n, 102\u2013103\nbreak\n, 102\u2013103\ncontinue\n, 91\u201393\nif\u2026else\n, 227\u2013228\nimport\nin JavaScript, 30\n, 267, 329, 584\nreturn\n, 93\u201396\nswitch\nstatic assets, copying, 519\u2013520\nstatic component, 429\nstatic files, serving, 706\u2013707\nstatic members, 176\u2013177\nstatic version, building in React, 266\u2013268\nstatus codes, HTTP, 217\u2013218\nstocking store, 483\u2013490\nfunction, 488\u2013490\nstop()\nstopping functions, 488\u2013490\nstorage, data, 239\u2013240\nstrategies, style, 296\nStraub, Ben, 62\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1025>\n", "text": "streaming\nabout, 587\u2013588\nchaining streams, 600\u2013602\nchunking, 588\nconverting to streams, 589\u2013590\ncreating\nduplex streams, 598\u2013599\nreadable streams, 592\u2013595\nwritable streams, 596\u2013597\nidentifying types of streams, 592\nloading without streams, 588\u2013589\ntransforming streams, 599\u2013600\nviewing chunks, 590\u2013591\nstrict equality (===) operator, 85\u201386\nstrict inequality (!==) operator, 85\u201386\nstring data type, 69\u201370\nfunction, 139\u2013140, 141\nString()\nstring functions, 71\u201372\nstring paths, 699\nmethod, 222\nstringify()\nstrings\nconverting between numbers and, 74\ncreating with template literal notation, 70\u201371\n, 245\u2013246\nuserAgent\nusing directive for, 380\nv-for\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1026>\n", "text": "structure\nof Express apps, 716\u2013720\nof React apps, 274\u2013276\nof Vue app, 347\nstyle\nadding, 509\u2013510\nadding to components, 387\u2013393, 447\u2013449\nattributes, 293\u2013294\nReact apps and components, 292\u2013296\nVue, 350\u2013353\nstyle modules, creating, 295\nstyle objects, 294\nproperty, 250\nstylesheets\nevent, 187\nsubmit\nmethod, 483, 484, 485, 487\nsubscribe()\nsubscribing, to stores, 485\nfunction, 72\nsubstring\nsubtraction (-) operators, 83, 86\u201387\nfunction, 171, 172, 175, 176, 307\nsuper()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1027>\n", "text": "Svelte\nabout, 423\u2013424\nbuilding scaffolding, 425\u2013426\nconstructing store, 483\u2013490\ndocumenting with comments, 453\u2013454\nfetching data in, 476\u2013481\ngetting context, 490\u2013492\ngetting for VS Code extension, 426\u2013427\nlifecycle of, 471\u2013476\nplaying with, 431\u2013436\nreactivity, 483\u2013492\nsetting context, 490\u2013492\nstocking store, 483\u2013490\nSvelte apps, 427\u2013430\nSwagger, 709\nstatements, 93\u201396\nswitch\ndata type, 77\nSymbol\nSynthetic Events, dispatching, 328\u2013329\nobject, 328\u2013329\nSyntheticBaseEvent\nsystem testing, 547\nsystems development life cycle (SDLC), 513\u2013514, 535\nT\ntab (t), 71\ntargets, listening on multiple, 190\u2013191\nTCP/IP standard, 628\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1028>\n", "text": "Technical Stuff icon, 6\ntemplate engines, 713\u2013714\ntemplate literal notation, creating strings with, 70\u201371\ntemplates\nbinding data to, 398\u2013400\nchoosing a path, 454\u2013456\ncomposing with slots, 459\u2013461\ncreating loops, 456\u2013458\ndesigning, 451\u2013461\ndocumenting Svelte with comments, 453\u2013454\nelements as building blocks, 451\u2013453\nVue, 369\u2013393\nwriting text expressions, 458\u2013459\nternary operator, 92\u201393\nfunction, 549, 550\u2013551\ntest()\ntest specs, 550\u2013551\ntest suites, 550\nmethod, 510\u2013511\ntestEdgeCollision()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1029>\n", "text": "testing\nAPI server, 711\u2013712\nfor collisions, 510\u2013511\nGit, 57\u201360\nJavaScript, 535\u2013555\nlogin route, 749\u2013750\nroutes, 728\u2013730\nuser registration, 740\u2013741\nwriting code through, 552\nwriting tests, 548\u2013550\ntext expressions, writing, 458\u2013459\nmethod, 214\ntext()\nfunction, 203\nthen()\nthin clients, 17\nthird-party APIs, 243\nthird-party middleware, 705\nkeyword, 154\nthis\nthree dots (\u2026), 122\u2013123\nmethod, 474\u2013476\ntick()\nTip icon, 5\nmethod, 693\u2013694\ntoArray()\nclass, 330\u2013331\nToggleVisibility\nmethod, 610\ntoJSON()\ntokens, generating and using, 744\u2013746\nfunction, 72\ntoLowerCase\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1030>\n", "text": "toolbox\nabout, 41\u201342\ncoding with Git, 55\u201362\nconfiguring Visual Studio Code, 43\u201350\ndocumenting code, 51\u201354\ninstalling Node.js, 43\ntop-level functions, 141\nmethod, 86, 113, 605, 606\u2013607, 609, 610\ntoString()\nfunction, 73\ntoUpperCase\nTransfer-Encoding HTTP headers, 634\ntransform streams, 599\u2013600\ntransition animations\ncreating, 468\u2013469\ncreating unidirectional transitions, 470\npassing arguments to transitions, 470\ntranspilation, with Babel, 283\ntriggering\nbuilt-in events, 193\u2013194\ncustom events, 194\nreactivity with assignments, 442\nfunction, 142\ntrim()\ntriple equals operator (===), 132\ntroubleshooting, 50\ntwo-way bindings\ncreating with directive, 466\u2013468\n:bind\ncreating with , 420\nv-model\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1031>\n", "text": "operator, 68\ntypeof\nU\nunblocking code, with and , 238\nasync defer\nuncaught exception, 654\nuncontrolled forms, 337\u2013339\ndata type, 77\nundefined\nunderscores, in JavaScript, 32\nfunction, 141\nuneval()\nunidirectional connection, 667\nunidirectional transitions, 470\nunit testing\nabout, 547\nconfiguring Jest, 547\u2013548\ninstalling Jest, 547\u2013548\nwriting tests, 548\u2013550\nunmounting methods\nabout, 315\u2013316\nperforming effects on, 319\u2013320\nmethod, 113\nunshift()\nunshifting, 114\u2013115\nmethod, 485\u2013486, 487\nunsubscribe()\nunsubscribing, from stores, 485\u2013486\nmethod, 484, 486, 487\nupdate()\nmethod, 695\u2013696\nupdateMany()\nmethod, 695\u2013696\nupdateOne()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1032>\n", "text": "updating\nabout, 6\narray methods and, 442\u2013445\ndata, 695\u2013696\nDOM, 354\u2013355\nnpm, 503\nupdating methods, 313\u2013315\ncommand, 686\nuse db\nmethod, 316\u2013317, 318\u2013319, 320, 362\nuseEffect()\nuser interface\nconverting to React, 524\u2013529\ndefined, 234\nuser registration\nimplementing, 734\u2013741\ntesting, 740\u2013741\nstring, 245\u2013246\nuserAgent\n, creating, 733\u2013734\nuserModel\nusers, working with, 687\u2013688\nmethod, 305\u2013306, 316\nuseState()\nUTF-8, 605\u2013606\nV\nV8 engine, 237, 563\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1033>\n", "text": "values\nabout, 30\npassing by, 142\u2013143\nreturning valid, 300\nvariable scope, 80\nvariables\ncreating with , 63\u201366\nlet\ndeclaring, 64\nenvironment, 581\u2013583\ninitializing, 64\nnaming, 66\nusing, 64\u201366, 67\ndirective, 391\u2013393, 399\u2013400\nv-bind\ndirective, 379\nv-else\ndirective, 379\nv-else-if\ndirective\nv-for\nabout, 380\nusing with arrays, 382\u2013383\nusing with objects, 380\u2013382\nviewing chunks, 590\u2013591\nviews, serving, 712\u2013715\ndirective, 379\nv-if\nVirtual DOM (VDOM), 278\u2013279\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1034>\n", "text": "Visual Studio Code (VSC)\nabout, 22\u201323\nconfiguring, 43\u201350\ngetting Svelte for extension, 426\u2013427\ninstalling, 23\u201324\nlaunching terminal, 272\u2013274\nlearning to use, 25\u201329\nvisualizing interface, 249\nDocument\nVite, initializing projects with, 271\u2013278\nfile, 276\nvite.config.js\ndirective, 420\nv-model\nVolar, installing, 346\n, setting listeners with, 411\u2013416\nv-on\ndirective, 378\nv-show\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1035>\n", "text": "Vue\ncomponents, 357\u2013368\nfollowing component lifecycle, 362\u2013366\nhandling errors in components, 366\u2013368\ninstalling Vue DevTools, 353\u2013355\nmounting root components, 348\u2013350\nnaming components, 362\nReact compared with, 343\u2013344\nscaffolding Vue.js applications, 344\u2013348\nsingle-file components, 357\u2013361\nstructure of app, 347\nstyles, 350\u2013353\ntemplates\nadding style to components, 387\u2013393\ncomposing with slots, 383\u2013387\nconditional rendering, 378\u2013379\ndirectives, 373\u2013377\nrendering lists, 379\u2013383\nusing JavaScript templates, 371\u2013373\nwriting HTML templates, 369\u2013371\nVue DevTools, installing, 353\u2013355\nvue-create, bootstrapping with, 344\u2013346\nVue.js applications, scaffolding, 344\u2013348\nW\nWarning icon, 6\nwatch expressions, 546, 671\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1036>\n", "text": "function, reacting to state changes with, 408\u2013410\nwatch()\nWeb APIs, 241\u2013243\nweb application server, 627\nweb browsers\nabout, 233\u2013234, 241\nbrowser engine, 235\ninterface, 257\u2013259\nHistory\nHTML interface, 249\u2013257\nDocument\ninterfaces, 241\u2013243\ninterfacing with, 234\u2013235\nNetscape Navigator, 243\u2013245\nnetworking, 239\u2013240\nprogramming, 241\u2013259\nrendering engine, 235\u2013238\nas runtime environments, 561\nuser agent string, 245\u2013246\nWeb APIs, 241\u2013243\ninterface, 246\u2013248\nWindow\nweb servers\ncreating, 630\u2013638\ndefined, 627\nAPI, 243\nWeb Worker\nAPI, 243\nWebGL\nWebKit, 235\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1037>\n", "text": "Webpack\nabout, 515\u2013516\nconfiguring for React, 522\u2013524\nwebsites\nBootstrap, 292\nCheat Sheet, 6\nECMAScript, 15\nGit, 56\nGitHub, 62\nMozilla Developer Network, 417\nNode.js, 43\nPostman, 709\nPro Git, 62\nsource code, 6\nSwagger, 709\nupdates, 6\nWebSocket, 667\nloops, 100\u2013101\nwhile\nwhite space, JavaScript and, 31\ninterface\nWindow\nabout, 246\u2013247\nmethods, 247\u2013248\nproperties, 247, 248\nfunction, 414\nwindow.alert()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1038>\n", "text": "Windows\ninstalling MongoDB on, 677\u2013679\nstarting MongoDB on, 681\nworkspaces, adding, 669\nmethod, 484\nwritable()\nwritable streams, creating, 596\u2013597\nmethod, 596\u2013597, 598\u2013599, 610, 637\nwrite()\nmethod, 636, 637\u2013638\nwriteHead()\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1039>\n", "text": "writing\nanonymous functions as arrow functions, 152\nasynchronous JavaScript, 197\u2013222\ncode through testing, 552\ncomponents, 437\u2013439\ndev scripts, 505\u2013506\nto disks with , 619\u2013620\nfs.write()\nfiles, 503\u2013505, 619\u2013620\nto files using Promises, 616\u2013617\nfunction bodies, 148\nfunctions, 144\u2013154\nHTML output with JSX, 283\u2013284\nHTML templates, 369\u2013371\nJavaScript programs, 29\u201332\nJSX, 281\u2013296\nmethods, 154\u2013155\nNode.js programs, 568\u2013569\npromises, 203\u2013206\ntests, 548\u2013550\ntext expressions, 458\u2013459\nX\nXML, JSX as, 282\u2013283, 285\nmethod, 203\u2013204\nXMLHttpRequest()\nXSS (cross-site scripting), 218, 745\u2013746\nXSS attacks, 745\u2013746\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1040>\n", "text": "Z\nzero-based indexing, 79\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1041>\n", "text": "About the Author\nChris Minnick ( ) is a full-stack developer,\nwww.chrisminnick.com\ntrainer, and writer. He is the author of Beginning React.js\nFoundations, Coding with JavaScript For Dummies, JavaScript For\nKids For Dummies (all from Wiley), and more than a dozen other\nbooks about coding. He has taught web and mobile development,\nReactJS, and JavaScript to thousands of programmers worldwide.\nWhen Chris isn\u2019t coding, writing, or teaching, he is an enthusiastic\namateur at something new every day.\nDedication\nThis book is dedicated to . You'll never be a function,\nundefined\nbut you show potential.\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1042>\n", "text": "Author's Acknowledgments\nThank you to everyone who writes and keeps improving the\nJavaScript language, runtimes, libraries, documentation, and\ntools. I learned everything in this book from friends, colleagues,\nmentors, students, bloggers, books, videos, Stack Overflow, and\nfar too many people to list here. Learning to code is an ongoing\nprocess, and I'm grateful that there are so many people in the\nJavaScript community who share their experience and wisdom.\nThank you to my family and to my best friend, Jill, for\nunderstanding and encouraging me; to my agent, Carole Jelen,\nfor knowing what I should be doing and how to get me there; to\nmy editor, Tim Gallan, and copy editor Becky Whitney, for keeping\neverything organized and making me look good; to my incredible\ntechnical editor, Rick Carlino, for reading every dot, semicolon,\nand curly brace; and to the whole team at Wiley (some of whom\nare listed below) for your talent, skill, attention to detail, and\nsupport throughout this project and my other book projects.\nMost of all, thanks to you, the reader, for trusting me with helping\nyou learn about this stuff. Your feedback and support are always\nappreciated. Please consider leaving a review online or email me\n( ) and let me know how I did.\nchris@minnick.com\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1043>\n", "text": "Publisher\u2019s Acknowledgments\nExecutive Editor: Steve Hayes\nDevelopment Editor: Tim Gallan\nCopy Editor: Becky Whitney\nTechnical Reviewer: Rick Carlino\nProduction Editor: Saikarthick Kumarasamy\nCover Image: Courtesy of Chris Minnick\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1044>\n", "text": "Take Dummies with you\neverywhere you go!\nGo to our Website\nLike us on Facebook\nFollow us on Twitter\nWatch us on YouTube\nJoin us on LinkedIn\nPin us on Pinterest\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1045>\n", "text": "Subscribe to our newsletter\nCreate your own Dummies book cover\n", "type": "pdf\n"}
{"filename": "JavaScript All-in-One For Dummi - Chris Minnick.pdf\n", "page": "<Page:1046>\n", "text": "WILEY END USER LICENSE\nAGREEMENT\nGo to www.wiley.com/go/eula to access Wiley\u2019s ebook EULA.\n", "type": "pdf\n"}
